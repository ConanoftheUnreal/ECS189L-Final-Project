<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Polarith.AI</name>
    </assembly>
    <members>
        <member name="T:Polarith.AI.Criteria.CriteriaBehaviour">
            <summary>
            Used for writing and modifying objective values of a specified <see cref="T:Polarith.AI.Criteria.Problem`1"/> (implementation as
            abstract base class). The problem instance is hold by a class implementing <see cref="T:Polarith.AI.Criteria.Context`2"/>.
            <para/>
            This abstract base class serves as container for intermediate members needed in the further inheritance
            hierarchy, like for instance, it holds a field for <see cref="P:Polarith.AI.Criteria.CriteriaBehaviour.Enabled"/>. So, an <see cref="T:Polarith.AI.Criteria.IBehaviour"/> can be
            active or inactive depending on the set <see cref="P:Polarith.AI.Criteria.CriteriaBehaviour.Enabled"/> property. In order to modify the objective values,
            the <see cref="M:Polarith.AI.Criteria.CriteriaBehaviour.Behave"/> method has to be defined.
            </summary>
        </member>
        <member name="F:Polarith.AI.Criteria.CriteriaBehaviour.CentralOrder">
            <summary>
            The minimum <see cref="P:Polarith.AI.Criteria.CriteriaBehaviour.Order"/> for behaviours which should be processed before behaviours using <see
            cref="F:Polarith.AI.Criteria.CriteriaBehaviour.LastOrder"/> but after all other behaviours.
            </summary>
        </member>
        <member name="F:Polarith.AI.Criteria.CriteriaBehaviour.LastOrder">
            <summary>
            The minimum <see cref="P:Polarith.AI.Criteria.CriteriaBehaviour.Order"/> for behaviours which should be processed at last.
            </summary>
        </member>
        <member name="F:Polarith.AI.Criteria.CriteriaBehaviour.enabled">
            <summary>
            Determines if this <see cref="T:Polarith.AI.Criteria.IBehaviour"/> is active or inactive.
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.CriteriaBehaviour.Enabled">
            <summary>
            Determines if this <see cref="T:Polarith.AI.Criteria.IBehaviour"/> is active or inactive.
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.CriteriaBehaviour.Order">
            <summary>
            Specifies the execution order of this behaviour.
            </summary>
        </member>
        <member name="M:Polarith.AI.Criteria.CriteriaBehaviour.Behave">
            <summary>
            Should be used to write/modify objective values for an <see cref="T:Polarith.AI.Criteria.IProblem`1"/> instance hold by a class
            implementing <see cref="T:Polarith.AI.Criteria.IContext`2"/>.
            </summary>
        </member>
        <member name="T:Polarith.AI.Criteria.Receptor`1">
            <summary>
            Represents one sensorial element used to form an <see cref="T:Polarith.AI.Criteria.Sensor`1"/> (implementation as base class).
            Metaphorically, in case of a camera sensor, this would be corresponding to a single sensor pixel.
            <para/>
            Each receptor has got a neighbourhood association to other receptors forming a certain sensor shape. In
            addition, a receptor holds a structural element of type <typeparamref name="T"/> which defines how the receptor
            is represented in the world of its agent (problem space), and thus, determines how an agent can observe its
            environment.
            </summary>
            <typeparam name="T">Type of the structural sensor element defining the problem space.</typeparam>
        </member>
        <member name="P:Polarith.AI.Criteria.Receptor`1.NeighbourIDs">
            <summary>
            Holds the IDs of all associated neighbours (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.Receptor`1.ID">
            <summary>
            Identification number of this receptor which should be unique within an <see cref="T:Polarith.AI.Criteria.ISensor`1"/>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.Receptor`1.Structure">
            <summary>
            Problem space representation of a receptor. Determines how the associated <see cref="T:Polarith.AI.Criteria.ISensor`1"/> observes
            the world.
            </summary>
        </member>
        <member name="T:Polarith.AI.Criteria.Sensor`1">
            <summary>
            Represents the sensorial system of an agent (implementation as abstract base class). It determines how the agent
            perceives (samples) its world (problem space).
            <para/>
            A <see cref="T:Polarith.AI.Criteria.Sensor`1"/> is made up of <see cref="T:Polarith.AI.Criteria.IReceptor`1"/> instances which form the sensor. Therefore,
            receptors define neighbourhood structures between each other. Every receptor has got an <see
            cref="P:Polarith.AI.Criteria.IReceptor`1.ID"/> and within one <see cref="T:Polarith.AI.Criteria.Sensor`1"/> instance this ID is unique in order to
            definitely identify a receptor.
            <para/>
            This abstract base class mainly serves as container for intermediate methods which are useful for the further
            inheritance hierarchy, like for instance <see cref="M:Polarith.AI.Criteria.Sensor`1.RepairAfterInsert(System.Int32)"/> and <see
            cref="M:Polarith.AI.Criteria.Sensor`1.RepairBeforeRemove(System.Int32)"/>. All other class members are abstract and cannot be implemented here because of
            Unity's serialization pipeline. In order to support the serialization, we need to store a list of concrete <see
            cref="T:Polarith.AI.Criteria.Receptor`1"/> typed instances, whereby the type <typeparamref name="T"/> must be fixed/hidden through
            inheritance, like it is done for <see cref="T:Polarith.AI.Move.Receptor"/>.
            <para/>
            The concrete problem space representation of a sensor is depended on the type <typeparamref name="T"/> of the
            structural element hold by each <see cref="T:Polarith.AI.Criteria.IReceptor`1"/>.
            </summary>
            <typeparam name="T">Type of the structural sensor element defining the problem space.</typeparam>
        </member>
        <member name="P:Polarith.AI.Criteria.Sensor`1.ReceptorCount">
            <summary>
            The number of contained receptors (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.Sensor`1.Item(System.Int32)">
            <summary>
            Provides quick read-only access to a contained <see cref="T:Polarith.AI.Criteria.IReceptor`1"/> instance.
            </summary>
            <param name="id">Specifies the receptor which is returned.</param>
            <returns>The receptor belonging to the specified <paramref name="id"/>.</returns>
        </member>
        <member name="M:Polarith.AI.Criteria.Sensor`1.AddReceptor">
            <summary>
            Constructs and adds an <see cref="T:Polarith.AI.Criteria.IReceptor`1"/> instance into this sensor. The new receptor is intended to
            be attached to the sensor so that it gets the latest (or greatest) ID.
            </summary>
            <returns>The added <see cref="T:Polarith.AI.Criteria.IReceptor`1"/> instance.</returns>
        </member>
        <member name="M:Polarith.AI.Criteria.Sensor`1.InsertReceptor(System.Int32)">
            <summary>
            Constructs and inserts an <see cref="T:Polarith.AI.Criteria.IReceptor`1"/> instance into this sensor with the specified <paramref
            name="id"/>. This might cause an adaption of all the receptor IDs which has been greater than <paramref
            name="id"/>.
            </summary>
            <param name="id">The ID the new receptor should get.</param>
            <returns>The inserted <see cref="T:Polarith.AI.Criteria.IReceptor`1"/> instance.</returns>
        </member>
        <member name="M:Polarith.AI.Criteria.Sensor`1.GetReceptor(System.Int32)">
            <summary>
            Gets the <see cref="T:Polarith.AI.Criteria.IReceptor`1"/> with the specified <paramref name="id"/>.
            </summary>
            <param name="id">The ID to get the corresponding receptor for.</param>
            <returns>The <see cref="T:Polarith.AI.Criteria.IReceptor`1"/> instance with the specified <paramref name="id"/>.</returns>
        </member>
        <member name="M:Polarith.AI.Criteria.Sensor`1.RemoveReceptorAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Polarith.AI.Criteria.IReceptor`1"/> with the specified <paramref name="id"/>.
            </summary>
            <param name="id">The ID to remove the corresponding receptor for.</param>
        </member>
        <member name="M:Polarith.AI.Criteria.Sensor`1.ClearReceptors">
            <summary>
            Removes all contained <see cref="T:Polarith.AI.Criteria.IReceptor`1"/> instances.
            </summary>
        </member>
        <member name="M:Polarith.AI.Criteria.Sensor`1.RepairAfterInsert(System.Int32)">
            <summary>
            Might be called at the beginning of <see cref="M:Polarith.AI.Criteria.Sensor`1.InsertReceptor(System.Int32)"/>.
            </summary>
            <param name="id">The index to remove the corresponding <see cref="T:Polarith.AI.Criteria.IReceptor`1"/> for.</param>
        </member>
        <member name="M:Polarith.AI.Criteria.Sensor`1.RepairBeforeRemove(System.Int32)">
            <summary>
            Might be called at the end of <see cref="M:Polarith.AI.Criteria.Sensor`1.RemoveReceptorAt(System.Int32)"/>.
            </summary>
            <param name="id">The index to remove the corresponding <see cref="T:Polarith.AI.Criteria.IReceptor`1"/> for.</param>
        </member>
        <member name="T:Polarith.AI.Criteria.IBehaviour">
            <summary>
            Used for writing and modifying objective values of a specified <see cref="T:Polarith.AI.Criteria.IProblem`1"/> (interface). The
            problem instance is hold by a class implementing <see cref="T:Polarith.AI.Criteria.IContext`2"/>. Therefore, the <see
            cref="M:Polarith.AI.Criteria.IBehaviour.Behave"/> method has to be defined. An <see cref="T:Polarith.AI.Criteria.IBehaviour"/> can be active or inactive depending on the
            set <see cref="P:Polarith.AI.Criteria.IBehaviour.Enabled"/> property.
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.IBehaviour.Enabled">
            <summary>
            Determines if this <see cref="T:Polarith.AI.Criteria.IBehaviour"/> is active or inactive.
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.IBehaviour.Order">
            <summary>
            Specifies the execution order of this behaviour.
            </summary>
        </member>
        <member name="M:Polarith.AI.Criteria.IBehaviour.Behave">
            <summary>
            Should be used to write/modify objective values for an <see cref="T:Polarith.AI.Criteria.IProblem`1"/> instance hold by a class
            implementing <see cref="T:Polarith.AI.Criteria.IContext`2"/>.
            </summary>
        </member>
        <member name="T:Polarith.AI.Criteria.IContext`2">
            <summary>
            Builds the very foundation for all AI computations related to the multi-criteria optimization (MCO) pipeline
            (interface). <see cref="T:Polarith.AI.Criteria.IContext`2"/> is intended to connect the dots for the different AI
            modules and to bring everything together. It provides references to important all modules belonging to the AI
            system. The method <see cref="M:Polarith.AI.Criteria.IContext`2.Evaluate"/> should be implemented to execute the AI main loop and to define/solve
            a MCO <see cref="P:Polarith.AI.Criteria.IContext`2.Problem"/> storing the results within the associated <see cref="P:Polarith.AI.Criteria.IContext`2.Decision"/> instance.
            <para/>
            The type <typeparamref name="TValue"/> is used by the MCO related classes <see cref="T:Polarith.AI.Criteria.IProblem`1"/> and <see
            cref="T:Polarith.AI.Criteria.ISolver`1"/> for the objective values, as against the type <typeparamref name="TStructure"/> is used by
            <see cref="T:Polarith.AI.Criteria.ISensor`1"/> in order to sample an agent's world and define its problem space representation.
            </summary>
            <typeparam name="TValue">Type of the objective values defining the objective space.</typeparam>
            <typeparam name="TStructure">Type of the structural sensor element defining the problem space.</typeparam>
        </member>
        <member name="P:Polarith.AI.Criteria.IContext`2.Problem">
            <summary>
            Holds objective values defining a MCO problem to be solved (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.IContext`2.Behaviours">
            <summary>
            Holds <see cref="T:Polarith.AI.Criteria.IBehaviour"/> instances which are intended to be processed (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.IContext`2.Decision">
            <summary>
            Container for storing the results from <see cref="M:Polarith.AI.Criteria.IContext`2.Evaluate"/> (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.IContext`2.Solver">
            <summary>
            Module used for solving the actual <see cref="P:Polarith.AI.Criteria.IContext`2.Problem"/>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.IContext`2.Sensor">
            <summary>
            Determines how an agent samples its environment.
            </summary>
        </member>
        <member name="M:Polarith.AI.Criteria.IContext`2.Evaluate">
            <summary>
            Processes the AI main loop for defining and solving the hold <see cref="P:Polarith.AI.Criteria.IContext`2.Problem"/> writing the results into
            the <see cref="P:Polarith.AI.Criteria.IContext`2.Decision"/>. To obtain objective values, the associated <see cref="T:Polarith.AI.Criteria.IBehaviour"/> instances
            should be executed in series, whereby the <see cref="P:Polarith.AI.Criteria.IContext`2.Sensor"/> determines how an agent observes its
            environment. Then, for solving, the associated <see cref="P:Polarith.AI.Criteria.IContext`2.Solver"/> should be used.
            </summary>
        </member>
        <member name="T:Polarith.AI.Criteria.IDecision`2">
            <summary>
            Holds the results of the solved <see cref="T:Polarith.AI.Criteria.IProblem`1"/> (interface). The results are computed in <see
            cref="M:Polarith.AI.Criteria.IContext`2.Evaluate"/>.
            <para/>
            A complete decision is made up of a set of Pareto optimal objective values, an associated <see cref="P:Polarith.AI.Criteria.IDecision`2.Index"/>
            pointing to an objective value column of an <see cref="T:Polarith.AI.Criteria.IProblem`1"/> instance and the corresponding <see
            cref="P:Polarith.AI.Criteria.IDecision`2.Structure"/> of an <see cref="T:Polarith.AI.Criteria.ISensor`1"/> belonging to the result <see cref="P:Polarith.AI.Criteria.IDecision`2.Index"/>.
            <para/>
            The type <typeparamref name="TValue"/> is used by the MCO related classes <see cref="T:Polarith.AI.Criteria.IProblem`1"/> and <see
            cref="T:Polarith.AI.Criteria.ISolver`1"/> for the objective values, as against the type <typeparamref name="TStructure"/> is used by
            <see cref="T:Polarith.AI.Criteria.ISensor`1"/> in order to sample an agent's world and define its problem space representation.
            </summary>
            <typeparam name="TValue">Type of the objective values defining the objective space.</typeparam>
            <typeparam name="TStructure">Type of the structural sensor element defining the problem space.</typeparam>
        </member>
        <member name="P:Polarith.AI.Criteria.IDecision`2.Values">
            <summary>
            Resulting Pareto optimal objective values (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.IDecision`2.Index">
            <summary>
            Determines the resulting objective value column within the <see cref="T:Polarith.AI.Criteria.IProblem`1"/> and the <see
            cref="T:Polarith.AI.Criteria.IReceptor`1"/> instance of the associated <see cref="T:Polarith.AI.Criteria.ISensor`1"/>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.IDecision`2.Structure">
            <summary>
            Structural element defining the results in problem space.
            </summary>
        </member>
        <member name="T:Polarith.AI.Criteria.IProblem`1">
            <summary>
            Represents the multicriteria optimization (MCO) problem solved by the AI system(interface). This is done by a
            solver, e.g. an <see cref="T:Polarith.AI.Criteria.ISolver`1"/>.
            <para/>
            An <see cref="T:Polarith.AI.Criteria.IProblem`1"/> can be seen as a matrix, whereby a row represents an objective and a column
            represents associated values for each objective. So, classes implementing this interface should ensure that each
            objective has got the same number of values. Every <see cref="T:Polarith.AI.Criteria.IProblem`1"/> stores the information whether it
            is to be minimized or maximized so that an <see cref="T:Polarith.AI.Criteria.ISolver`1"/> is able to distinguish between those two
            operations.
            </summary>
            <typeparam name="T">Type of the objective values defining the objective space.</typeparam>
        </member>
        <member name="P:Polarith.AI.Criteria.IProblem`1.ObjectiveCount">
            <summary>
            The number of objectives (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.IProblem`1.ValueCount">
            <summary>
            The number of values per objective (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.IProblem`1.Item(System.Int32)">
            <summary>
            Provides quick read-only access to an objective (problem matrix row).
            </summary>
            <param name="index">Specifies the objective which is returned.</param>
            <returns>The objective belonging to the specified <paramref name="index"/>.</returns>
        </member>
        <member name="M:Polarith.AI.Criteria.IProblem`1.AddObjective(System.Boolean)">
            <summary>
            Adds an objective (one row to the problem matrix).
            </summary>
            <param name="minimized">
            Specifies whether the added objective should be considered for minimization or maximization.
            </param>
            <returns>Read-only reference to the added objective.</returns>
        </member>
        <member name="M:Polarith.AI.Criteria.IProblem`1.AddValues(`0)">
            <summary>
            Adds a value to every objective (one column to the problem matrix). For each objective, the same given
            <paramref name="value"/> is used.
            </summary>
            <param name="value">The value which is added to every objective.</param>
        </member>
        <member name="M:Polarith.AI.Criteria.IProblem`1.AddValues(`0[])">
            <summary>
            Adds a value to every objective (one column to the problem matrix). For each objective, the specific value
            at the corresponding array index in <paramref name="values"/> is used.
            </summary>
            <param name="values">The values to be added.</param>
        </member>
        <member name="M:Polarith.AI.Criteria.IProblem`1.GetObjective(System.Int32)">
            <summary>
            Gets the objective (problem matrix row) belonging to the specified <paramref name="index"/>. Access is
            read-only.
            </summary>
            <param name="index">The index to get the corresponding objective for.</param>
            <returns>The objective belonging to the specified <paramref name="index"/>.</returns>
        </member>
        <member name="M:Polarith.AI.Criteria.IProblem`1.GetValue(System.Int32,System.Int32)">
            <summary>
            Gets a value (single element of the problem matrix).
            </summary>
            <param name="objectiveIndex">The index of the targeted objective (row).</param>
            <param name="valueIndex">The index of the targeted objective value (column).</param>
            <returns>The requested value.</returns>
        </member>
        <member name="M:Polarith.AI.Criteria.IProblem`1.IsObjectiveMinimized(System.Int32)">
            <summary>
            Determines if an objective is considered to be minimized or maximized.
            </summary>
            <param name="index">Specifies the objective.</param>
            <returns><c>true</c> if the objective is to be minimized, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Polarith.AI.Criteria.IProblem`1.SetObjectiveMinimized(System.Int32,System.Boolean)">
            <summary>
            Specifies if an objective is considered to be minimized or maximized.
            </summary>
            <param name="index">Specifies the objective.</param>
            <param name="minimized"><c>true</c> if the objective is to be minimized, <c>false</c> otherwise.</param>
        </member>
        <member name="M:Polarith.AI.Criteria.IProblem`1.SetValue(System.Int32,System.Int32,`0)">
            <summary>
            Sets a value (single element of the problem matrix).
            </summary>
            <param name="objectiveIndex">The index of the targeted objective (row).</param>
            <param name="valueIndex">The index of the targeted objective value (column).</param>
            <param name="value">The value to be set.</param>
        </member>
        <member name="M:Polarith.AI.Criteria.IProblem`1.ResetValues">
            <summary>
            Resets all objective values to the default of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Criteria.IProblem`1.ResetValues(`0)">
            <summary>
            Resets all objective values to the given <paramref name="value"/> of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Criteria.IProblem`1.RemoveObjectiveAt(System.Int32)">
            <summary>
            Removes the objective (problem matrix row) at the specified <paramref name="index"/>.
            </summary>
            <param name="index">Corresponds to the objective (row) which should be removed.</param>
        </member>
        <member name="M:Polarith.AI.Criteria.IProblem`1.RemoveValuesAt(System.Int32)">
            <summary>
            Removes the objective values (problem matrix column) at the specified <paramref name="index"/>.
            </summary>
            <param name="index">Corresponds to the objective values (column) which should be removed.</param>
        </member>
        <member name="M:Polarith.AI.Criteria.IProblem`1.ResizeObjectives(System.Int32)">
            <summary>
            Changes the number of values (column length) for each objective to the specified <paramref
            name="valueCount"/>.
            </summary>
            <param name="valueCount">The new number of values for each objective.</param>
        </member>
        <member name="M:Polarith.AI.Criteria.IProblem`1.ClearObjectives">
            <summary>
            Removes all objectives including all values.
            </summary>
        </member>
        <member name="M:Polarith.AI.Criteria.IProblem`1.ClearValues">
            <summary>
            Removes all values but preserves the number of objectives. Conceptionally, this means we get a problem
            matrix with a certain number of (virtual) rows but without any column values.
            </summary>
        </member>
        <member name="T:Polarith.AI.Criteria.IReceptor`1">
            <summary>
            Represents one sensorial element used to form an <see cref="T:Polarith.AI.Criteria.ISensor`1"/> (interface). Metaphorically, in case
            of a camera sensor, this would be corresponding to a single sensor pixel.
            <para/>
            Each receptor has got a neighbourhood association to other receptors forming a certain sensor shape. In
            addition, a receptor holds a structural element of type <typeparamref name="T"/> which defines how the receptor
            is represented in the world of its agent (problem space), and thus, determines how an agent can observe its
            environment.
            </summary>
            <typeparam name="T">Type of the structural sensor element defining the problem space.</typeparam>
        </member>
        <member name="P:Polarith.AI.Criteria.IReceptor`1.NeighbourIDs">
            <summary>
            Holds the IDs of all associated neighbours (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.IReceptor`1.ID">
            <summary>
            Identification number of this receptor which should be unique within an <see cref="T:Polarith.AI.Criteria.ISensor`1"/>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.IReceptor`1.Structure">
            <summary>
            Problem space representation of a receptor. Determines how the associated <see cref="T:Polarith.AI.Criteria.ISensor`1"/> observes
            the world.
            </summary>
        </member>
        <member name="T:Polarith.AI.Criteria.ISensor`1">
            <summary>
            Represents the sensorial system of an agent (interface). It determines how the agent perceives (samples) its
            world (problem space).
            <para/>
            An <see cref="T:Polarith.AI.Criteria.ISensor`1"/> is made up of <see cref="T:Polarith.AI.Criteria.IReceptor`1"/> instances which form the sensor. Therefore,
            receptors define neighbourhood structures between each other. Every receptor has got an <see
            cref="P:Polarith.AI.Criteria.IReceptor`1.ID"/> and within one <see cref="T:Polarith.AI.Criteria.ISensor`1"/> instance this ID is intended to be unique in
            order to definitely identify a receptor.
            <para/>
            The concrete problem space representation of a sensor is depended on the type <typeparamref name="T"/> of the
            structural element hold by each <see cref="T:Polarith.AI.Criteria.IReceptor`1"/>.
            </summary>
            <typeparam name="T">Type of the structural sensor element defining the problem space.</typeparam>
        </member>
        <member name="P:Polarith.AI.Criteria.ISensor`1.ReceptorCount">
            <summary>
            The number of contained receptors (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.ISensor`1.Item(System.Int32)">
            <summary>
            Provides quick read-only access to a contained <see cref="T:Polarith.AI.Criteria.IReceptor`1"/> instance.
            </summary>
            <param name="id">Specifies the receptor which is returned.</param>
            <returns>The receptor belonging to the specified <paramref name="id"/>.</returns>
        </member>
        <member name="M:Polarith.AI.Criteria.ISensor`1.AddReceptor">
            <summary>
            Constructs and adds an <see cref="T:Polarith.AI.Criteria.IReceptor`1"/> instance into this sensor. The new receptor is intended to
            be attached to the sensor so that it gets the latest (or greatest) ID.
            </summary>
            <returns>The added <see cref="T:Polarith.AI.Criteria.IReceptor`1"/> instance.</returns>
        </member>
        <member name="M:Polarith.AI.Criteria.ISensor`1.InsertReceptor(System.Int32)">
            <summary>
            Constructs and inserts an <see cref="T:Polarith.AI.Criteria.IReceptor`1"/> instance into this sensor with the specified <paramref
            name="id"/>. This might cause an adaption of all the receptor IDs which has been greater than <paramref
            name="id"/>.
            </summary>
            <param name="id">The ID the new receptor should get.</param>
            <returns>The inserted <see cref="T:Polarith.AI.Criteria.IReceptor`1"/> instance.</returns>
        </member>
        <member name="M:Polarith.AI.Criteria.ISensor`1.GetReceptor(System.Int32)">
            <summary>
            Gets the <see cref="T:Polarith.AI.Criteria.IReceptor`1"/> with the specified <paramref name="id"/>.
            </summary>
            <param name="id">The ID to get the corresponding receptor for.</param>
            <returns>The <see cref="T:Polarith.AI.Criteria.IReceptor`1"/> instance with the specified ID.</returns>
        </member>
        <member name="M:Polarith.AI.Criteria.ISensor`1.RemoveReceptorAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Polarith.AI.Criteria.IReceptor`1"/> with the specified <paramref name="id"/>.
            </summary>
            <param name="id">The ID to remove the corresponding receptor for.</param>
        </member>
        <member name="M:Polarith.AI.Criteria.ISensor`1.ClearReceptors">
            <summary>
            Removes all contained <see cref="T:Polarith.AI.Criteria.IReceptor`1"/> instances.
            </summary>
        </member>
        <member name="T:Polarith.AI.Criteria.ISolver`1">
            <summary>
            Used for solving multicriteria optimization (MCO) problems (interface). So for a given <see cref="T:Polarith.AI.Criteria.IProblem`1"/>
            instance, an <see cref="T:Polarith.AI.Criteria.ISolver`1"/> is able to find a set of Pareto optimal solutions. Therefore, the method
            <see cref="M:Polarith.AI.Criteria.ISolver`1.Solve(Polarith.AI.Criteria.IProblem{`0})"/> is used.
            </summary>
            <typeparam name="T">Type of the objective values defining the objective space.</typeparam>
        </member>
        <member name="M:Polarith.AI.Criteria.ISolver`1.Solve(Polarith.AI.Criteria.IProblem{`0})">
            <summary>
            Solves a defined <see cref="T:Polarith.AI.Criteria.IProblem`1"/> and returns the found solution (objective) values.
            </summary>
            <param name="problem">The problem to be solved.</param>
            <returns>The found Pareto optimal solution values.</returns>
        </member>
        <member name="T:Polarith.AI.Criteria.ConstraintSolver`1">
            <summary>
            Used for solving multicriteria optimization (MCO) problems by implementing the epsilon constraint method. Given
            a MCO problem with a certain number of objectives, there is always one unlimited/unrestricted objective to be
            optimized. All other objectives are constraint to specific <see cref="F:Polarith.AI.Criteria.ConstraintSolver`1.Epsilons"/> so that the solver does not
            accept any solutions violating the constraints.
            <para/>
            This solver always finds one best solution which is Pareto optimal considering all objectives without violating
            the constraints. If there are no solutions which satisfy the constraints, the solver still picks the solution
            which is closest to the constraints.
            <para/>
            The <see cref="M:Polarith.AI.Criteria.IProblem`1.IsObjectiveMinimized(System.Int32)"/> flag is considered in order to handle problems to be
            minimized as well as problems to be maximized.
            </summary>
            <typeparam name="T">Type of the objective values defining the objective space.</typeparam>
        </member>
        <member name="F:Polarith.AI.Criteria.ConstraintSolver`1.Unlimited">
            <summary>
            The index of the unrestricted objective.
            </summary>
            <remarks>This is <c>public</c> to support Unity's serialization pipeline.</remarks>
        </member>
        <member name="F:Polarith.AI.Criteria.ConstraintSolver`1.Epsilons">
            <summary>
            Specifies the epsilon-constraints for each corresponding objective of an <see cref="T:Polarith.AI.Criteria.IProblem`1"/>.
            </summary>
            <remarks>This is <c>public</c> and not <c>readonly</c> to support Unity's serialization pipeline.</remarks>
        </member>
        <member name="M:Polarith.AI.Criteria.ConstraintSolver`1.#ctor">
            <summary>
            Constructs a <see cref="T:Polarith.AI.Criteria.ConstraintSolver`1"/> instance.
            </summary>
        </member>
        <member name="M:Polarith.AI.Criteria.ConstraintSolver`1.Solve(Polarith.AI.Criteria.IProblem{`0})">
            <summary>
            Solves a defined <see cref="T:Polarith.AI.Criteria.IProblem`1"/> and returns a Pareto optimal solution which does not violate the
            set <see cref="F:Polarith.AI.Criteria.ConstraintSolver`1.Epsilons"/> (constraints). If there are no solutions which satisfy the constraints, the
            solver still picks the solution which is closest to the constraints.
            </summary>
            <param name="problem">The problem to be solved.</param>
            <returns>One found Pareto optimal solution value.</returns>
            <exception cref="T:System.NullReferenceException">If the given <paramref name="problem"/> is <c>null</c>.</exception>
            <exception cref="T:System.IndexOutOfRangeException">
            If the number of <see cref="F:Polarith.AI.Criteria.ConstraintSolver`1.Epsilons"/> is less than the number of objectives in the given <paramref
            name="problem"/>.
            </exception>
        </member>
        <member name="T:Polarith.AI.Criteria.Context`2">
            <summary>
            Builds the very foundation for all AI computations related to the multicriteria optimization (MCO) pipeline
            (implementation as abstract base class). <see cref="T:Polarith.AI.Criteria.Context`2"/> connects the dots for the
            different AI modules and brings everything together. It provides references to all important modules belonging
            to the AI system. The method <see cref="M:Polarith.AI.Criteria.Context`2.Evaluate"/> executes the AI main loop and defines/solve a MCO <see
            cref="P:Polarith.AI.Criteria.Context`2.Problem"/> storing the results within the associated <see cref="P:Polarith.AI.Criteria.Context`2.Decision"/> instance.
            <para/>
            This abstract base class serves as main algorithm template specifying how the AI main loop works. Nevertheless,
            this class needs to be abstract due to the <see cref="M:Polarith.AI.Criteria.Context`2.MakeDecision"/> method which is responsible for building a
            complete decision. This process relies on a concrete <typeparamref name="TStructure"/> type and on other
            specific type related information which cannot be known in this inheritance layer so that the methods <see
            cref="M:Polarith.AI.Criteria.Context`2.Evaluate"/> and <see cref="M:Polarith.AI.Criteria.Context`2.MakeDecision"/> needs to be overridden/extended in derived classes.
            <para/>
            The type <typeparamref name="TValue"/> is used by the MCO related classes <see cref="T:Polarith.AI.Criteria.IProblem`1"/> and <see
            cref="T:Polarith.AI.Criteria.ISolver`1"/> for the objective values, as against the type <typeparamref name="TStructure"/> is used by
            <see cref="T:Polarith.AI.Criteria.ISensor`1"/> in order to sample an agent's world and define its problem space representation.
            </summary>
            <typeparam name="TValue">Type of the objective values defining the objective space.</typeparam>
            <typeparam name="TStructure">Type of the structural sensor element defining the problem space.</typeparam>
        </member>
        <member name="F:Polarith.AI.Criteria.Context`2.behaviours">
            <summary>
            Holds <see cref="T:Polarith.AI.Criteria.IBehaviour"/> instances intended to be processed. Uses the <see cref="T:System.Collections.Generic.List`1"/>
            implementation (read only).
            </summary>
        </member>
        <member name="F:Polarith.AI.Criteria.Context`2.solver">
            <summary>
            Module used for solving the actual <see cref="P:Polarith.AI.Criteria.Context`2.Problem"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Criteria.Context`2.sensor">
            <summary>
            Determines how an agent samples its environment.
            </summary>
        </member>
        <member name="F:Polarith.AI.Criteria.Context`2.solutionIndices">
            <summary>
            Read-only reference to the found solution indices.
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.Context`2.Problem">
            <summary>
            Holds objective values defining a MCO problem to be solved (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.Context`2.Decision">
            <summary>
            Container for storing the results from <see cref="M:Polarith.AI.Criteria.Context`2.Evaluate"/> (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.Context`2.Behaviours">
            <summary>
            Holds <see cref="T:Polarith.AI.Criteria.IBehaviour"/> instances intended to be processed. Uses the <see cref="T:System.Collections.Generic.List`1"/>
            implementation (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.Context`2.Solver">
            <summary>
            Module used for solving the actual <see cref="P:Polarith.AI.Criteria.Context`2.Problem"/>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.Context`2.Sensor">
            <summary>
            Determines how an agent samples its environment.
            </summary>
        </member>
        <member name="M:Polarith.AI.Criteria.Context`2.Evaluate">
            <summary>
            Processes the AI main loop for defining and solving the hold <see cref="P:Polarith.AI.Criteria.Context`2.Problem"/> writing the results into
            the <see cref="P:Polarith.AI.Criteria.Context`2.Decision"/>, therefore and for solving, the <see cref="M:Polarith.AI.Criteria.Context`2.MakeDecision"/> method gets called. To
            obtain objective values, the associated <see cref="T:Polarith.AI.Criteria.IBehaviour"/> instances are executed in series, whereby
            the hold <see cref="P:Polarith.AI.Criteria.Context`2.Sensor"/> determines how an agent observes its environment.
            </summary>
            <exception cref="T:System.NullReferenceException">
            If the <see cref="P:Polarith.AI.Criteria.Context`2.Solver"/> or the <see cref="P:Polarith.AI.Criteria.Context`2.Problem"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Criteria.Context`2.MakeDecision">
            <summary>
            This is the place for solving the given MCO <see cref="P:Polarith.AI.Criteria.Context`2.Problem"/> and collecting all information which are
            necessary for a complete <see cref="P:Polarith.AI.Criteria.Context`2.Decision"/>. Besides that, depending on the concrete derived
            implementation of <see cref="T:Polarith.AI.Criteria.Context`2"/>, on the applied generic types <typeparamref
            name="TValue"/> and <typeparamref name="TStructure"/>, this methods mainly needs to collect the appropriate
            data after solving.
            <para/>
            This virtual base method only calls the associated <see cref="P:Polarith.AI.Criteria.Context`2.Solver"/> for the given MCO <see
            cref="P:Polarith.AI.Criteria.Context`2.Problem"/>.
            </summary>
            <exception cref="T:System.NullReferenceException">
            If the <see cref="P:Polarith.AI.Criteria.Context`2.Solver"/> or the <see cref="P:Polarith.AI.Criteria.Context`2.Problem"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Polarith.AI.Criteria.Decision`2">
            <summary>
            Holds the results of the solved <see cref="T:Polarith.AI.Criteria.Problem`1"/> (implementation as base class). The results are
            computed in <see cref="M:Polarith.AI.Criteria.Context`2.Evaluate"/>.
            <para/>
            A complete decision is made up of a set of Pareto optimal objective values, an associated <see cref="P:Polarith.AI.Criteria.Decision`2.Index"/>
            pointing to an objective value column of a <see cref="T:Polarith.AI.Criteria.IProblem`1"/> instance and the corresponding <see
            cref="P:Polarith.AI.Criteria.Decision`2.Structure"/> of a <see cref="T:Polarith.AI.Criteria.ISensor`1"/> belonging to the result <see cref="P:Polarith.AI.Criteria.Decision`2.Index"/>.
            <para/>
            The type <typeparamref name="TValue"/> is used by the MCO related classes <see cref="T:Polarith.AI.Criteria.IProblem`1"/> and <see
            cref="T:Polarith.AI.Criteria.ISolver`1"/> for the objective values, as against the type <typeparamref name="TStructure"/> is used by
            <see cref="T:Polarith.AI.Criteria.ISensor`1"/> in order to sample an agent's world and define its problem space representation.
            </summary>
            <typeparam name="TValue">Type of the objective values defining the objective space.</typeparam>
            <typeparam name="TStructure">Type of the structural sensor element defining the problem space.</typeparam>
        </member>
        <member name="P:Polarith.AI.Criteria.Decision`2.Values">
            <summary>
            Resulting Pareto optimal objective values (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.Decision`2.Index">
            <summary>
            Determines the resulting objective value column within the <see cref="T:Polarith.AI.Criteria.IProblem`1"/> and the <see
            cref="T:Polarith.AI.Criteria.IReceptor`1"/> instance of the associated <see cref="T:Polarith.AI.Criteria.ISensor`1"/>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.Decision`2.Structure">
            <summary>
            Structural element defining the results in problem space.
            </summary>
        </member>
        <member name="T:Polarith.AI.Criteria.Problem`1">
            <summary>
            Represents the multicriteria optimization (MCO) problem solved by the AI system (implementation as base class).
            This is done by an <see cref="T:Polarith.AI.Criteria.ISolver`1"/>, e.g. an <see cref="T:Polarith.AI.Criteria.ConstraintSolver`1"/>.
            <para/>
            A <see cref="T:Polarith.AI.Criteria.Problem`1"/> can be seen as matrix, whereby a row represents an objective and a column represents
            associated values for each objective. So it is ensured that each objective has got the same number of values.
            Every <see cref="T:Polarith.AI.Criteria.Problem`1"/> stores the information whether it is to be minimized or maximized so that an <see
            cref="T:Polarith.AI.Criteria.ISolver`1"/> implementation is able to distinguish between those two operations.
            </summary>
            <typeparam name="T">Type of the objective values defining the objective space.</typeparam>
        </member>
        <member name="P:Polarith.AI.Criteria.Problem`1.ObjectiveCount">
            <summary>
            The number of objectives (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.Problem`1.ValueCount">
            <summary>
            The number of values per objective (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Criteria.Problem`1.Item(System.Int32)">
            <summary>
            Provides quick read-only access to an objective (problem matrix row).
            </summary>
            <param name="index">Specifies the objective which is returned.</param>
            <returns>The objective belonging to the specified <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective at the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Criteria.Problem`1.AddObjective(System.Boolean)">
            <summary>
            Adds an objective (one row to the problem matrix).
            </summary>
            <param name="minimized">
            Specifies whether the added objective should be considered for minimization or maximization.
            </param>
            <returns>Read-only reference to the added objective.</returns>
        </member>
        <member name="M:Polarith.AI.Criteria.Problem`1.AddValues(`0)">
            <summary>
            Adds a value to every objective (one column to the problem matrix). For each objective, the same given
            <paramref name="value"/> is used.
            </summary>
            <param name="value">The value which is added to every objective.</param>
        </member>
        <member name="M:Polarith.AI.Criteria.Problem`1.AddValues(`0[])">
            <summary>
            Adds a value to every objective (one column to the problem matrix). For each objective, the specific value
            at the corresponding array index in <paramref name="values"/> is used.
            </summary>
            <param name="values">The values to be added.</param>
            <exception cref="T:System.InvalidOperationException">
            If the length of <paramref name="values"/> is not equal to the objective count.
            </exception>
        </member>
        <member name="M:Polarith.AI.Criteria.Problem`1.GetObjective(System.Int32)">
            <summary>
            Gets the objective (problem matrix row) belonging to the specified <paramref name="index"/>. Access is
            read-only.
            </summary>
            <param name="index">The index to get the corresponding objective for.</param>
            <returns>The objective belonging to the specified <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective at the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Criteria.Problem`1.GetValue(System.Int32,System.Int32)">
            <summary>
            Gets a value (single element of the problem matrix).
            </summary>
            <param name="objectiveIndex">The index of the targeted objective (row).</param>
            <param name="valueIndex">The index of the targeted objective value (column).</param>
            <returns>The requested value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no value at the specified <paramref name="objectiveIndex"/> and/or <paramref
            name="valueIndex"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Criteria.Problem`1.IsObjectiveMinimized(System.Int32)">
            <summary>
            Determines if an objective is considered to be minimized or maximized.
            </summary>
            <param name="index">Specifies the objective.</param>
            <returns><c>true</c> if the objective is to be minimized, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective at the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Criteria.Problem`1.SetObjectiveMinimized(System.Int32,System.Boolean)">
            <summary>
            Specifies if an objective is considered to be minimized or maximized.
            </summary>
            <param name="index">Specifies the objective.</param>
            <param name="minimized"><c>true</c> if the objective is to be minimized, <c>false</c> otherwise.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective at the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Criteria.Problem`1.SetValue(System.Int32,System.Int32,`0)">
            <summary>
            Sets a value (single element of the problem matrix).
            </summary>
            <param name="objectiveIndex">The index of the targeted objective (row).</param>
            <param name="valueIndex">The index of the targeted objective value (column).</param>
            <param name="value">The value to be set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no value at the specified <paramref name="objectiveIndex"/> and/or <paramref
            name="valueIndex"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Criteria.Problem`1.ResetValues">
            <summary>
            Resets all objective values to the default of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Criteria.Problem`1.ResetValues(`0)">
            <summary>
            Resets all objective values to the given <paramref name="value"/> of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Criteria.Problem`1.RemoveObjectiveAt(System.Int32)">
            <summary>
            Removes the objective (problem matrix row) at the specified <paramref name="index"/>.
            </summary>
            <param name="index">Corresponds to the objective (row) which should be removed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective at the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Criteria.Problem`1.RemoveValuesAt(System.Int32)">
            <summary>
            Removes the objective values (problem matrix column) at the specified <paramref name="index"/>.
            </summary>
            <param name="index">Corresponds to the objective values (column) which should be removed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective value column at the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Criteria.Problem`1.ResizeObjectives(System.Int32)">
            <summary>
            Changes the number of values (column length) for each objective to the specified <paramref
            name="valueCount"/>.
            </summary>
            <param name="valueCount">The new number of values for each objective.</param>
        </member>
        <member name="M:Polarith.AI.Criteria.Problem`1.ClearObjectives">
            <summary>
            Removes all objectives including all values.
            </summary>
        </member>
        <member name="M:Polarith.AI.Criteria.Problem`1.ClearValues">
            <summary>
            Removes all values but preserves the number of objectives. Conceptually, this means we get a problem matrix
            with a certain number of (virtual) rows but without any column values.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.FilteredEnvironmentAttribute">
            <summary>
            An attribute for string fields that represent an <see cref="F:Polarith.AI.Move.AIMEnvironment.Label"/>. If an <see
            cref="T:Polarith.AI.Move.AIMSteeringFilter"/> is present on the same game object, a popup is displayed instead of a simple text
            field.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.TargetObjectiveAttribute">
            <summary>
            An attribute for int fields that represent an objective index. If an <see cref="T:Polarith.AI.Move.AIMContext"/> instance can be
            found, then a popup is shown. Otherwise, a simple int field is drawn. Using the <see cref="P:Polarith.AI.Move.TargetObjectiveAttribute.NegativeIndex"/>
            property allows to include a "None" option which equals to an index of -1. The character controllers, like the
            <see cref="T:Polarith.AI.Move.AIMSimpleController2D"/>, are using this feature.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.TargetObjectiveAttribute.#ctor(System.Boolean)">
            <summary>
            The attribute constructor.
            </summary>
            <param name="negativeIndex">
            If <c>true</c>, the drawn field has the option to use a negative index or "None" if an <see
            cref="T:Polarith.AI.Move.AIMContext"/> instance can be found. Otherwise, the index is limited to positive values.
            </param>
        </member>
        <member name="P:Polarith.AI.Move.TargetObjectiveAttribute.NegativeIndex">
            <summary>
            If <c>true</c>, the drawn field has the option to use a negative index or "None" if an <see
            cref="T:Polarith.AI.Move.AIMContext"/> instance can be found. Otherwise, the index is limited to positive values.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.BoundsType">
            <summary>
            Intended to distinguish between the different types of bounding boxes, e.g., within the bounds behaviours (Pro
            only).
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.BoundsType.ColliderAABB">
            <summary>
            Selects axis-aligned bounding boxes (AABB) in world coordinates.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.BoundsType.ColliderOBB">
            <summary>
            Selects oriented bounding boxes (OBB) in local coordinates.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.BoundsType.Visual">
            <summary>
            Selects visual (sprite/mesh) bounds in local coordinates. In order for this to work with meshes, a received
            object must not be static, or otherwise, no visual bounds can be received.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.LayerBlendingType">
            <summary>
            Defines how objective values are blended into context maps for individual <see cref="T:Polarith.AI.Move.SteeringBehaviour"/>
            instances.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.LayerBlendingType.None">
            <summary>
            The layer blending feature is not used. Values are written directly to the <see cref="P:Polarith.AI.Move.Context.Problem"/> by
            using the <see cref="T:Polarith.AI.Move.ValueWritingType"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.LayerBlendingType.AssignGreater">
            <summary>
            Writes a new value iff it is greater than the value which already exists.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.LayerBlendingType.AssignLesser">
            <summary>
            Writes a new value iff it is lesser than the value which already exists.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.LayerBlendingType.Addition">
            <summary>
            Adds the new value to the value which already exists.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.LayerBlendingType.Subtraction">
            <summary>
            Subtracts the new value from the value which already exists.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.LayerBlendingType.Multiplication">
            <summary>
            Multiplies the new value to the value which already exists.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.LayerBlendingType.Division">
            <summary>
            Divides the value which already exists by the new value.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.LayerNormalizationType">
            <summary>
            Defines whether objective values should be normalized while they are blended for individual <see
            cref="T:Polarith.AI.Move.SteeringBehaviour"/> instances.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.LayerNormalizationType.None">
            <summary>
            No normalization is done for the corresponding behaviour.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.LayerNormalizationType.Intermediate">
            <summary>
            The results of a single behaviour are normalized and then applied to the context map.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.LayerNormalizationType.Everything">
            <summary>
            The results of the behaviour are applied as they are, then every context value of the target objective is
            normalized.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.MoveBehaviour">
            <summary>
            <see cref="T:Polarith.AI.Move.MoveBehaviour"/> is the abstract base class for all the behaviours in the Move module of Polarith AI
            (back-end class). It is derived from <see cref="T:Polarith.AI.Criteria.CriteriaBehaviour"/>. In addition, it holds a reference for
            quick access to the associated <see cref="F:Polarith.AI.Move.MoveBehaviour.Context"/> so that every <see cref="T:Polarith.AI.Move.MoveBehaviour"/> is able to obtain
            all the necessary information for writing/modifying objective values in the corresponding <see
            cref="P:Polarith.AI.Move.Context.Problem"/>.
            <para/>
            This class also defines and implements additional mechanics for manipulating objective values. The methods <see
            cref="M:Polarith.AI.Move.MoveBehaviour.MapBySensitivity(Polarith.AI.Move.MappingType,Polarith.AI.Move.Structure,UnityEngine.Vector3,System.Single)"/> and <see cref="M:Polarith.AI.Move.MoveBehaviour.WriteValue(Polarith.AI.Move.ValueWritingType,System.Int32,System.Int32,System.Single,System.Boolean)"/> are designed to
            support this process.
            <para/>
            A <see cref="T:Polarith.AI.Move.MoveBehaviour"/> can be marked as thread-safe in its corresponding front-end class through setting
            <see cref="P:Polarith.AI.Move.AIMBehaviour.ThreadSafe"/> to <c>true</c>. If you do this, be sure not to use reference types of the
            Unity scripting API and not to make any possibly unsafe variable writes. If at least one behaviour is not marked
            <see cref="P:Polarith.AI.Move.AIMBehaviour.ThreadSafe"/>, the whole agent will not be part of the multithreading (Pro only).
            <para/>
            Base back-end class of every derived <see cref="T:Polarith.AI.Move.AIMBehaviour"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.MoveBehaviour.Context">
            <summary>
            Reference for quick access to the associated context instance.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.MoveBehaviour.intermediate">
            <summary>
            Holds the intermediate result of this behaviour which can be applied to the context map at the end of an
            update step using <see cref="M:Polarith.AI.Move.MoveBehaviour.BlendValues(Polarith.AI.Move.LayerBlendingType,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.MoveBehaviour.MapSpecial(Polarith.AI.Move.MappingType,System.Single,System.Single,System.Single)">
            <summary>
            Maps a <paramref name="value"/> lying between <paramref name="min"/> and <paramref name="max"/> to a
            resulting value between 0 and 1.
            <para/>
            The function used for the mapping is specified via the <paramref name="mapping"/> parameter, see <see
            cref="T:Polarith.AI.Move.MappingType"/>.
            </summary>
            <param name="mapping">Specifies the applied type of the mapping function.</param>
            <param name="min">The minimum of the function argument interval.</param>
            <param name="max">The maximum of the function argument interval.</param>
            <param name="value">The argument value to be mapped.</param>
            <returns>The mapped function value.</returns>
        </member>
        <member name="M:Polarith.AI.Move.MoveBehaviour.MapSpecialSqr(Polarith.AI.Move.MappingType,System.Single,System.Single,System.Single)">
            <summary>
            Maps a <paramref name="sqrValue"/> lying between <paramref name="sqrMin"/> and <paramref name="sqrMax"/> to
            a resulting value between 0 and 1, whereby all the given parameters are expected to be squared.
            <para/>
            The function used for the mapping is specified via the <paramref name="mapping"/> parameter, see <see
            cref="T:Polarith.AI.Move.MappingType"/>.
            </summary>
            <param name="mapping">Specifies the applied type of the mapping function.</param>
            <param name="sqrMin">The squared minimum of the function argument interval.</param>
            <param name="sqrMax">The squared maximum of the function argument interval.</param>
            <param name="sqrValue">The squared argument value to be mapped.</param>
            <returns>The mapped function value.</returns>
        </member>
        <member name="M:Polarith.AI.Move.MoveBehaviour.MapBySensitivity(Polarith.AI.Move.MappingType,Polarith.AI.Move.Structure,UnityEngine.Vector3,System.Single)">
            <summary>
            Maps (magnitude) values by sensitivity so that the <see cref="F:Polarith.AI.Move.Structure.Sensitivity"/> (plus the given
            <paramref name="sensitivityOffset"/>) is used as similarity threshold for the angle between the given
            <paramref name="direction"/> and the <see cref="F:Polarith.AI.Move.Structure.Direction"/>.
            <para/>
            When <paramref name="mapping"/> is <see cref="F:Polarith.AI.Move.MappingType.InverseLinear"/>, then: the more similar the
            direction vectors, the greater the returned result. If the angle between the two vectors is greater than or
            equal to the applied threshold, then the result is 0. If the two directions are equal (which means that the
            angle is 0), then the result is 1. This logic can be applied analogously for the other mapping types.
            </summary>
            <param name="mapping">Determines the type of the used mapping function.</param>
            <param name="structure">The <see cref="T:Polarith.AI.Move.Structure"/> to obtain the sensitivity and direction for.</param>
            <param name="direction">The direction which gets compared to the <see cref="F:Polarith.AI.Move.Structure.Direction"/>.</param>
            <param name="sensitivityOffset">Is added to the <see cref="F:Polarith.AI.Move.Structure.Sensitivity"/> as threshold.</param>
            <returns>The mapped value between 0 and 1.</returns>
            <exception cref="T:System.NullReferenceException">If <paramref name="structure"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Polarith.AI.Move.MoveBehaviour.MapBySensitivityPlane(Polarith.AI.Move.MappingType,Polarith.AI.Move.Structure,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>
            Maps (magnitude) values by sensitivity so that the <see cref="F:Polarith.AI.Move.Structure.Sensitivity"/> (plus the given
            <paramref name="sensitivityOffset"/>) is used as similarity threshold for the smallest angle between a plane
            defined by <paramref name="planeDirection1"/>, <paramref name="planeDirection2"/> and the <see
            cref="F:Polarith.AI.Move.Structure.Direction"/>.
            <para/>
            When <paramref name="mapping"/> is <see cref="F:Polarith.AI.Move.MappingType.InverseLinear"/>, then: the more similar the
            direction vectors, the greater the returned result. If the angle between the two vectors is greater than or
            equal to the applied threshold, then the result is 0. If the two directions are equal (which means that the
            angle is 0), then the result is 1. This logic can be applied analogously for the other mapping types.
            </summary>
            <param name="mapping">Determines the type of the used mapping function.</param>
            <param name="structure">The <see cref="T:Polarith.AI.Move.Structure"/> to obtain the sensitivity and direction for.</param>
            <param name="planeDirection1">The first vector defining the plane.</param>
            <param name="planeDirection2">The second vector defining the plane.</param>
            <param name="offset">An angular offset which manipulates the plane (in degrees).</param>
            <param name="sensitivityOffset">Is added to the <see cref="F:Polarith.AI.Move.Structure.Sensitivity"/> as threshold.</param>
            <returns>The mapped value between 0 and 1.</returns>
            <exception cref="T:System.NullReferenceException">If <paramref name="structure"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Polarith.AI.Move.MoveBehaviour.WriteValue(Polarith.AI.Move.ValueWritingType,System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>
            Writes objective values to the <see cref="P:Polarith.AI.Move.Context.Problem"/> as specified with <paramref
            name="valueWriting"/>.
            </summary>
            <param name="valueWriting">Specifies the operation for writing values.</param>
            <param name="objectiveIndex">Specifies the objective for writing.</param>
            <param name="valueIndex">Specifies the value index for writing.</param>
            <param name="value">The value to write.</param>
            <param name="intermediate">
            If <c>true</c>, the result is written in an intermediate <see cref="T:Polarith.AI.Criteria.IProblem`1"/> instance. This instance
            can be used to write the result of a single behaviour to the context. Otherwise, the results are applied
            directly.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no value at the specified <paramref name="objectiveIndex"/> and/or <paramref
            name="valueIndex"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.MoveBehaviour.BlendValues(Polarith.AI.Move.LayerBlendingType,System.Int32)">
            <summary>
            Writes the values of the <see cref="F:Polarith.AI.Move.MoveBehaviour.intermediate"/> to the actual <see cref="P:Polarith.AI.Move.Context.Problem"/>. The
            <paramref name="layerBlending"/> parameter defines the operation for combining the elements. If <paramref
            name="layerBlending"/> is <see cref="F:Polarith.AI.Move.LayerBlendingType.None"/>, then the method returns immediately.
            </summary>
            <param name="layerBlending">Specifies the operation for writing values.</param>
            <param name="objectiveIndex">Specifies the objective for writing values.</param>
        </member>
        <member name="T:Polarith.AI.Move.PerceptBehaviour`1">
            <summary>
            This class extends the <see cref="T:Polarith.AI.Move.MoveBehaviour"/> so that it is able to work with <see cref="T:Polarith.AI.Move.IPercept`1"/>
            instances which are relevant for the associated agent (back-end class). In addition, for derived classes, it
            requires the implementation of the <see cref="P:Polarith.AI.Move.PerceptBehaviour`1.Self"/> property.
            <para/>
            The percept data allows this behaviour to interact with the environment of the associated agent to fulfill its
            purpose. These data might come from an <see cref="T:Polarith.AI.Move.AIMFilter`1"/> instance (which obtains its data from an <see
            cref="T:Polarith.AI.Move.AIMPerceiver`1"/> and its associated <see cref="T:Polarith.AI.Move.AIMEnvironment"/>).
            <para/>
            A <see cref="T:Polarith.AI.Move.PerceptBehaviour`1"/> can be marked as thread-safe in its corresponding front-end class through
            setting <see cref="P:Polarith.AI.Move.AIMBehaviour.ThreadSafe"/> to <c>true</c>. If you do this, be sure not to use reference types
            of the Unity scripting API and not to make any possibly unsafe variable writes. If at least one behaviour is not
            marked <see cref="P:Polarith.AI.Move.AIMBehaviour.ThreadSafe"/>, the whole agent will not be part of the multithreading (Pro only).
            <para/>
            Base back-end class of every derived <see cref="T:Polarith.AI.Move.AIMPerceptBehaviour`1"/>.
            </summary>
            <typeparam name="T">Type of the processed percepts.</typeparam>
        </member>
        <member name="F:Polarith.AI.Move.PerceptBehaviour`1.Percepts">
            <summary>
            All percepts which are relevant for an agent.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.PerceptBehaviour`1.Self">
            <summary>
            The data of the associated agent itself.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.PlanarMappingType">
            <summary>
            This type determines the mapping of results (e.g., behaviour result) to a plane.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.PlanarMappingType.None">
            <summary>
            No mapping is used at all (e.g., general 3D).
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.PlanarMappingType.Automatic">
            <summary>
            The plane for the mapping is determined automatically.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.PlanarMappingType.PlaneXY">
            <summary>
            The XY-plane (e.g., 2D mode).
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.PlanarMappingType.PlaneXZ">
            <summary>
            The XZ-plane (e.g., 3D with ground).
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.PredictionType">
            <summary>
            Primarily used within <see cref="T:Polarith.AI.Move.SteeringBehaviour"/> instances to define which method is to be used for
            predicting the agent position.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.PredictionType.None">
            <summary>
            No prediction method is to be used.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.PredictionType.VelocityMagnitude">
            <summary>
            The actual magnitude of the movement velocity (which can also be a preset forward direction depending on
            <see cref="F:Polarith.AI.Move.SteeringBehaviour.PresetVelocity"/>) is used for predicting the future position.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.PredictionType.PredictionMagnitude">
            <summary>
            The movement velocity (which can also be a preset forward direction depending on <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.PresetVelocity"/>) is normalized and then scaled with the set <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.PredictionMagnitude"/> for predicting the future position.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.PresetVelocityType">
            <summary>
            Primarily used in <see cref="T:Polarith.AI.Move.AIMSteeringBehaviour"/> to determine the default forward direction of an agent. A
            suitable direction is dependent on your scenario. For example, a 2D scenario would probably require the <see
            cref="F:Polarith.AI.Move.PresetVelocityType.Up"/> vector as forward direction as against a 3D scenario would probably need the <see cref="F:Polarith.AI.Move.PresetVelocityType.Forward"/>
            vector instead.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.PresetVelocityType.None">
            <summary>
            Indicates that no preset velocity is used at all. Either the behaviour does not need this information or it
            has a valid velocity source, like a rigidbody or an <see cref="T:Polarith.AI.Move.AIMSteeringTag"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.PresetVelocityType.Automatic">
            <summary>
            Indicates that the system itself should detect which direction should be used. This decision is dependent on
            the <see cref="T:Polarith.AI.Move.Sensor"/> of the corresponding <see cref="T:Polarith.AI.Move.AIMContext"/>: <see cref="F:Polarith.AI.Move.PresetVelocityType.Up"/> for <see
            cref="F:Polarith.AI.Move.VectorProjectionType.PlaneXY"/> and <see cref="F:Polarith.AI.Move.PresetVelocityType.Forward"/> for <see
            cref="F:Polarith.AI.Move.VectorProjectionType.PlaneXZ"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.PresetVelocityType.Up">
            <summary>
            Sets <see cref="P:UnityEngine.Vector3.up"/> as the preset forward direction.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.PresetVelocityType.Down">
            <summary>
            Sets <see cref="P:UnityEngine.Vector3.down"/> as the preset forward direction.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.PresetVelocityType.Forward">
            <summary>
            Sets <see cref="P:UnityEngine.Vector3.forward"/> as the preset forward direction.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.PresetVelocityType.Back">
            <summary>
            Sets <see cref="P:UnityEngine.Vector3.back"/> as the preset forward direction.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.PresetVelocityType.Left">
            <summary>
            Sets <see cref="P:UnityEngine.Vector3.left"/> as the preset forward direction.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.PresetVelocityType.Right">
            <summary>
            Sets <see cref="P:UnityEngine.Vector3.right"/> as the preset forward direction.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.PlanarConvolution">
            <summary>
            <see cref="T:Polarith.AI.Move.PlanarConvolution"/> modifies an objective value based on its neighbours (back-end class). It
            provides the possibility to modify a <see cref="T:Polarith.AI.Criteria.Problem`1.Objective"/> with a convolution matrix named <see
            cref="F:Polarith.AI.Move.PlanarConvolution.kernel"/>. This might be required in order to smooth the <see cref="T:Polarith.AI.Criteria.Problem`1.Objective"/>, for example,
            with a <see cref="T:Polarith.AI.Move.PlanarConvolution.GaussianKernel"/>.
            <para/>
            In its concrete implementation of <see cref="M:Polarith.AI.Move.PlanarConvolution.Behave"/>, the objective values are modified by weighting its
            neighbours. In contrast to the <see cref="T:Polarith.AI.Move.SteeringBehaviour"/>, you can modify more than one <see
            cref="T:Polarith.AI.Criteria.Problem`1.Objective"/> in order to avoid an unnecessary extra <see cref="T:UnityEngine.Component"/>. For that, a <see
            cref="T:System.Collections.Generic.List`1"/> of type <see cref="T:System.Int32"/> can be set. Its entries correspond to the desired target objectives
            in <see cref="T:Polarith.AI.Move.Context"/>. Note, you must pay attention to the size of the kernel if you set it directly. The
            kernel size must be odd and greater than two. Optionally, a 'Gaussian' kernel can be computed with <see
            cref="M:Polarith.AI.Move.PlanarConvolution.ComputeGaussianKernel(System.Int32,System.Single)"/>.
            <para/>
            Back-end class of <see cref="T:Polarith.AI.Move.AIMPlanarConvolution"/>. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.PlanarConvolution.TargetObjectives">
            <summary>
            The entries of this list determines the <see cref="T:Polarith.AI.Criteria.Problem`1.Objective"/> instances in <see
            cref="T:Polarith.AI.Move.Context"/> which are modified.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.PlanarConvolution.Kernel">
            <summary>
            Represents a discrete kernel.
            <para/>
            Note, through getting, a new list is allocated in order to protect the <see cref="M:Polarith.AI.Move.PlanarConvolution.Behave"/> method of
            exceptions. Through setting, the new kernel must be at least greater than 2 and odd. Otherwise, <see
            cref="F:Polarith.AI.Move.PlanarConvolution.kernel"/> is not set.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.PlanarConvolution.Behave">
            <summary>
            This method executes the main algorithm of this behaviour and is called within <see
            cref="M:Polarith.AI.Move.Context.Evaluate"/> in order to set/modify objective values for the associated <see
            cref="P:Polarith.AI.Move.Context.Problem"/>.
            </summary>
            <exception cref="T:System.NullReferenceException">
            If the inherited <see cref="F:Polarith.AI.Move.MoveBehaviour.Context"/> or its associated <see cref="P:Polarith.AI.Move.Context.Problem"/>
            respectively <see cref="P:Polarith.AI.Criteria.Context`2.Sensor"/> are <c>null</c>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.PlanarConvolution.ComputeGaussianKernel(System.Int32,System.Single)">
            <summary>
            This method computes a 'Gaussian' kernel. A 'Gaussian' kernel is normally used in order to smooth values
            based on its neighbours. For more details, see https://en.wikipedia.org/wiki/Gaussian_function.
            </summary>
            <param name="kernelSize">Determines the width of the used 'Gaussian' filter kernel.</param>
            <param name="sigma">
            Determines the standard deviation of the 'Gaussian' distribution (bell curve). The width of the bell curve
            increases for a higher standard deviation values.
            </param>
        </member>
        <member name="T:Polarith.AI.Move.Retention">
            <summary>
            <see cref="T:Polarith.AI.Move.Retention"/> is used to remember objective values for multiple frames (back-end class). How long
            values are being remembered can be controlled through the <see cref="F:Polarith.AI.Move.Retention.Memory"/> parameter. When an agent
            remembers the data of its last decisions, the time-dependent coherence increases, and thus, the transition
            between consecutive decisions appears to be smoother. Note, too high values for the <see cref="F:Polarith.AI.Move.Retention.Memory"/>
            parameter will lead to sluggish agents which cannot react properly to certain situations any longer.
            <para/>
            Back-end class of <see cref="T:Polarith.AI.Move.AIMRetention"/>. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Retention.TargetObjectives">
            <summary>
            Specifies all the objectives which are influenced by this behaviour.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Retention.Memory">
            <summary>
            Determines how long old objective values are being remembered in future AI updates. The higher this value,
            the longer it takes for new sampled values to occur within the problem objectives.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Retention.Behave">
            <summary>
            Processes the algorithms of this class writing/modifying objective values.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.PlanarInterpolation">
            <summary>
            <see cref="T:Polarith.AI.Move.PlanarInterpolation"/> finds the interpolation parameter for a possible better solution located
            between two receptors (back-end class). Thus, it is executed after the <see cref="T:Polarith.AI.Move.Context"/> has found a
            solution which was already written to the <see cref="F:Polarith.AI.Move.PlanarInterpolation.decision"/>. A possible better solution is found by solving
            a linear equation consisting of the <see cref="F:Polarith.AI.Move.PlanarInterpolation.TargetObjective"/> values. If a better solution can be found and
            is valid to use, the values for the other objectives are interpolated based on the already found interpolation
            parameter. The new index and the updated objective values are written back to the <see cref="F:Polarith.AI.Move.PlanarInterpolation.decision"/>.
            <para/>
            This behaviour is only applicable for planar sensor configurations, since it assumes that every receptor has got
            a maximum of 2 neighbours (left and right).
            <para/>
            Back-end class of <see cref="T:Polarith.AI.Move.AIMPlanarInterpolation"/>. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.PlanarInterpolation.TargetObjective">
            <summary>
            To find a better solution, this behaviour will solve a linear equation based on the <see
            cref="F:Polarith.AI.Move.PlanarInterpolation.TargetObjective"/> values. This parameter determines which objective is used for this calculation.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.PlanarInterpolation.Constraint">
            <summary>
            It is possible that a better solution with respect to the <see cref="F:Polarith.AI.Move.PlanarInterpolation.TargetObjective"/> violates a
            constraint of another objective.
            <para/>
            If <c>true</c>, this behaviour rejects solutions which violate the constraints of other objectives. If
            <c>false</c>, the constraints are ignored.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.PlanarInterpolation.#ctor">
            <summary>
            Creates a new <see cref="T:Polarith.AI.Move.PlanarInterpolation"/> instance.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.PlanarInterpolation.Behave">
            <summary>
            This method executes the main algorithm of this behaviour and is called within <see
            cref="M:Polarith.AI.Move.Context.Evaluate"/> in order to set/modify objective values for the associated <see
            cref="P:Polarith.AI.Move.Context.Problem"/>.
            </summary>
            <exception cref="T:System.NullReferenceException">
            If the inherited <see cref="F:Polarith.AI.Move.MoveBehaviour.Context"/> or its associated <see cref="P:Polarith.AI.Move.Context.Problem"/>
            respectively <see cref="P:Polarith.AI.Criteria.Context`2.Sensor"/> are <c>null</c>.
            </exception>
        </member>
        <member name="T:Polarith.AI.Move.Reduction">
            <summary>
            <see cref="T:Polarith.AI.Move.Reduction"/> is intended to reduce the magnitudes of the <see cref="F:Polarith.AI.Move.Reduction.TargetObjective"/> under certain
            conditions (back-end class). It extends <see cref="T:Polarith.AI.Move.PerceptBehaviour`1"/>. This might be used to reduce the
            velocity of a character when it gets close to its target or to a possible obstacle. The reduction conditions are
            given by the proximity to the current percept and the angle between the movement direction of the agent and the
            direction towards the percept. The balance between these two conditions can be controlled with the <see
            cref="F:Polarith.AI.Move.Reduction.AngleWeight"/> parameter.
            <para/>
            In order to make this behaviour work, the <see cref="F:Polarith.AI.Move.Reduction.ValueWriting"/> should be set to <see
            cref="F:Polarith.AI.Move.ValueWritingType.AssignLesser"/> or <see cref="F:Polarith.AI.Move.ValueWritingType.Multiplication"/>. Other configurations
            might also be possible, however, they will lead to different and maybe unexpected results.
            <para/>
            Back-end class of <see cref="T:Polarith.AI.Move.AIMReduction"/>. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Reduction.ValueWriting">
            <summary>
            Sets the type for writing objective values.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Reduction.UseSensorProjection">
            <summary>
            If <c>true</c>, <see cref="P:Polarith.AI.Move.Sensor.ProjectionMode"/> is used as <see cref="F:Polarith.AI.Move.Reduction.VectorProjection"/>. Otherwise,
            the <see cref="F:Polarith.AI.Move.Reduction.VectorProjection"/> is used as configured.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Reduction.VectorProjection">
            <summary>
            Sets the type for projecting the perceived vector data into a plane.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Reduction.DistanceMapping">
            <summary>
            Determines how the resulting magnitude is mapped according to the set <see cref="F:Polarith.AI.Move.Reduction.MaxDistance"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Reduction.TargetObjective">
            <summary>
            Defines the objective for writing values.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Reduction.MagnitudeMultiplier">
            <summary>
            Is multiplied to the resulting magnitude.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Reduction.MaxDistance">
            <summary>
            The maximum radius for considering percepts. If a percept lies above this threshold, it is ignored by this
            behaviour.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Reduction.MinMagnitude">
            <summary>
            This value is added to the final result.
            <para/>
            It functions as the lower bound for the resulting magnitude. If the character controller is dependent on the
            decision magnitude, this can be used to avoid deadlocks.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Reduction.AngleWeight">
            <summary>
            This parameter determines how the two conditions are combined which influence the result of this behaviour.
            The first condition is the proximity to the current percept. Second, the angle between an agent's movement
            direction and the direction towards the current percept. This parameter determines how these two conditions
            are combined. If <see cref="F:Polarith.AI.Move.Reduction.AngleWeight"/> is 0, only the proximity is considered. If <see
            cref="F:Polarith.AI.Move.Reduction.AngleWeight"/> is 1, only the angle is considered.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Reduction.UsePresetVelocity">
            <summary>
            If <c>true</c>, a game object's rotation and <see cref="F:Polarith.AI.Move.Reduction.PresetVelocity"/> direction is used to approximate
            its actual velocity. This is especially useful for velocity-dependent behaviours like <see cref="T:Polarith.AI.Move.AIMAvoid"/>
            and if no other sources for a valid velocity vector can be provided. Moreover, such preset forward direction
            has the advantage to be more stable in contrast to other possible velocity sources.
            <para/>
            Other valid sources for obtaining a movement velocity are the <see cref="F:Polarith.AI.Move.AIMSteeringTag.TrackVelocity"/>
            option or to make use of a <see cref="T:UnityEngine.Rigidbody"/> respectively a <see cref="T:UnityEngine.Rigidbody2D"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Reduction.PresetVelocity">
            <summary>
            Specifies the forward direction the agent moves towards and/or looks at by default.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Reduction.Prediction">
            <summary>
            If set to anything other than <see cref="F:Polarith.AI.Move.PredictionType.None"/>, the position of the <see cref="P:Polarith.AI.Move.Reduction.Self"/>
            percept is updated according to the given velocity. Hence, for the behaviour, it is possible to predict and
            use the future position of an agent.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Reduction.PredictionMagnitude">
            <summary>
            Scales the velocity vector used for predicting the possible future position of an agent if <see
            cref="F:Polarith.AI.Move.Reduction.Prediction"/> is set to <see cref="F:Polarith.AI.Move.PredictionType.PredictionMagnitude"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Reduction.velocity">
            <summary>
            The forward direction the agent moves towards and/or looks at by default.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Reduction.Self">
            <summary>
            The data of the associated agent itself.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Reduction.Behave">
            <summary>
            This method executes the main algorithm of this behaviour and is called within <see
            cref="M:Polarith.AI.Move.Context.Evaluate"/> in order to set/modify objective values for the associated <see
            cref="P:Polarith.AI.Move.Context.Problem"/>. It projects vector data as specified with <see cref="F:Polarith.AI.Move.Reduction.VectorProjection"/> and
            finally obtain/write objective values based on the set <see cref="F:Polarith.AI.Move.Reduction.DistanceMapping"/> and <see
            cref="F:Polarith.AI.Move.Reduction.ValueWriting"/>.
            </summary>
            <exception cref="T:System.NullReferenceException">
            If the inherited <see cref="F:Polarith.AI.Move.MoveBehaviour.Context"/> or its associated <see cref="P:Polarith.AI.Move.Context.Problem"/>
            respectively <see cref="P:Polarith.AI.Criteria.Context`2.Sensor"/> are <c>null</c>.
            </exception>
        </member>
        <member name="T:Polarith.AI.Move.Stabilization">
            <summary>
            <see cref="T:Polarith.AI.Move.Stabilization"/> increases the objective values along the (local) <see
            cref="F:Polarith.AI.Move.Context.DecidedDirection"/> (back-end class). This is useful in order to ensure that the agent retains its
            current direction. This might be helpful in situations where the (local) <see cref="F:Polarith.AI.Move.Context.DecidedDirection"/>
            varies widely from frame to frame. For that, a value around <see cref="F:Polarith.AI.Move.Stabilization.MaxIncrease"/> is added to those
            objective values whose receptors' <see cref="F:Polarith.AI.Move.Structure.Direction"/> matches more or less with the (local) <see
            cref="F:Polarith.AI.Move.Context.DecidedDirection"/>.
            <para/>
            The default parametrization of this class increases the objective values along the computed direction by a value
            of 0.3. All receptors where the <see cref="F:Polarith.AI.Move.Structure.Direction"/> differs more than 45 degrees from the movement
            direction are ignored.
            <para/>
            Back-end class of <see cref="T:Polarith.AI.Move.AIMStabilization"/>. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Stabilization.TargetObjective">
            <summary>
            Defines the objective for writing values.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Stabilization.AngleMapping">
            <summary>
            Sets the mapping type for obtaining objective values.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Stabilization.MaxIncrease">
            <summary>
            Determines the maximum possible addition.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Stabilization.MaxAngle">
            <summary>
            Determines the maximum possible deviation in degrees of the (local) <see cref="F:Polarith.AI.Move.Context.DecidedDirection"/>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Stabilization.Self">
            <summary>
            The data of the associated agent itself.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Stabilization.Behave">
            <summary>
            This method executes the main algorithm of this behaviour and is called within <see
            cref="M:Polarith.AI.Move.Context.Evaluate"/> in order to set/modify objective values for the associated <see
            cref="P:Polarith.AI.Move.Context.Problem"/>.
            </summary>
            <exception cref="T:System.NullReferenceException">
            If the inherited <see cref="F:Polarith.AI.Move.MoveBehaviour.Context"/> or its associated <see cref="P:Polarith.AI.Move.Context.Problem"/>
            respectively <see cref="P:Polarith.AI.Criteria.Context`2.Sensor"/> are <c>null</c>.
            </exception>
        </member>
        <member name="T:Polarith.AI.Move.Adjust">
            <summary>
            <see cref="T:Polarith.AI.Move.Adjust"/> fits an agent's orientation with those of its neighbours (back-end class). This might be
            useful in swarming behaviours. The orientation for each percept is obtained by considering the <see
            cref="P:UnityEngine.Transform.rotation"/> and the forward vector of the agent. Note, the weighting of the orientations is
            applied only if <see cref="T:Polarith.AI.Move.ValueWritingType"/> is set to <see cref="F:Polarith.AI.Move.ValueWritingType.Addition"/>.
            Hint: you might use a third objective in order to restrict the orientation of the agent.
            <para/>
            Back-end class of <see cref="T:Polarith.AI.Move.AIMAdjust"/>. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Adjust.forEachPercept">
            <summary>
            Determines if <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> is called within <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> (read only). Returns always <c>false</c> because all the work is done
            within <see cref="M:Polarith.AI.Move.SteeringBehaviour.StartSteering"/>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Adjust.forEachReceptor">
            <summary>
            Determines if <see cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/> is called within <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> (read only). Returns always <c>false</c> because all the work is done
            within <see cref="M:Polarith.AI.Move.SteeringBehaviour.StartSteering"/>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Adjust.StartSteering">
            <summary>
            In addition to the filter process for each percept in <see cref="M:Polarith.AI.Move.RadiusSteeringBehaviour.StartSteering"/>,
            the <see cref="F:Polarith.AI.Move.SteeringBehaviour.ResultDirection"/> is obtained through the multiplication of <see
            cref="F:Polarith.AI.Move.SteeringPercept.Rotation"/> with the forward vector of the agent.
            <para/>
            Note, the forward vector depends on <see cref="T:Polarith.AI.Move.VectorProjectionType"/>. If <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.VectorProjection"/> is <see cref="F:Polarith.AI.Move.VectorProjectionType.PlaneXY"/>, then it is <see
            cref="P:UnityEngine.Vector3.up"/>, <see cref="P:UnityEngine.Vector3.forward"/> otherwise.
            </summary>
            <returns>
            <c>true</c>: if the percept lies in between the <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.InnerRadius"/> and <see
            cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.OuterRadius"/>, <c>false</c>: otherwise.
            </returns>
        </member>
        <member name="T:Polarith.AI.Move.Align">
            <summary>
            <see cref="T:Polarith.AI.Move.Align"/> fits an agent's orientation to the orientation of one target percept (back-end class). It
            functions analogously to the usual steering behaviour 'Alignment'. Therefore, <see cref="F:Polarith.AI.Move.AIMAlign.Target"/> is
            used. The orientation of the target percept is obtained using the <see cref="P:UnityEngine.Transform.rotation"/> and the
            forward vector of the agent. The <see cref="F:Polarith.AI.Move.SteeringBehaviour.ResultMagnitude"/> is always one. In order to
            weight the objective values with other steering behaviours, you might use <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.MagnitudeMultiplier"/>. Note, the behaviour concentrates only on one target at a time.
            <para/>
            Back-end class of <see cref="T:Polarith.AI.Move.AIMAlign"/>. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Align.forEachPercept">
            <summary>
            Determines if <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> is called within <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> (read only). Returns always <c>false</c> because all the work is done
            within <see cref="M:Polarith.AI.Move.SteeringBehaviour.StartSteering"/>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Align.forEachReceptor">
            <summary>
            Determines if <see cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/> is called within <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> (read only). Returns always <c>false</c> because all the work is done
            within <see cref="M:Polarith.AI.Move.SteeringBehaviour.StartSteering"/>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Align.StartSteering">
            <summary>
            The <see cref="F:Polarith.AI.Move.SteeringBehaviour.ResultDirection"/> is obtained by the multiplication of <see
            cref="F:Polarith.AI.Move.SteeringPercept.Rotation"/> with the forward vector of the agent.
            <para/>
            Note, the forward vector depends on <see cref="T:Polarith.AI.Move.VectorProjectionType"/>. If <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.VectorProjection"/> is <see cref="F:Polarith.AI.Move.VectorProjectionType.PlaneXY"/>, it is <see
            cref="P:UnityEngine.Vector3.up"/>, <see cref="P:UnityEngine.Vector3.forward"/> otherwise.
            </summary>
            <returns>
            Always <c>true</c> because only one percept is considered independent with respect to its location relative
            to the agent.
            </returns>
        </member>
        <member name="T:Polarith.AI.Move.Arrive">
            <summary>
            <see cref="T:Polarith.AI.Move.Arrive"/> is used in order to modify the velocity of an agent if it reaches a target (back-end
            class). It functions analogously to the usual steering behaviour 'Arrive'. The procedure is activated if the
            agent is within the <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.OuterRadius"/> and <see
            cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.InnerRadius"/>, otherwise, the velocity is constant. The normal use of this
            behaviour would be to reduce the velocity but it can also be used to increase it. The velocity modification is
            reached by multiplication of <see cref="F:Polarith.AI.Move.SteeringBehaviour.ResultMagnitude"/> with the velocity, like in <see
            cref="M:Polarith.AI.Move.AIMSimpleController2D.Update"/>. Be sure that you use <see cref="P:Polarith.AI.Move.AIMContext.DecidedValues"/> and not to
            use the <see cref="P:Polarith.AI.Move.AIMContext.DecidedDirection"/> in order to modify the velocity if you use one of our
            controllers or your own.
            <para/>
            Note, the default mapping maps a value between the two radii. If you want to add you own mapping, inherit from
            <see cref="T:Polarith.AI.Move.Arrive"/> and implement <see cref="M:Polarith.AI.Move.SteeringBehaviour.StartSteering"/>. The <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.ResultDirection"/> is the direction to the <see cref="F:Polarith.AI.Move.AIMArrive.Target"/> and the <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.ResultMagnitude"/> is used as a multiplier for the velocity. Furthermore, the behaviour
            concentrates only on one target at a time.
            <para/>
            Back-end class of <see cref="T:Polarith.AI.Move.AIMArrive"/>. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Arrive.BaseMagnitude">
            <summary>
            The default multiplier for the velocity if the agent is outside of the radii interval.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Arrive.forEachPercept">
            <summary>
            Determines if <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> is called within <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> (read only). Returns always <c>false</c> because all the work is done
            within <see cref="M:Polarith.AI.Move.SteeringBehaviour.StartSteering"/>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Arrive.forEachReceptor">
            <summary>
            Determines if <see cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/> is called within <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> (read only). Returns always <c>false</c> because all the work is done
            within <see cref="M:Polarith.AI.Move.SteeringBehaviour.StartSteering"/>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Arrive.StartSteering">
            <summary>
            The <see cref="F:Polarith.AI.Move.SteeringBehaviour.ResultDirection"/> is the direction to the desired <see
            cref="F:Polarith.AI.Move.AIMArrive.Target"/>. The <see cref="F:Polarith.AI.Move.SteeringBehaviour.ResultMagnitude"/> is obtained by mapping the
            current position of the agent to the two given radii.
            <para/>
            Note, with an inverse <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.RadiusMapping"/> the following holds true: the
            closer the agent is to the target, the greater the velocity increases.
            </summary>
            <returns>Returns always <c>true</c>.</returns>
        </member>
        <member name="T:Polarith.AI.Move.Avoid">
            <summary>
            Active avoidance behaviour (back-end class). Objective magnitudes are generated based on a plane perpendicular
            towards percepts such that the agent prefers directions which can guide it around the object (instead of simply
            going away from the obstacle, like with <see cref="T:Polarith.AI.Move.Flee"/>). The behaviour calculates the plane as described and
            populates context values using <see cref="M:Polarith.AI.Move.MoveBehaviour.MapBySensitivityPlane(Polarith.AI.Move.MappingType,Polarith.AI.Move.Structure,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)"/>. By setting <see cref="F:Polarith.AI.Move.Avoid.UseVelocity"/> to <c>true</c>, the behaviour prefers solutions
            which are along the movement direction. In addition, the <see cref="F:Polarith.AI.Move.Avoid.PlaneBend"/> can be used to manipulate how
            the agent avoids an obstacle.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Avoid.PlaneBend">
            <summary>
            An angular offset for the plane which is used to write objective values to the context. This parameter can
            be used to manipulate how the agent avoids the object. If this value is 0, the plane remains perpendicular
            towards the current percept. If this value is greater than 0, the plane is 'bend' towards the direction of
            the current percept.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Avoid.UseVelocity">
            <summary>
            Can be used to optimize the resulting objective values. If <c>true</c>, the current velocity of the agent is
            used as forward direction. The forward direction is then used to prefer receptors facing both this direction
            and the plane perpendicular to the percept direction.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Avoid.DefaultOrientation">
            <summary>
            Is used instead of the agent's velocity if <see cref="F:Polarith.AI.Move.Avoid.UseVelocity"/> is <c>false</c>. The <see
            cref="F:Polarith.AI.Move.Avoid.DefaultOrientation"/> is used to determine the agent's alignment by applying the agent's rotation to
            this direction. The most common scenarios are <see cref="P:UnityEngine.Vector3.up"/> for 2D games (agent on xy-plane) and
            <see cref="P:UnityEngine.Vector3.forward"/> for most 3D games (agent on xz-plane).
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Avoid.planeDirection1">
            <summary>
            The first direction vector defining the plane of the current percept. It must be guaranteed that both <see
            cref="F:Polarith.AI.Move.Avoid.planeDirection1"/> and <see cref="F:Polarith.AI.Move.Avoid.planeDirection2"/> are normalized and that they are neither parallel
            nor zero.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Avoid.planeDirection2">
            <summary>
            The second direction vector defining the plane of the current percept. It must be guaranteed that both <see
            cref="F:Polarith.AI.Move.Avoid.planeDirection1"/> and <see cref="F:Polarith.AI.Move.Avoid.planeDirection2"/> are normalized and that they are neither parallel
            nor zero.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Avoid.PlaneDirection1">
            <summary>
            A normalized vector defining the first direction of the current plane (read only). This is the direction of
            the plane of the last updated percept.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Avoid.PlaneDirection2">
            <summary>
            A normalized vector defining the second direction of the current plane (read only). This is the direction of
            the plane of the last updated percept.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Avoid.forEachPercept">
            <summary>
            Determines if <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> is called within <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> (read only). Returns always <c>false</c> because all the work is done
            within <see cref="M:Polarith.AI.Move.SteeringBehaviour.StartSteering"/>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Avoid.forEachReceptor">
            <summary>
            Determines if <see cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/> is called within <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> (read only). Returns always <c>false</c> because all the work is done
            within <see cref="M:Polarith.AI.Move.SteeringBehaviour.StartSteering"/>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Avoid.StartSteering">
            <summary>
            Determines a plane perpendicular towards the current percept and populates the context map using a
            plane-based sensitivity mapping. First, <see cref="M:Polarith.AI.Move.Avoid.IsPerceptSignificant"/> is called to get the start
            magnitude and reject percepts if they are out of range (see <see
            cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.InnerRadius"/> and <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.OuterRadius"/>). Then,
            the perpendicular plane towards the percept is calculated. Then, this plane is used to write magnitude
            values per receptor using <see cref="M:Polarith.AI.Move.MoveBehaviour.MapBySensitivityPlane(Polarith.AI.Move.MappingType,Polarith.AI.Move.Structure,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)"/>.
            <para/>
            Since no further calculations are necessary, this method always returns <c>false</c>.
            </summary>
            <returns>
            Always returns <c>false</c> to avoid unnecessary calculations in <see cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/>.
            </returns>
        </member>
        <member name="M:Polarith.AI.Move.Avoid.IsPerceptSignificant">
            <summary>
            As the first called method in <see cref="M:Polarith.AI.Move.Avoid.StartSteering"/>, it rejects percepts if they are too far away
            avoiding unnecessary calculations (similar to <see cref="M:Polarith.AI.Move.RadiusSteeringBehaviour.StartSteering"/>). Might be
            overridden to change the definition which determines the significance of a percept.
            </summary>
            <returns><c>true</c> if the percept is in range, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Polarith.AI.Move.Avoid.CalculatePlane">
            <summary>
            Calculates the plane which is used for the sensitivity mapping (see <see
            cref="M:Polarith.AI.Move.MoveBehaviour.MapBySensitivityPlane(Polarith.AI.Move.MappingType,Polarith.AI.Move.Structure,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)"/>). In
            order to define the plane, the two vectors <see cref="F:Polarith.AI.Move.Avoid.planeDirection1"/> and <see cref="F:Polarith.AI.Move.Avoid.planeDirection2"/>
            are set accordingly, whereby it must be ensured that these two plane spanning vectors are normalized.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.PlanarAvoid">
            <summary>
            <see cref="T:Polarith.AI.Move.PlanarAvoid"/> is intended to simply avoid obstacles based on their center positions (back-end
            class). It extends the <see cref="T:Polarith.AI.Move.RadiusSteeringBehaviour"/>. To calculate an appropriate avoidance direction, a
            combination of the dot product of the percept direction and the avoidance direction (given by the <see
            cref="F:Polarith.AI.Move.PlanarAvoid.AvoidanceAngle"/>) is used. This behaviour is a planar behaviour, and hence, works only with planar
            sensors. Thus, there are only 2 avoidance directions calculated, 'left' and 'right', relative to the agents
            movement direction (the normalized <see cref="F:Polarith.AI.Move.SteeringPercept.Velocity"/> of the self percept is considered as
            the movement direction).
            <para/>
            Back-end class of <see cref="T:Polarith.AI.Move.AIMPlanarAvoid"/>. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.PlanarAvoid.AvoidanceAngle">
            <summary>
            Influences the preferred avoidance direction relative to an agent's movement direction.
            <para/>
            The agent will get interest into both left and right according to its movement direction with respect to the
            <see cref="F:Polarith.AI.Move.PlanarAvoid.AvoidanceAngle"/> in degrees based on how much these directions are facing towards the processed
            percept.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.PlanarAvoid.Up">
            <summary>
            The direction which is used to rotate the forward direction about the specified <see
            cref="F:Polarith.AI.Move.PlanarAvoid.AvoidanceAngle"/>.
            <para/>
            This vector must be perpendicular to an agent's forward direction, e.g., if the agent moves in the
            x/y-plane, this vector needs always to be (0, 0, 1).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.PlanarAvoid.forEachPercept">
            <summary>
            Determines if <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> is called within <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> (read only). Returns always <c>true</c>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.PlanarAvoid.forEachReceptor">
            <summary>
            Determines if <see cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/> is called within <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> (read only). Returns always <c>false</c>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.PlanarAvoid.PerceptSteering">
            <summary>
            Processes the steering algorithm for each percept using the same data for each processed receptor.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.RadiusSteeringBehaviour">
            <summary>
            This class extends the <see cref="T:Polarith.AI.Move.SteeringBehaviour"/> through adding a kind of local perception model based on
            an <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.InnerRadius"/> and <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.OuterRadius"/> (back-end class). Only the percepts lying between
            these radii are important for an agent. If this is not the case, <see cref="M:Polarith.AI.Move.RadiusSteeringBehaviour.StartSteering"/> returns
            <c>false</c> and the percept is skipped. This improves performance because the computation-heavy parts of the
            inherited <see cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> are skipped, too. All derived <see
            cref="T:Polarith.AI.Move.RadiusSteeringBehaviour"/> classes are intended to map the inherited <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.ResultMagnitude"/> accordingly to the position of the processed percept relative to the
            those two radii. The function for this mapping can be controlled via <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.RadiusMapping"/>.
            <para/>
            Every derived <see cref="T:Polarith.AI.Move.RadiusSteeringBehaviour"/> needs to implement the properties <see
            cref="P:Polarith.AI.Move.SteeringBehaviour.forEachPercept"/> and <see cref="P:Polarith.AI.Move.SteeringBehaviour.forEachReceptor"/> to determine if
            the corresponding methods <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> and <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/> are called within <see cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/>. Usually,
            you might only want either <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> or <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/> to be called at once.
            <para/>
            Besides the inherited references for quick data access of the <see cref="T:Polarith.AI.Move.SteeringBehaviour"/> class, this class
            defines the following references for quick access to be used within the <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> and <see cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/> implementation
            in derived classes: <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.startDirection"/>, <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.startMagnitude"/>, <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.sqrInnerRadius"/> and
            <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.sqrOuterRadius"/>.
            <para/>
            A <see cref="T:Polarith.AI.Move.RadiusSteeringBehaviour"/> can be marked as thread-safe in its corresponding front-end class
            through setting <see cref="P:Polarith.AI.Move.AIMBehaviour.ThreadSafe"/> to <c>true</c>. If you do this, be sure not to use
            reference types of the Unity scripting API and not to make any possibly unsafe variable writes. If at least one
            behaviour is not marked <see cref="P:Polarith.AI.Move.AIMBehaviour.ThreadSafe"/>, the whole agent will not be part of the
            multithreading (Pro only).
            <para/>
            Base back-end class of every derived <see cref="T:Polarith.AI.Move.AIMRadiusSteeringBehaviour"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.RadiusSteeringBehaviour.InnerRadius">
            <summary>
            The minimum radius for considering percepts. If a percept lies below this threshold, it is ignored by this
            behaviour.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.RadiusSteeringBehaviour.OuterRadius">
            <summary>
            The maximum radius for considering percepts. If a percept lies above this threshold, it is ignored by this
            behaviour.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.RadiusSteeringBehaviour.RadiusMapping">
            <summary>
            Determines how the <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.startMagnitude"/> is mapped according to the <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.InnerRadius"/> and
            <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.OuterRadius"/>. The <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.startMagnitude"/> might be used to compute the <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.ResultMagnitude"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.RadiusSteeringBehaviour.startDirection">
            <summary>
            Direction from the self position to the percept position (including distance magnitude).
            <para/>
            Might be used in <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> and <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.RadiusSteeringBehaviour.startMagnitude">
            <summary>
            Magnitude obtained from mapping the percept position relative to <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.InnerRadius"/> and <see
            cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.OuterRadius"/>.
            <para/>
            Might be used in <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> and <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.RadiusSteeringBehaviour.sqrInnerRadius">
            <summary>
            Squared <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.InnerRadius"/>.
            <para/>
            Might be used in <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> and <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.RadiusSteeringBehaviour.sqrOuterRadius">
            <summary>
            Squared <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.OuterRadius"/>.
            <para/>
            Might be used in <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> and <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.RadiusSteeringBehaviour.StartSteering">
            <summary>
            Sets the <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.startDirection"/> and <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.startMagnitude"/> accordingly to the position of the
            processed percept relative to the <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.InnerRadius"/> and <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.OuterRadius"/> of this behaviour.
            In addition, it computes and pre-caches <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.sqrInnerRadius"/> and <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.sqrOuterRadius"/>.
            <para/>
            All these pre-cached values might be accessed within <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> and
            <see cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/> for derived classes in order to ease further computations.
            </summary>
            <returns>
            <c>true</c>: if the percept lies in between the <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.InnerRadius"/> and <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.OuterRadius"/>,
            <c>false</c>: otherwise.
            </returns>
        </member>
        <member name="T:Polarith.AI.Move.SteeringBehaviour">
            <summary>
            <see cref="T:Polarith.AI.Move.SteeringBehaviour"/> provides the base functionality for writing and mapping objective values
            (back-end class). This derived <see cref="T:Polarith.AI.Move.PerceptBehaviour`1"/> is the very foundation for all context steering
            algorithms. The objective values are written into an associated <see cref="P:Polarith.AI.Move.Context.Problem"/> which is evaluated
            in <see cref="M:Polarith.AI.Move.Context.Evaluate"/> based on the inherited <see cref="F:Polarith.AI.Move.PerceptBehaviour`1.Percepts"/> and <see
            cref="P:Polarith.AI.Move.PerceptBehaviour`1.Self"/>. In order to obtain and write objective values, the three methods <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.StartSteering"/>, <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> and <see cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/> are used for setting up
            an appropriate <see cref="F:Polarith.AI.Move.SteeringBehaviour.ResultDirection"/> and <see cref="F:Polarith.AI.Move.SteeringBehaviour.ResultMagnitude"/>, whereby the switches <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.ValueMapping"/> and <see cref="F:Polarith.AI.Move.SteeringBehaviour.ValueWriting"/> determine how objective values are written. In addition,
            with the help of <see cref="F:Polarith.AI.Move.SteeringBehaviour.VectorProjection"/> it is possible to project the perceived vector data which are
            necessary for obtaining objective values into a specified plane. This might be useful, for example, when there
            is a (virtual) ground and height map in the world, so this is always the case when the scene objects differ
            significantly in height.
            <para/>
            Every derived <see cref="T:Polarith.AI.Move.SteeringBehaviour"/> needs to implement the properties <see cref="P:Polarith.AI.Move.SteeringBehaviour.forEachPercept"/> and
            <see cref="P:Polarith.AI.Move.SteeringBehaviour.forEachReceptor"/> to determine if the corresponding methods <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> and <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/> are called within <see cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/>. Usually, you might only want either <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> or <see cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/> to be called at once.
            <para/>
            A <see cref="T:Polarith.AI.Move.SteeringBehaviour"/> can be marked as thread-safe in its corresponding front-end class through
            setting <see cref="P:Polarith.AI.Move.AIMBehaviour.ThreadSafe"/> to <c>true</c>. If you do this, be sure not to use reference types
            of the Unity scripting API and not to make any possibly unsafe variable writes. If at least one behaviour is not
            marked <see cref="P:Polarith.AI.Move.AIMBehaviour.ThreadSafe"/>, the whole agent will not be part of the multithreading (Pro only).
            <para/>
            Base back-end class of every derived <see cref="T:Polarith.AI.Move.AIMSteeringBehaviour"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringBehaviour.ResultDirection">
            <summary>
            The direction vector used for obtaining objective values. It gets compared to the direction vectors of every
            sensor receptor in order to determine the resulting objective value.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringBehaviour.ResultMagnitude">
            <summary>
            The magnitude value used for obtaining objective values. It is used as weight when comparing the <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.ResultDirection"/> to receptor directions.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringBehaviour.TargetObjective">
            <summary>
            Defines the objective for writing values.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringBehaviour.MagnitudeMultiplier">
            <summary>
            Is multiplied to the <see cref="F:Polarith.AI.Move.SteeringBehaviour.ResultMagnitude"/> in order to weight between different behaviours.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringBehaviour.SensitivityOffset">
            <summary>
            Is added to the <see cref="F:Polarith.AI.Move.Structure.Sensitivity"/> as threshold for writing objective values.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringBehaviour.ValueWriting">
            <summary>
            Sets the type for writing objective values.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringBehaviour.LayerBlending">
            <summary>
            Sets the operation for blending the behaviour results into the context. If set to a value other than <see
            cref="F:Polarith.AI.Move.LayerBlendingType.None"/>, this behaviour writes to an intermediate instead of writing directly to the
            context, whereby this parameter defines the operation used to apply the intermediate to the context.
            <para/>
            Note that the intermediate values are initialized with the neutral element with respect to the set <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.ValueWriting"/> (1 for <see cref="F:Polarith.AI.Move.ValueWritingType.Multiplication"/> or <see
            cref="F:Polarith.AI.Move.ValueWritingType.Division"/> and 0.0f otherwise).
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringBehaviour.LayerNormalization">
            <summary>
            Sets the method for normalizing intermediate objective values while they are blended into the context. <see
            cref="F:Polarith.AI.Move.LayerNormalizationType.Intermediate"/> has an effect only if <see cref="F:Polarith.AI.Move.SteeringBehaviour.LayerBlending"/> has a value
            other than <see cref="F:Polarith.AI.Move.LayerBlendingType.None"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringBehaviour.ValueMapping">
            <summary>
            Sets the mapping type for obtaining objective values.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringBehaviour.UseSignificance">
            <summary>
            Determines if the <see cref="F:Polarith.AI.Move.SteeringPercept.Significance"/> (if there is a <see cref="T:Polarith.AI.Move.AIMSteeringTag"/>) is
            multiplied to the <see cref="F:Polarith.AI.Move.SteeringBehaviour.ResultMagnitude"/> in order to weight between different percepts.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringBehaviour.UseSensorProjection">
            <summary>
            If <c>true</c>, <see cref="P:Polarith.AI.Move.Sensor.ProjectionMode"/> is used as <see cref="F:Polarith.AI.Move.SteeringBehaviour.VectorProjection"/>. Otherwise,
            the <see cref="F:Polarith.AI.Move.SteeringBehaviour.VectorProjection"/> is used as configured.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringBehaviour.VectorProjection">
            <summary>
            Sets the type for projecting the perceived vector data into a plane.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringBehaviour.PresetVelocity">
            <summary>
            If the value is anything other than <see cref="F:Polarith.AI.Move.PresetVelocityType.None"/>, a game object's rotation and
            default forward direction is used to approximate its actual velocity. This is especially useful for
            velocity-dependent behaviours like <see cref="T:Polarith.AI.Move.AIMAvoid"/> and if no other sources for a valid velocity
            vector can be provided. Moreover, such preset forward direction has the advantage to be more stable in
            contrast to other possible velocity sources. The other types specify another default forward direction: <see
            cref="F:Polarith.AI.Move.PresetVelocityType.Automatic"/> chooses the forward vector based on the editor mode (2D or 3D).
            <para/>
            Other valid sources for obtaining a movement velocity are the <see cref="F:Polarith.AI.Move.AIMSteeringTag.TrackVelocity"/>
            option or to make use of a <see cref="T:UnityEngine.Rigidbody"/> respectively a <see cref="T:UnityEngine.Rigidbody2D"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringBehaviour.Prediction">
            <summary>
            If set to anything other than <see cref="F:Polarith.AI.Move.PredictionType.None"/>, the position of the <see cref="P:Polarith.AI.Move.SteeringBehaviour.Self"/>
            percept is updated according to the given velocity. Hence, for the behaviour, it is possible to predict and
            use the future position of an agent. This is, of course, only useful for behaviours that need the position.
            E.g., <see cref="T:Polarith.AI.Move.AIMFollow"/> and <see cref="T:Polarith.AI.Move.AIMAlign"/> do not need any distances to the self percept.
            Thus, <see cref="F:Polarith.AI.Move.SteeringBehaviour.Prediction"/> has no effect on these behaviours.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringBehaviour.PredictionMagnitude">
            <summary>
            Scales the velocity vector used for predicting the possible future position of an agent if <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.Prediction"/> is set to <see cref="F:Polarith.AI.Move.PredictionType.PredictionMagnitude"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringBehaviour.self">
            <summary>
            The data of the associated agent itself (read only).
            <para/>
            This is valid to use within: <see cref="M:Polarith.AI.Move.SteeringBehaviour.StartSteering"/>, <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> and <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringBehaviour.percept">
            <summary>
            The data of the currently processed percept (read only).
            <para/>
            This is valid to use within: <see cref="M:Polarith.AI.Move.SteeringBehaviour.StartSteering"/>, <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> and <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringBehaviour.objective">
            <summary>
            Quick access to the currently processed objective.
            <para/>
            This is valid to use within: <see cref="M:Polarith.AI.Move.SteeringBehaviour.StartSteering"/>, <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> and <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringBehaviour.sensor">
            <summary>
            Quick access to the currently processed sensor.
            <para/>
            This is valid to use within: <see cref="M:Polarith.AI.Move.SteeringBehaviour.StartSteering"/>, <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> and <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringBehaviour.receptor">
            <summary>
            Quick access to the currently processed receptor.
            <para/>
            This is valid to use only within: <see cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringBehaviour.structure">
            <summary>
            Quick access to the currently processed structure.
            <para/>
            This is valid to use only within: <see cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringBehaviour.velocity">
            <summary>
            The forward direction the agent moves towards and/or looks at by default.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.SteeringBehaviour.forEachPercept">
            <summary>
            Determines if <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> is called within <see cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> (read only). Usually, you
            might only want either <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> or <see cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/> to be called at once.
            In some cases, a behaviour only needs to call <see cref="M:Polarith.AI.Move.SteeringBehaviour.StartSteering"/>, e.g. like <see cref="T:Polarith.AI.Move.Align"/> and
            <see cref="T:Polarith.AI.Move.Wander"/>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.SteeringBehaviour.forEachReceptor">
            <summary>
            Determines if <see cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/> is called within <see cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> (read only). Usually, you
            might only want either <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> or <see cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/> to be called at once.
            In some cases, a behaviour only needs to call <see cref="M:Polarith.AI.Move.SteeringBehaviour.StartSteering"/>, e.g. like <see cref="T:Polarith.AI.Move.Align"/> and
            <see cref="T:Polarith.AI.Move.Wander"/>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.SteeringBehaviour.Self">
            <summary>
            The data of the associated agent itself. When assigned, this properties deep copies the data of the given
            instance into an internal hold <see cref="T:Polarith.AI.Move.SteeringPercept"/> instance to ensure thread-safety.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.SteeringBehaviour.Behave">
            <summary>
            This method executes the main context steering algorithm and is called within <see cref="M:Polarith.AI.Move.Context.Evaluate"/>
            in order to set/modify objective values for the associated <see cref="P:Polarith.AI.Move.Context.Problem"/>. It pre-caches
            multiple references for quick access in the three called steering methods, projects vector data as specified
            with <see cref="F:Polarith.AI.Move.SteeringBehaviour.VectorProjection"/> and finally obtain/write objective values based on the set <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.ValueMapping"/> and <see cref="F:Polarith.AI.Move.SteeringBehaviour.ValueWriting"/>.
            <para/>
            For each existing instance in <see cref="F:Polarith.AI.Move.PerceptBehaviour`1.Percepts"/>, the <see cref="F:Polarith.AI.Move.SteeringBehaviour.ResultDirection"/>
            and <see cref="F:Polarith.AI.Move.SteeringBehaviour.ResultMagnitude"/> are used for obtaining the objective values so that they need to be set
            through the implementation of <see cref="M:Polarith.AI.Move.SteeringBehaviour.StartSteering"/>, <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> and <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/> in derived <see cref="T:Polarith.AI.Move.SteeringBehaviour"/> classes.
            <para/>
            The final objective value which is written for one corresponding receptor is a sum which is obtained by
            weighting the angle between the <see cref="F:Polarith.AI.Move.SteeringBehaviour.ResultDirection"/> and receptor direction, considering the <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.ResultMagnitude"/> and, optionally, the <see cref="F:Polarith.AI.Move.SteeringPercept.Significance"/>.
            </summary>
            <exception cref="T:System.NullReferenceException">
            If the inherited <see cref="F:Polarith.AI.Move.MoveBehaviour.Context"/> or its associated <see cref="P:Polarith.AI.Move.Context.Problem"/>
            respectively <see cref="P:Polarith.AI.Criteria.Context`2.Sensor"/> are <c>null</c>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.SteeringBehaviour.StartSteering">
            <summary>
            Gets called at the beginning of the context steering algorithm for each processed percept and should be used
            to pre-compute things like distances or to check whether a percept is relevant at all. If a percept is not
            relevant, e.g. because it is too far away, this method should return <c>false</c> (otherwise, <c>true</c>)
            in order to force <see cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> to skip all further and maybe performance-heavy computations and to
            continue with the next percept. Furthermore, there might be some behaviours which require only this method
            to work properly, e.g. <see cref="T:Polarith.AI.Move.Align"/> or <see cref="T:Polarith.AI.Move.Wander"/>.
            <para/>
            To improve performance, things which remain constant for one percept, e.g. central distances, can be
            computed in this method and re-used in <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> and <see cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/>.
            Especially for the latter, this might improve the performance a lot.
            <para/>
            Within this method, the following references can be used for quick data access: <see cref="F:Polarith.AI.Move.SteeringBehaviour.self"/>, <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.percept"/>, <see cref="F:Polarith.AI.Move.SteeringBehaviour.objective"/> and <see cref="F:Polarith.AI.Move.SteeringBehaviour.sensor"/>.
            <para/>
            To make a <see cref="T:Polarith.AI.Move.SteeringBehaviour"/> thread-safe, only <see cref="F:Polarith.AI.Move.SteeringBehaviour.self"/> and <see cref="F:Polarith.AI.Move.SteeringBehaviour.percept"/>
            must be accessed by writes. All other references for quick access are not thread-safe. Furthermore, to be
            thread-safe, no reference types of the Unity scripting API must be used within this method. If you fulfill
            these restrictions, you can mark the derived <see cref="T:Polarith.AI.Move.SteeringBehaviour"/> class as thread-safe through
            setting <see cref="P:Polarith.AI.Move.AIMBehaviour.ThreadSafe"/> to <c>true</c> for its corresponding front-end class.
            </summary>
            <returns><c>true</c>: if the processed percept is relevant for the agent, <c>false</c>: otherwise.</returns>
        </member>
        <member name="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering">
            <summary>
            This method gets called once for each processed percept. Its purpose is to set an appropriate <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.ResultDirection"/> and <see cref="F:Polarith.AI.Move.SteeringBehaviour.ResultMagnitude"/> for obtaining/writing objective values. So the
            implementation of this method determines what kind of AI movement behaviour a derived <see
            cref="T:Polarith.AI.Move.SteeringBehaviour"/> class really is.
            <para/>
            Within this method, the following references can be used for quick data access: <see cref="F:Polarith.AI.Move.SteeringBehaviour.self"/>, <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.percept"/>, <see cref="F:Polarith.AI.Move.SteeringBehaviour.objective"/> and <see cref="F:Polarith.AI.Move.SteeringBehaviour.sensor"/>.
            <para/>
            Usually, you might only want either <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> or <see cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/> to be
            called at once.
            <para/>
            To make a <see cref="T:Polarith.AI.Move.SteeringBehaviour"/> thread-safe, only <see cref="F:Polarith.AI.Move.SteeringBehaviour.self"/> and <see cref="F:Polarith.AI.Move.SteeringBehaviour.percept"/>
            must be accessed by writes. All other references for quick access are not thread-safe. Furthermore, to be
            thread-safe, no reference types of the Unity scripting API must be used within this method. If you fulfill
            these restrictions, you can mark the derived <see cref="T:Polarith.AI.Move.SteeringBehaviour"/> class as thread-safe through
            setting <see cref="P:Polarith.AI.Move.AIMBehaviour.ThreadSafe"/> to <c>true</c> for its corresponding front-end class.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering">
            <summary>
            This method gets called for each active shape receptor for each processed percept. Its purpose is to set an
            appropriate <see cref="F:Polarith.AI.Move.SteeringBehaviour.ResultDirection"/> and <see cref="F:Polarith.AI.Move.SteeringBehaviour.ResultMagnitude"/> for obtaining/writing objective
            values. So the implementation of this method determines what kind of AI movement behaviour a derived <see
            cref="T:Polarith.AI.Move.SteeringBehaviour"/> class really is.
            <para/>
            Within this method, the following references can be used for quick data access: <see cref="F:Polarith.AI.Move.SteeringBehaviour.self"/>, <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.percept"/>, <see cref="F:Polarith.AI.Move.SteeringBehaviour.objective"/>, <see cref="F:Polarith.AI.Move.SteeringBehaviour.sensor"/>, <see cref="F:Polarith.AI.Move.SteeringBehaviour.receptor"/> and <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.structure"/>.
            <para/>
            Usually, you might only want either <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> or <see cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/> to be
            called at once.
            <para/>
            To make a <see cref="T:Polarith.AI.Move.SteeringBehaviour"/> thread-safe, only <see cref="F:Polarith.AI.Move.SteeringBehaviour.self"/> and <see cref="F:Polarith.AI.Move.SteeringBehaviour.percept"/>
            must be accessed by writes. All other references for quick access are not thread-safe. Furthermore, to be
            thread-safe, no reference types of the Unity scripting API must be used within this method. If you fulfill
            these restrictions, you can mark the derived <see cref="T:Polarith.AI.Move.SteeringBehaviour"/> class as thread-safe through
            setting <see cref="P:Polarith.AI.Move.AIMBehaviour.ThreadSafe"/> to <c>true</c> for its corresponding front-end class.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.Evade">
            <summary>
            <see cref="T:Polarith.AI.Move.Evade"/> anticipates where the percept will be in the future and flees from this position (back-end
            class). It functions analogously to the usual steering behaviour 'Evade'. It is the counterpart to <see
            cref="T:Polarith.AI.Move.Pursue"/>. Instead of moving towards a predicted position, it flees from it. Therefore, it inherits from
            <see cref="T:Polarith.AI.Move.Pursue"/> and negate its <see cref="F:Polarith.AI.Move.SteeringBehaviour.ResultDirection"/>.
            <para/>
            Back-end class of <see cref="T:Polarith.AI.Move.AIMEvade"/>. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Evade.PerceptSteering">
            <summary>
            Processes the steering algorithm for each percept using the same data for each processed receptor.
            <para/>
            First, <see cref="M:Polarith.AI.Move.Pursue.PerceptSteering"/> is called, and then, the obtained <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.ResultDirection"/> is negated.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Evade.ReceptorSteering">
            <summary>
            Processes the steering algorithm for each receptor for each percept separately. This might be useful if the
            receptors of the associated sensor have got a different position.
            <para/>
            First, <see cref="M:Polarith.AI.Move.Pursue.PerceptSteering"/> is called, and then, the obtained <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.ResultDirection"/> is negated.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.Flee">
            <summary>
            <see cref="T:Polarith.AI.Move.Flee"/> uses the opposing direction to the percept as target direction (back-end class). It inherits
            from <see cref="T:Polarith.AI.Move.Seek"/> and works like its base class except that it negates the result direction for obtaining
            objective values.
            <para/>
            Back-end class of <see cref="T:Polarith.AI.Move.AIMFlee"/>. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Flee.PerceptSteering">
            <summary>
            Processes the steering algorithm for each percept using the same data for each processed receptor.
            <para/>
            First, <see cref="M:Polarith.AI.Move.Seek.PerceptSteering"/> is called, and then, the obtained <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.ResultDirection"/> is negated.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Flee.ReceptorSteering">
            <summary>
            Processes the steering algorithm for each receptor for each percept separately. This might be useful if the
            receptors of the associated sensor have got a different position.
            <para/>
            First, <see cref="M:Polarith.AI.Move.Seek.ReceptorSteering"/> is called, and then, the obtained <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.ResultDirection"/> is negated.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.Follow">
            <summary>
            By using <see cref="T:Polarith.AI.Move.Follow"/> the agent follows one target independent on its distance to the agent (back-end
            class). It functions analogously to the usual steering behaviour 'Follow'. As the name implies, the purpose of
            the behaviour is to follow one given <see cref="F:Polarith.AI.Move.AIMFollow.Target"/>, this is independent of its location or
            velocity. In order to combine <see cref="T:Polarith.AI.Move.Follow"/> with a pathfinding algorithm, you can set the <see
            cref="F:Polarith.AI.Move.AIMFollow.TargetPosition"/> via script. Note, if <see cref="F:Polarith.AI.Move.AIMFollow.Target"/> is <c>null</c>, <see
            cref="F:Polarith.AI.Move.AIMFollow.TargetPosition"/> is used as the next target position.
            <para/>
            Back-end class of <see cref="T:Polarith.AI.Move.AIMFollow"/>. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Follow.forEachPercept">
            <summary>
            Determines if <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> is called within <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> (read only). Returns always <c>false</c> because all the work is done
            within <see cref="M:Polarith.AI.Move.SteeringBehaviour.StartSteering"/>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Follow.forEachReceptor">
            <summary>
            Determines if <see cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/> is called within <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> (read only). Returns always <c>false</c> because all the work is done
            within <see cref="M:Polarith.AI.Move.SteeringBehaviour.StartSteering"/>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Follow.StartSteering">
            <summary>
            Computes the <see cref="F:Polarith.AI.Move.SteeringBehaviour.ResultDirection"/> through the vector subtraction of the target
            position and the agent position. The <see cref="F:Polarith.AI.Move.SteeringBehaviour.ResultMagnitude"/> is always one. In order
            to weight the objective values in contrast to other <see cref="T:Polarith.AI.Move.SteeringBehaviour"/>, you might use the <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.MagnitudeMultiplier"/>.
            </summary>
            <returns>Returns always <c>true</c>.</returns>
        </member>
        <member name="T:Polarith.AI.Move.Orbit">
            <summary>
            By using <see cref="T:Polarith.AI.Move.Orbit"/> the agent will move along the orbit of one target percept (back-end class). It is
            more or less a <see cref="T:Polarith.AI.Move.SteeringBehaviour"/> which demonstrates how easily new behaviours can be implemented
            with the help of our system. This behaviour does not belong to the classic steering algorithms. Moreover, it is
            used to ensure that the agent moves along the <see cref="F:Polarith.AI.Move.AIMOrbit.Target"/>'s orbit. One special feature is that
            <see cref="T:Polarith.AI.Move.Orbit"/> can easily be combined with other <see cref="T:Polarith.AI.Move.SteeringBehaviour"/> instances. For example, in
            combination with <see cref="T:Polarith.AI.Move.PlanarAvoid"/>, the agent moves along the orbit determined by <see cref="F:Polarith.AI.Move.Orbit.Radius"/>,
            and in parallel, it avoids objects. Note, the behaviour concentrates only on one target.
            <para/>
            Back-end class of <see cref="T:Polarith.AI.Move.AIMSeek"/>. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Orbit.Plane">
            <summary>
            Determines the plane on which the orbit is mapped.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Orbit.Radius">
            <summary>
            This is the radius which determines the size of the orbit.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Orbit.MinDeviation">
            <summary>
            Determines how far the agent is able to move towards the object and away from the orbit.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Orbit.MaxDeviation">
            <summary>
            Determines how far the agent is able to move away from the object and towards the orbit.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Orbit.DeltaAngle">
            <summary>
            Specifies the target position on the orbit. This depends on the agent's location relative to the target. The
            sign determines the movement direction, positive is clockwise and negative counter-clockwise.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.Orbit.PlaneType">
            <summary>
            Determines the plane which is used to map the orbit into.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Orbit.PlaneType.PlaneXY">
            <summary>
            Orbit is mapped into the x/y-plane. This might be useful for apps using Unity's 2D mode.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Orbit.PlaneType.PlaneXZ">
            <summary>
            Orbit is mapped into the x/z-plane. This might be useful for apps using Unity's 3D mode.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Orbit.PlaneType.PlaneYZ">
            <summary>
            Orbit is mapped into the y/z-plane.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Orbit.TargetPosition">
            <summary>
            The computed point on the orbit which is currently targeted (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Orbit.forEachPercept">
            <summary>
            Determines if <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> is called within <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> (read only). Returns always <c>false</c> because all the work is done
            within <see cref="M:Polarith.AI.Move.SteeringBehaviour.StartSteering"/>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Orbit.forEachReceptor">
            <summary>
            Determines if <see cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/> is called within <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> (read only). Returns always <c>false</c> because all the work is done
            within <see cref="M:Polarith.AI.Move.SteeringBehaviour.StartSteering"/>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Orbit.StartSteering">
            <summary>
            In order to move along the orbit of the <see cref="F:Polarith.AI.Move.AIMOrbit.Target"/>, the <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.ResultDirection"/> is obtained by the <see cref="F:Polarith.AI.Move.Orbit.Radius"/> and the positions of <see
            cref="P:Polarith.AI.Move.PerceptBehaviour`1.Self"/> and <see cref="F:Polarith.AI.Move.AIMOrbit.Target"/>. Furthermore, <see cref="F:Polarith.AI.Move.Orbit.DeltaAngle"/>
            specifies how far the next target point on the orbit is away from the agent.
            </summary>
            <returns>Returns always <c>true</c>.</returns>
        </member>
        <member name="T:Polarith.AI.Move.Pursue">
            <summary>
            <see cref="T:Polarith.AI.Move.Pursue"/> anticipates where the percept will be in the future and takes this position as a target
            (back-end class). It functions analogously to the usual steering behaviour 'Pursue'. A predicted position of the
            percept is used to obtain the <see cref="F:Polarith.AI.Move.SteeringBehaviour.ResultDirection"/>. In addition, the movement
            directions of the agent itself and the processed percept are considered. The less the movement directions match,
            the further away the future point is calculated.
            <para/>
            Note, if there is no (= zero) velocity of <see cref="P:Polarith.AI.Move.PerceptBehaviour`1.Self"/> and <see
            cref="F:Polarith.AI.Move.PerceptBehaviour`1.Percepts"/>, <see cref="T:Polarith.AI.Move.Pursue"/> works like <see cref="T:Polarith.AI.Move.Seek"/>. Furthermore, the
            prediction is based on the assumption of a uniform rectilinear motion. If you want to use a uniformly
            accelerated motion, you must implement a new behaviour.
            <para/>
            Back-end class of <see cref="T:Polarith.AI.Move.AIMPursue"/>. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Pursue.MaxPredictionTime">
            <summary>
            Threshold for the maximum prediction time of the computed point.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Pursue.ForEachReceptor">
            <summary>
            If set to <c>true</c>, the algorithm is applied for each receptor instead for each percept. This might be
            useful if the receptors of the associated sensor have got a different position.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Pursue.TargetPosition">
            <summary>
            The predicted point of the percept (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Pursue.forEachPercept">
            <summary>
            Determines if <see cref="M:Polarith.AI.Move.Pursue.PerceptSteering"/> is called within <see cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> (read
            only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Pursue.forEachReceptor">
            <summary>
            Determines if <see cref="M:Polarith.AI.Move.Pursue.ReceptorSteering"/> is called within <see cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> (read
            only).
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Pursue.StartSteering">
            <summary>
            In addition to the filter process which is applied for each percept in <see
            cref="M:Polarith.AI.Move.RadiusSteeringBehaviour.StartSteering"/>, a multiplier is computed which determines how well the
            velocity directions of the <see cref="F:Polarith.AI.Move.PerceptBehaviour`1.Percepts"/> and <see
            cref="P:Polarith.AI.Move.PerceptBehaviour`1.Self"/> match.
            </summary>
            <returns>
            <c>true</c>: if the percept lies in between the <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.InnerRadius"/> and <see
            cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.OuterRadius"/>, <c>false</c>: otherwise.
            </returns>
        </member>
        <member name="M:Polarith.AI.Move.Pursue.PerceptSteering">
            <summary>
            Computes the <see cref="P:Polarith.AI.Move.Pursue.TargetPosition"/> for the currently processed percept based on its velocity and
            position relative to the agent under the assumption of an uniform rectilinear motion.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Pursue.ReceptorSteering">
            <summary>
            Computes the <see cref="P:Polarith.AI.Move.Pursue.TargetPosition"/> for the currently processed percept based on its velocity and
            position relative to the agent under the assumption of an uniform rectilinear motion. In addition, the <see
            cref="F:Polarith.AI.Move.SteeringBehaviour.ResultDirection"/> towards the target position is obtained for each receptor and not
            only for the agent's position.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.Seek">
            <summary>
            <see cref="T:Polarith.AI.Move.Seek"/> uses the percept's position as the target (back-end class). The godfather of all (context)
            steering algorithms. <see cref="T:Polarith.AI.Move.Seek"/> simply computes a direction to the currently targeted percept and uses
            the perception radii of its base class <see cref="T:Polarith.AI.Move.RadiusSteeringBehaviour"/> to decide whether a percept is
            important or if it can be ignored. The result magnitude is computed accordingly by using the position of the
            percept relative to the perception radii.
            <para/>
            This behaviour populates the <see cref="P:Polarith.AI.Move.Context.Problem"/> with objective values which reflect the directly
            sampled positions of the processed percepts. The following holds true for the default parametrization: the
            closer a percept is, the greater the resulting objective values will be, and the sensor receptor which direction
            matches the direction towards the processed percept best is obtaining the greatest objective value.
            <para/>
            Back-end class of <see cref="T:Polarith.AI.Move.AIMSeek"/>. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Seek.ForEachReceptor">
            <summary>
            If set to <c>true</c> the algorithm is applied for each receptor instead for each percept. This might be
            useful if the receptors of the associated sensor have got a different position.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Seek.forEachPercept">
            <summary>
            Determines if <see cref="M:Polarith.AI.Move.Seek.PerceptSteering"/> is called within <see cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> (read
            only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Seek.forEachReceptor">
            <summary>
            Determines if <see cref="M:Polarith.AI.Move.Seek.ReceptorSteering"/> is called within <see cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> (read
            only).
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Seek.PerceptSteering">
            <summary>
            Processes the steering algorithm for each percept using the same data for each processed receptor.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Seek.ReceptorSteering">
            <summary>
            Processes the steering algorithm for each receptor for each percept separately. This might be useful if the
            receptors of the associated sensor have got a different position.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.Wander">
            <summary>
            A simple <see cref="T:Polarith.AI.Move.SteeringBehaviour"/> which is intended to let the agent wander around randomly (back-end
            class). Using the <see cref="F:Polarith.AI.Move.Wander.AngleDeviationMax"/> and <see cref="F:Polarith.AI.Move.Wander.TimeDeviationMax"/> parameters, it can be controlled
            how the agent will move. A higher value for <see cref="F:Polarith.AI.Move.Wander.AngleDeviationMax"/> results in more significant direction
            changes. <see cref="F:Polarith.AI.Move.Wander.TimeDeviationMax"/> determines how often the behaviour will decide to change its direction. It
            can either choose to move steady, based on the <see cref="F:Polarith.AI.Move.Wander.Steadiness"/>, or to generate a new random
            angle. Note, the behaviour sticks to the determined angle until it makes its next decision.
            <para/>
            Back-end class of <see cref="T:Polarith.AI.Move.AIMWander"/>. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Wander.Up">
            <summary>
            Obsolete, use <see cref="P:Polarith.AI.Move.Wander.PlanarMappingType"/> instead.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Wander.AngleDeviationMin">
            <summary>
            The lower limit for randomly generated angles regarding new wander directions.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Wander.AngleDeviationMax">
            <summary>
            The upper limit for randomly generated angles regarding new wander directions.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Wander.TimeDeviationMin">
            <summary>
            The lower limit for randomly determined values used as duration to generate new wander directions.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Wander.TimeDeviationMax">
            <summary>
            The upper limit for randomly determined values used as duration to generate new wander directions.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Wander.Steadiness">
            <summary>
            Every time the behaviour makes a new random decision, it can either decide to go steady until the next
            decision or generate a random angle. With a high <see cref="F:Polarith.AI.Move.Wander.Steadiness"/>, the behaviour is more likely to
            stick to its current direction.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Wander.#ctor">
            <summary>
            Constructs an instance of <see cref="T:Polarith.AI.Move.Wander"/>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Wander.PlanarMappingType">
            <summary>
            Determines if the behaviour result gets mapped to either the XY-plane (2D mode), the XZ-plane (3D with
            ground), the plane is determined automatically via the attached sensor, or whether no mapping is used at all
            (general 3D) (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Wander.forEachPercept">
            <summary>
            Determines if <see cref="M:Polarith.AI.Move.SteeringBehaviour.PerceptSteering"/> is called within <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> (read only). Returns always <c>false</c>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Wander.forEachReceptor">
            <summary>
            Determines if <see cref="M:Polarith.AI.Move.SteeringBehaviour.ReceptorSteering"/> is called within <see
            cref="M:Polarith.AI.Move.SteeringBehaviour.Behave"/> (read only). Returns always <c>false</c>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Wander.SetPlanarMappingType(Polarith.AI.Move.PlanarMappingType,Polarith.AI.Move.PlanarOrientationType)">
            <summary>
            Sets the <see cref="P:Polarith.AI.Move.Wander.PlanarMappingType"/> and adapts the internal up vector based on the mapping type and, in
            case of <see cref="F:Polarith.AI.Move.PlanarMappingType.Automatic"/>, determines the best up vector based on both the mapping
            type and the given orientation.
            </summary>
            <param name="mappingType">The new <see cref="P:Polarith.AI.Move.Wander.PlanarMappingType"/> that is assigned.</param>
            <param name="orientation">
            An optional orientation given by a <see cref="T:Polarith.AI.Move.PlanarSensor"/>. Only relevant if the new <paramref
            name="mappingType"/> is <see cref="F:Polarith.AI.Move.PlanarMappingType.Automatic"/>.
            </param>
        </member>
        <member name="M:Polarith.AI.Move.Wander.StartSteering">
            <summary>
            Since this behaviour is independent of other percepts, the whole algorithm is executed in this method.
            <para/>
            It only returns <c>false</c> if the internal up vector is invalid. Otherwise, it orients itself based on the
            velocity (forward direction) of its agent. If this is also 0, the first receptor of the attached <see
            cref="T:Polarith.AI.Move.AIMSensor"/> is used as a fall-back.
            </summary>
            <returns>
            <c>false</c>: if the <see cref="F:Polarith.AI.Move.Wander.Up"/> vector is invalid (0, 0, 0), <c>true</c>: otherwise.
            </returns>
        </member>
        <member name="T:Polarith.AI.Move.ValueWritingType">
            <summary>
            Sets the operation for writing objective values in <see cref="M:Polarith.AI.Move.MoveBehaviour.WriteValue(Polarith.AI.Move.ValueWritingType,System.Int32,System.Int32,System.Single,System.Boolean)"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.ValueWritingType.AssignGreater">
            <summary>
            Writes a new value iff it is greater than the value which already exists.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.ValueWritingType.AssignLesser">
            <summary>
            Writes a new value iff it is lesser than the value which already exists.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.ValueWritingType.Addition">
            <summary>
            Adds the new value to the value which already exists.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.ValueWritingType.Subtraction">
            <summary>
            Subtracts the new value from the value which already exists.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.ValueWritingType.Multiplication">
            <summary>
            Multiplies the new value to the value which already exists.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.ValueWritingType.Division">
            <summary>
            Divides the value which already exists by the new value.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.RegularGrid">
            <summary>
            A regular grid to speed up the access to relevant <see cref="T:Polarith.AI.Move.SteeringPercept"/> instances, whereby it can be
            used for arbitrary scenarios, 2D and 3D as well, since it can be adapted as required. Both the resolution and
            the cell size of the grid can be controlled individually for each axis via <see cref="F:Polarith.AI.Move.RegularGrid.CellCountX"/>, <see
            cref="F:Polarith.AI.Move.RegularGrid.CellCountY"/>, <see cref="F:Polarith.AI.Move.RegularGrid.CellCountZ"/>, <see cref="F:Polarith.AI.Move.RegularGrid.CellSizeX"/>, <see cref="F:Polarith.AI.Move.RegularGrid.CellSizeY"/> and <see
            cref="F:Polarith.AI.Move.RegularGrid.CellSizeZ"/>. When this documentation speaks of a grid size (for one axis), the cell size multiplied by
            the cell count is meant.
            <para/>
            A percept must be located within the bounds defined by the grid size for being integrated into the grid
            structure. The <see cref="F:Polarith.AI.Move.RegularGrid.GridGizmo"/> can be used to display the grid and to check the bounds accordingly.
            <para/>
            This class is serializable so that it is suitable for the direct use in <see cref="T:UnityEngine.MonoBehaviour"/> instances
            supporting Unity's inspector.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.RegularGrid.CellCountX">
            <summary>
            Defines the number of cells along the x-axis, needs to be at least 1.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.RegularGrid.CellCountY">
            <summary>
            Defines the number of cells along the y-axis, needs to be at least 1.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.RegularGrid.CellCountZ">
            <summary>
            Defines the number of cells along the z-axis, needs to be at least 1.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.RegularGrid.CellSizeX">
            <summary>
            Defines the size of single cells along the x-axis in Unity units, needs to be greater than 0.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.RegularGrid.CellSizeY">
            <summary>
            Defines the size of single cells along the y-axis in Unity units, needs to be greater than 0.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.RegularGrid.CellSizeZ">
            <summary>
            Defines the size of single cells along the z-axis in Unity units, needs to be greater than 0.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.RegularGrid.GridGizmo">
            <summary>
            A gizmo that displays the grid in the scene view.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.RegularGrid.DrawGizmo(UnityEngine.Vector3)">
            <summary>
            Displays a gizmo for visualizing this grid at the given <paramref name="center"/> point.
            </summary>
            <param name="center"></param>
        </member>
        <member name="M:Polarith.AI.Move.RegularGrid.Initialize(System.Collections.Generic.IList{Polarith.AI.Move.AIMEnvironment})">
            <summary>
            Initializes the grid structure based on the currently known <paramref name="environments"/>. The actual size
            in memory is based on the fields <see cref="F:Polarith.AI.Move.RegularGrid.CellCountX"/>, <see cref="F:Polarith.AI.Move.RegularGrid.CellCountY"/> and <see
            cref="F:Polarith.AI.Move.RegularGrid.CellCountZ"/>. These sizes must be positive numbers and at least 1. On initialization, the whole grid
            memory is (re-)allocated, which might cause GC for old grid data if there was any.
            </summary>
            <param name="environments">A list containing all known <see cref="T:Polarith.AI.Move.AIMEnvironment"/> instances.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="environments"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Polarith.AI.Move.RegularGrid.Initialize(System.Collections.Generic.IList{Polarith.AI.Move.AIMEnvironment},System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the grid structure based on the currently known <paramref name="environments"/> and the
            specified sizes. On initialization, the whole grid memory is (re-)allocated, which might cause GC for old
            grid data if there was any.
            </summary>
            <param name="environments">A list containing all known <see cref="T:Polarith.AI.Move.AIMEnvironment"/> instances.</param>
            <param name="cellCountX">The number of grid cells in x-direction.</param>
            <param name="cellCountY">The number of grid cells in y-direction.</param>
            <param name="cellCountZ">The number of grid cells in z-direction.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="environments"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Polarith.AI.Move.RegularGrid.Query(UnityEngine.Vector3,System.Single,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Polarith.AI.Move.SteeringPercept})">
            <summary>
            Given the <paramref name="point"/> and the <paramref name="range"/>, this method iterates all cells of the
            grid that may hold relevant <see cref="T:Polarith.AI.Move.SteeringPercept"/> instances. A percept is considered relevant if it
            is referenced by one of the given <paramref name="environments"/> and is within the <paramref name="range"/>
            of the given <paramref name="point"/>. If the percept is relevant, it is written to the <paramref
            name="percepts"/> list and <see cref="M:Polarith.AI.Move.SteeringPercept.Receive"/> is called when the percept data was not
            already received yet.
            </summary>
            <param name="point"></param>
            A point in world coordinates to query relevant percepts for. This might be an agent position.
            <param name="range">
            The maximum distance a <see cref="T:Polarith.AI.Move.SteeringPercept"/> must have with respect to the given <paramref
            name="point"/> for being considered as relevant.
            </param>
            <param name="environments">
            A list containing labels corresponding to environments that should be searched.
            </param>
            <param name="percepts">Contains the queried percepts after the call of this method.</param>
            <exception cref="T:System.NullReferenceException">
            If <paramref name="environments"/> or <paramref name="percepts"/> are <c>null</c>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.RegularGrid.PrepareUpdate(UnityEngine.Vector3,System.Collections.Generic.IList{Polarith.AI.Move.AIMEnvironment})">
            <summary>
            Needs to be called at the beginning of an update cycle before <see cref="M:Polarith.AI.Move.RegularGrid.Update(Polarith.AI.Move.AIMEnvironment,System.Collections.Generic.IList{Polarith.AI.Move.SteeringPercept})"/> is called accordingly for all available <see cref="T:Polarith.AI.Move.AIMEnvironment"/> instances.
            This method should be called within an concrete implementation of the <see
            cref="M:Polarith.AI.Move.AIMPerceiver`1.StartPerceiving"/> method.
            </summary>
            <param name="center">The actual center of the spatial grid structure.</param>
            <param name="environments">The environments to prepare an update for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="environments"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Polarith.AI.Move.RegularGrid.Update(Polarith.AI.Move.AIMEnvironment,System.Collections.Generic.IList{Polarith.AI.Move.SteeringPercept})">
            <summary>
            Updates the positions of all <paramref name="percepts"/> within the grid with respect to the given <paramref
            name="environment"/>. Before this method can be called properly during one update step, make sure to call
            <see cref="M:Polarith.AI.Move.RegularGrid.PrepareUpdate(UnityEngine.Vector3,System.Collections.Generic.IList{Polarith.AI.Move.AIMEnvironment})"/> first.
            </summary>
            <param name="environment">An <see cref="T:Polarith.AI.Move.AIMEnvironment"/> instance to update the grid for.</param>
            <param name="percepts">
            A list containing all percepts associated with the given <paramref name="environment"/>.
            </param>
            <exception cref="T:System.NullReferenceException">
            If the <paramref name="environment"/> or <paramref name="percepts"/> are <c>null</c>.
            </exception>
        </member>
        <member name="T:Polarith.AI.Move.SpatialPartitionType">
            <summary>
            Defines available spatial partitioning structures for the use in <see cref="T:Polarith.AI.Move.AIMPerceiver`1"/> implementations.
            These structures are intended to significantly speed up the query respectively access to relevant percepts.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SpatialPartitionType.None">
            <summary>
            No specific spatial optimization structure is to be used.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SpatialPartitionType.RegularGrid">
            <summary>
            The <see cref="F:Polarith.AI.Move.SpatialPartitionType.RegularGrid"/> implementation is to be used.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.VectorProjectionType">
            <summary>
            Specifies how perceived vector data is projected. It might be important for classes like <see
            cref="T:Polarith.AI.Move.SteeringBehaviour"/> and <see cref="T:Polarith.AI.Move.Reduction"/> if the scene objects differ significantly in height. Such
            height difference would lead to impractical objective values because of the distorted angle resulting from the
            comparison of receptor and behaviour directions.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.VectorProjectionType.None">
            <summary>
            No projection.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.VectorProjectionType.PlaneXY">
            <summary>
            Vector data is projected into the x/y-plane, this might be useful for apps using Unity's 2D mode.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.VectorProjectionType.PlaneXZ">
            <summary>
            Vector data is projected into the x/z-plane, this might be useful for apps using Unity's 3D mode.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.SteeringPercept">
            <summary>
            Implements <see cref="T:Polarith.AI.Move.IPercept`1"/> and serves as container for perceived steering data used by all derived
            <see cref="T:Polarith.AI.Move.SteeringBehaviour"/> instances.
            <para/>
            Instances of this class gets a <see cref="M:Polarith.AI.Move.SteeringPercept.SetGameObject(UnityEngine.GameObject)"/> as input and extracts all available data with the
            help of the <see cref="M:Polarith.AI.Move.SteeringPercept.Receive(UnityEngine.GameObject)"/> method. This is necessary for the main movement AI method <see
            cref="M:Polarith.AI.Move.Context.Evaluate"/> to support Unity's serialization mechanism, because in sub-threads it is not possible
            to access class references of the Unity scripting API.
            <para/>
            The data extraction needs to be done before the parallel execution of multiple threads, so an ideal place for
            this would be within an <see cref="M:Polarith.AI.Move.IEvaluationPreparer.PrepareEvaluation"/> implementation respectively within
            <see cref="M:Polarith.AI.Move.AIMContext.PrepareEvaluation"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringPercept.Values">
            <summary>
            Custom values of the received <see cref="M:Polarith.AI.Move.SteeringPercept.SetGameObject(UnityEngine.GameObject)"/> instance which might be set within an existing
            <see cref="T:Polarith.AI.Move.AIMSteeringTag"/> (read only).
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringPercept.Label">
            <summary>
            User specified name for the received <see cref="M:Polarith.AI.Move.SteeringPercept.SetGameObject(UnityEngine.GameObject)"/> instance which might be set within an
            existing <see cref="T:Polarith.AI.Move.AIMSteeringTag"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringPercept.Significance">
            <summary>
            Weighted importance of the received <see cref="M:Polarith.AI.Move.SteeringPercept.SetGameObject(UnityEngine.GameObject)"/> instance which might be set within an
            existing <see cref="T:Polarith.AI.Move.AIMSteeringTag"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringPercept.Radius">
            <summary>
            A custom radius of the received <see cref="T:UnityEngine.GameObject"/> instance which might be obtained from an existing
            <see cref="T:Polarith.AI.Move.AIMSteeringTag"/> and used as bounding volume approximation in behaviours.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringPercept.Position">
            <summary>
            The position of the <see cref="T:UnityEngine.GameObject"/> given by the <see cref="M:Polarith.AI.Move.SteeringPercept.SetGameObject(UnityEngine.GameObject)"/> method.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringPercept.Scale">
            <summary>
            The scale of the received <see cref="M:Polarith.AI.Move.SteeringPercept.SetGameObject(UnityEngine.GameObject)"/> instance.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringPercept.Velocity">
            <summary>
            The velocity of the received <see cref="M:Polarith.AI.Move.SteeringPercept.SetGameObject(UnityEngine.GameObject)"/> instance. This might by tracked through a possibly
            existing <see cref="T:Polarith.AI.Move.AIMSteeringTag"/> or extracted from a possibly existing <see cref="T:UnityEngine.Rigidbody"/> (or <see
            cref="T:UnityEngine.Rigidbody2D"/>).
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringPercept.Rotation">
            <summary>
            The rotation of the received <see cref="M:Polarith.AI.Move.SteeringPercept.SetGameObject(UnityEngine.GameObject)"/> instance.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringPercept.WorldToLocalMatrix">
            <summary>
            Matrix that transforms a vector from world space into the local space of this percept.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringPercept.ColliderBoundsAABB">
            <summary>
            If the received <see cref="M:Polarith.AI.Move.SteeringPercept.SetGameObject(UnityEngine.GameObject)"/> instance has got a <see cref="T:UnityEngine.Collider"/> (or <see
            cref="T:UnityEngine.Collider2D"/>), these are the corresponding bounds. Note, these bounds are always axis-aligned
            bounding boxes (AABB) in world coordinates.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringPercept.ColliderBoundsOBB">
            <summary>
            If the received <see cref="M:Polarith.AI.Move.SteeringPercept.SetGameObject(UnityEngine.GameObject)"/> instance has got a <see cref="T:UnityEngine.Collider"/> (or <see
            cref="T:UnityEngine.Collider2D"/>), these are the corresponding bounds. Note, these bounds are always oriented bounding
            boxes (OBB) in local coordinates.
            <para/>
            These bounds are only updated within <see cref="M:Polarith.AI.Move.SteeringPercept.Receive(UnityEngine.GameObject)"/> if the given <see
            cref="M:Polarith.AI.Move.SteeringPercept.SetGameObject(UnityEngine.GameObject)"/> is a new one or if <see cref="F:Polarith.AI.Move.AIMSteeringTag.UpdateLocalBounds"/> is set to
            <c>true</c>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SteeringPercept.VisualBounds">
            <summary>
            If the received <see cref="M:Polarith.AI.Move.SteeringPercept.SetGameObject(UnityEngine.GameObject)"/> instance has got a <see cref="T:UnityEngine.Sprite"/> or <see cref="T:UnityEngine.Mesh"/>,
            these are the corresponding bounds in local coordinates. In order for this to work with meshes, a received
            object must not be static, or otherwise, no visual bounds can be received.
            <para/>
            These bounds are only updated within <see cref="M:Polarith.AI.Move.SteeringPercept.Receive(UnityEngine.GameObject)"/> if the given <see
            cref="M:Polarith.AI.Move.SteeringPercept.SetGameObject(UnityEngine.GameObject)"/> is a new one or if <see cref="F:Polarith.AI.Move.AIMSteeringTag.UpdateLocalBounds"/> is set to
            <c>true</c>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.SteeringPercept.Active">
            <summary>
            Determines if this percept instance is active and important for an agent.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.SteeringPercept.Received">
            <summary>
            A flag that indicates if the percept was already received or not.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.SteeringPercept.Receive(UnityEngine.GameObject)">
            <summary>
            Extracts all information which are necessary for applying context steering algorithms from the given
            <paramref name="gameObject"/> instance. If the given <paramref name="gameObject"/> is <c>null</c> or <see
            cref="P:UnityEngine.GameObject.activeInHierarchy"/> is <c>false</c>, this method sets <see cref="P:Polarith.AI.Move.SteeringPercept.Active"/> to
            <c>false</c>, <c>true</c> otherwise.
            </summary>
            <param name="gameObject">Instance to extract data from.</param>
        </member>
        <member name="M:Polarith.AI.Move.SteeringPercept.Receive">
            <summary>
            Calls <see cref="M:Polarith.AI.Move.SteeringPercept.Receive(UnityEngine.GameObject)"/> with the game object which has currently been assigned by <see
            cref="M:Polarith.AI.Move.SteeringPercept.SetGameObject(UnityEngine.GameObject)"/>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.SteeringPercept.Copy(Polarith.AI.Move.SteeringPercept)">
            <summary>
            Deep copies the data of another <see cref="T:Polarith.AI.Move.SteeringPercept"/> instance into this instance.
            </summary>
            <param name="other">Another instance to copy the data into this instance for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="other"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Polarith.AI.Move.SteeringPercept.Project(Polarith.AI.Move.VectorProjectionType)">
            <summary>
            Projects the vector data of this percept into the plane specified by <paramref name="VectorProjection"/>.
            </summary>
            <param name="VectorProjection">Defines the plane for projecting the vector data.</param>
        </member>
        <member name="M:Polarith.AI.Move.SteeringPercept.IsEqual(Polarith.AI.Move.SteeringPercept)">
            <summary>
            Compares the associated game object of an other <paramref name="percept"/> instance with the associated game
            object of this instance. An associated game object is an object which is used to receive the data of a
            percept.
            </summary>
            <param name="percept">The other percept to be compared.</param>
            <returns>
            <c>true</c> if both percepts are associated with the same game object, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Polarith.AI.Move.SteeringPercept.IsEqual(UnityEngine.GameObject)">
            <summary>
            Compares a <paramref name="gameObject"/> with the game object associated with this percept. An associated
            game object is an object which is used to receive the data of a percept.
            </summary>
            <param name="gameObject">The game object to be compared.</param>
            <returns><c>true</c> if both game object references are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Polarith.AI.Move.SteeringPercept.IsNearBounds(Polarith.AI.Move.BoundsType,UnityEngine.Vector3,System.Single)">
            <summary>
            Determines if the entity with the given <paramref name="position"/> and <paramref name="radius"/> is close
            enough to the bounds specified by <paramref name="type"/> for the bounds to be relevant. This might be
            useful, e.g., for the bounds behaviours (Pro only).
            </summary>
            <param name="type">The <see cref="T:Polarith.AI.Move.BoundsType"/> to be used.</param>
            <param name="position">The position to be checked.</param>
            <param name="radius">The radius to be checked.</param>
            <returns><c>true</c> if the bounds are relevant, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Polarith.AI.Move.SteeringPercept.GetBoundsSqrDistance(UnityEngine.Vector3,Polarith.AI.Move.BoundsType,Polarith.AI.Move.VectorProjectionType)">
            <summary>
            Returns the square distance to the bounds of this percept specified by the given <paramref name="bounds"/>.
            </summary>
            <param name="point">The reference position.</param>
            <param name="bounds">The <see cref="T:Polarith.AI.Move.BoundsType"/> to be used.</param>
            <param name="vectorProjection">Applies a vector projection to this calculation.</param>
            <returns>The square distance between the reference position and the closest point on the bounds.</returns>
        </member>
        <member name="M:Polarith.AI.Move.SteeringPercept.SetGameObject(UnityEngine.GameObject)">
            <summary>
            Sets the associated game object which is to be used for receiving data for this percept instance.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.PlanarOrientationType">
            <summary>
            Specifies how a <see cref="T:Polarith.AI.Move.Sensor"/> is oriented with respect to a virtual axis-aligned plane.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.PlanarOrientationType.PlaneXY">
            <summary>
            The Sensor is embedded within the x/y-plane, this might be useful for apps using Unity's 2D mode.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.PlanarOrientationType.PlaneXZ">
            <summary>
            The Sensor is embedded within the x/z-plane, this might be useful for apps using Unity's 3D mode.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.Receptor">
            <summary>
            Represents one sensorial element used to form an <see cref="T:Polarith.AI.Move.AIMSensor"/>. It is derived from <see
            cref="T:Polarith.AI.Criteria.Receptor`1"/> using <see cref="T:Polarith.AI.Move.Structure"/> as type for the structural element (the problem space
            representation of this receptor).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Receptor.Clone">
            <summary>
            Constructs a copy of this instance, especially deep copies the contained data (read only).
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.Sensor">
            <summary>
            This asset defines how an agent, having an <see cref="T:Polarith.AI.Move.AIMContext"/>, component samples its environment (back-end
            class). Every agent can have one associated sensor at a time . Derived <see cref="T:Polarith.AI.Criteria.Sensor`1"/> using <see
            cref="T:Polarith.AI.Move.Structure"/> as type for the structural element (for the problem space representation of the contained
            <see cref="T:Polarith.AI.Criteria.Receptor`1"/> instances). So, this class holds objects of type <see cref="T:Polarith.AI.Move.Receptor"/> which is a
            concrete <see cref="T:Polarith.AI.Criteria.IReceptor`1"/> implementation supporting Unity's serialization.
            <para/>
            Because the generic type of <see cref="T:Polarith.AI.Criteria.Sensor`1"/> gets hidden by inheritance, this abstract class is
            compatible to Unity's serialization pipeline so that it can implement the whole <see cref="T:Polarith.AI.Criteria.ISensor`1"/>
            interface. However, this class remains abstract due to the definition of the <see cref="P:Polarith.AI.Move.Sensor.Clone"/> method which is
            required for all further derived classes. Every concrete <see cref="T:Polarith.AI.Move.Sensor"/> needs to be copyable in order to
            support agents which require a cloned sensor instance at runtime.
            <para/>
            Attention, a sensor might be shared by multiple agents! Changing the data of a shared sensor at runtime is not
            thread-safe.
            <para/>
            Base back-end class of every derived <see cref="T:Polarith.AI.Move.AIMSensor"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Sensor.receptors">
            <summary>
            All contained receptor instances forming the shape of this sensor.
            </summary>
            <remarks>This is not <c>readonly</c> in order to support Unity's serialization.</remarks>
        </member>
        <member name="P:Polarith.AI.Move.Sensor.Clone">
            <summary>
            Constructs a copy of this instance (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Sensor.Rotation">
            <summary>
            The current rotation (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Sensor.InverseRotation">
            <summary>
            The inverse of the current rotation (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Sensor.ProjectionMode">
            <summary>
            The <see cref="T:Polarith.AI.Move.VectorProjectionType"/> derived from the internal projection settings.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Sensor.ReceptorCount">
            <summary>
            The number of contained receptors (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Sensor.Item(System.Int32)">
            <summary>
            Provides quick read-only access to a contained <see cref="T:Polarith.AI.Move.Receptor"/> instance.
            </summary>
            <param name="id">Specifies the receptor which is returned.</param>
            <returns>The receptor belonging to the specified <paramref name="id"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no receptor at the specified <paramref name="id"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.Sensor.AddReceptor">
            <summary>
            Constructs and adds a <see cref="T:Polarith.AI.Move.Receptor"/> instance into this sensor. The new receptor is attached to the
            sensor so that it gets the latest (and greatest) ID.
            </summary>
            <returns>The added <see cref="T:Polarith.AI.Move.Receptor"/> instance.</returns>
        </member>
        <member name="M:Polarith.AI.Move.Sensor.InsertReceptor(System.Int32)">
            <summary>
            Constructs and inserts a <see cref="T:Polarith.AI.Move.Receptor"/> instance into this sensor with the specified <paramref
            name="id"/>. This causes an adaption of all the receptor IDs which has been greater than <paramref
            name="id"/>.
            </summary>
            <param name="id">The ID the new receptor gets.</param>
            <returns>The inserted <see cref="T:Polarith.AI.Move.Receptor"/> instance.</returns>
        </member>
        <member name="M:Polarith.AI.Move.Sensor.GetReceptor(System.Int32)">
            <summary>
            Gets the <see cref="T:Polarith.AI.Move.Receptor"/> with the specified <paramref name="id"/>.
            </summary>
            <param name="id">The ID to get the corresponding receptor for.</param>
            <returns>The <see cref="T:Polarith.AI.Move.Receptor"/> instance with the specified <paramref name="id"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no receptor at the specified <paramref name="id"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.Sensor.RemoveReceptorAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Polarith.AI.Move.Receptor"/> with the specified <paramref name="id"/>.
            </summary>
            <param name="id">The ID to remove the corresponding receptor for.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no receptor at the specified <paramref name="id"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.Sensor.ClearReceptors">
            <summary>
            Removes all contained <see cref="T:Polarith.AI.Move.Receptor"/> instances.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.PlanarSensor">
            <summary>
            The <see cref="T:Polarith.AI.Move.PlanarSensor"/> is a special type of <see cref="T:Polarith.AI.Move.Sensor"/> with the assumption that there is a
            (virtual) ground in the world (back-end class). Within a planar sensor shape, each receptor has got two
            neighbours at maximum, one precessing and one succeeding neighbour. If any of these are not existent, the
            corresponding neighbour ID is -1. All contained receptors lay within a plane which correlates to the ground of
            the world.
            <para/>
            This class extends the methods of its base hierarchy so that they are suitable for the targeted planar case. In
            addition, it defines static methods for the construction of the most usual planar sensor shapes: <see
            cref="M:Polarith.AI.Move.PlanarSensor.CreateLine(System.Int32,System.Single,System.Single,Polarith.AI.Move.PlanarOrientationType)"/> and <see cref="M:Polarith.AI.Move.PlanarSensor.CreateCircle(System.Int32,System.Single,Polarith.AI.Move.PlanarOrientationType)"/>.
            <para/>
            Attention, a sensor might be shared by multiple agents! Changing the data of a shared sensor at runtime is not
            thread-safe.
            <para/>
            Back-end class of <see cref="T:Polarith.AI.Move.AIMPlanarSensor"/>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.PlanarSensor.Clone">
            <summary>
            Constructs a copy of this instance, especially deep copies the contained receptors (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.PlanarSensor.Rotation">
            <summary>
            The current rotation with respect to the set <see cref="P:Polarith.AI.Move.PlanarSensor.PlanarOrientation"/> (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.PlanarSensor.InverseRotation">
            <summary>
            The inverse of the current rotation with respect to the set <see cref="P:Polarith.AI.Move.PlanarSensor.PlanarOrientation"/> (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.PlanarSensor.PlanarOrientation">
            <summary>
            Specifies how this <see cref="T:Polarith.AI.Move.Sensor"/> is oriented with respect to a virtual axis-aligned plane.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.PlanarSensor.ProjectionMode">
            <summary>
            The <see cref="T:Polarith.AI.Move.VectorProjectionType"/> derived from the <see cref="T:Polarith.AI.Move.PlanarOrientationType"/>. Returns <see
            cref="F:Polarith.AI.Move.VectorProjectionType.PlaneXY"/> if <see cref="F:Polarith.AI.Move.PlanarOrientationType.PlaneXY"/>, <see
            cref="F:Polarith.AI.Move.PlanarOrientationType.PlaneXZ"/> otherwise.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.PlanarSensor.CreateLine(System.Int32,System.Single,System.Single,Polarith.AI.Move.PlanarOrientationType)">
            <summary>
            Constructs a sensor shape so that its receptors lay on a horizontal line pointing upwards.
            </summary>
            <param name="receptorCount">The number of receptors the created line shape gets.</param>
            <param name="width">The width of the created line shape.</param>
            <param name="positionY">The local y-position for each receptor, can be seen as vertical offset.</param>
            <param name="planarOrientation">
            Optionally, specifies how this sensor is oriented with respect to a virtual axis-aligned plane.
            </param>
            <returns>The constructed line shape.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="receptorCount"/> is 0.</exception>
        </member>
        <member name="M:Polarith.AI.Move.PlanarSensor.CreateCircle(System.Int32,System.Single,Polarith.AI.Move.PlanarOrientationType)">
            <summary>
            Constructs a radial sensor shape so that its receptors has got the same position (when the given <paramref
            name="radius"/> is 0) with their directions arranged in a circle pointing outside. Metaphorically, this
            looks like a comic sun with rays.
            </summary>
            <param name="receptorCount">The number of receptors the created circle shape gets.</param>
            <param name="radius">The radius of the created circle shape.</param>
            <param name="planarOrientation">
            Optionally, specifies how this sensor is oriented with respect to a virtual axis-aligned plane.
            </param>
            <returns>The constructed circle shape.</returns>
            <exception cref="T:System.DivideByZeroException">If <paramref name="receptorCount"/> is 0.</exception>
        </member>
        <member name="M:Polarith.AI.Move.PlanarSensor.AddReceptor">
            <summary>
            Constructs and adds a <see cref="T:Polarith.AI.Move.Receptor"/> instance into this sensor. The new receptor is attached to the
            sensor so that it gets the latest (and greatest) ID.
            <para/>
            In addition to the base method, this method prepare neighbours for the targeted planar case.
            </summary>
            <returns>The added <see cref="T:Polarith.AI.Move.Receptor"/> instance.</returns>
        </member>
        <member name="M:Polarith.AI.Move.PlanarSensor.InsertReceptor(System.Int32)">
            <summary>
            Constructs and inserts a <see cref="T:Polarith.AI.Move.Receptor"/> instance into this sensor with the specified <paramref
            name="id"/>. This causes an adaption of all the receptor IDs which has been greater than <paramref
            name="id"/>.
            <para/>
            In addition to the base method, this method prepare neighbours for the targeted planar case.
            </summary>
            <param name="id">The ID the new receptor gets.</param>
            <returns>The inserted <see cref="T:Polarith.AI.Move.Receptor"/> instance.</returns>
        </member>
        <member name="M:Polarith.AI.Move.PlanarSensor.GetNeighbourID(System.Int32,System.Int32)">
            <summary>
            Recursively gets the neighbour ID at the specified place <paramref name="targetNeighbour"/>. If negative, it
            looks for the appropriate preceding neighbour, and if positive, it looks for the appropriate succeeding
            neighbour.
            </summary>
            <param name="id">The ID of the receptor for starting the recursive neighbourhood walk-through.</param>
            <param name="targetNeighbour">The specified place to obtain the neighbour ID for.</param>
            <returns>
            The found neighbour ID is returned if there is one. Otherwise, if no neighbour at the place <paramref
            name="targetNeighbour"/> exists, -1 is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="id"/> does not point to a valid receptor.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.PlanarSensor.InitializeNeighbours(System.Boolean)">
            <summary>
            Rebuilds and updates the neighbour IDs for each receptor. Every receptor gets exactly two neighbours: the
            receptor having the preceding ID as first neighbour and the receptor having the succeeding ID as second
            neighbour.
            </summary>
            <param name="closed">
            <c>false</c>: the bounds neighbour IDs get a -1 at the outer border, <c>true</c>: the bounds neighbour IDs
            point cyclically to the first receptor respectively to the last receptor forming a closed sensor shape.
            </param>
        </member>
        <member name="T:Polarith.AI.Move.Structure">
            <summary>
            This is the structural element for all movement related classes. It is used as the problem space representation
            of the <see cref="T:Polarith.AI.Move.Receptor"/>, and thus, it defines in which space agents can operate. So for movement AI
            modules, this is the <see cref="T:UnityEngine.Vector3"/> space.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Structure.Position">
            <summary>
            Determines where the corresponding <see cref="T:Polarith.AI.Move.Receptor"/> has got its anchor.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Structure.Direction">
            <summary>
            Defines the direction the corresponding <see cref="T:Polarith.AI.Move.Receptor"/> is oriented towards.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Structure.Magnitude">
            <summary>
            Can be seen as weight of the corresponding <see cref="T:Polarith.AI.Move.Receptor"/> used for writing objective values to a
            <see cref="P:Polarith.AI.Move.Context.Problem"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Structure.Sensitivity">
            <summary>
            Influences how sensitive the corresponding <see cref="T:Polarith.AI.Move.Receptor"/> perceives the environment. So within a
            <see cref="T:Polarith.AI.Move.SteeringBehaviour"/>, it is used as threshold angle for deciding when to write objective values
            to a <see cref="P:Polarith.AI.Move.Context.Problem"/>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Structure.Lerp(Polarith.AI.Move.Structure,Polarith.AI.Move.Structure,System.Single,Polarith.AI.Move.Structure)">
            <summary>
            Linearly interpolates between two <see cref="T:Polarith.AI.Move.Structure"/> instances.
            <para/>
            Interpolates between the structures <paramref name="a"/> and <paramref name="b"/> by the interpolant
            <paramref name="t"/>. The parameter <paramref name="t"/> is clamped to the range [0, 1].
            <para/>
            When <paramref name="t"/><c>==0</c> results in <paramref name="a"/>. When <paramref name="t"/><c>==1</c>
            results in <paramref name="b"/>. When <paramref name="t"/><c>==0.5</c> results in the structure midway
            between <paramref name="a"/> and <paramref name="b"/>.
            </summary>
            <param name="a">The first structure to interpolate with.</param>
            <param name="b">The second structure to interpolate with.</param>
            <param name="t">The interpolant.</param>
            <param name="result">The structure in which the results are written in.</param>
            <exception cref="T:System.NullReferenceException">
            If either <paramref name="a"/>, <paramref name="b"/> or <paramref name="result"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.Structure.RoundVectors(System.Int32)">
            <summary>
            Rounds the <c>float</c> values of the contained <see cref="F:Polarith.AI.Move.Structure.Position"/> and <see cref="F:Polarith.AI.Move.Structure.Direction"/> vectors
            to a specified number of <paramref name="decimalPlaces"/>.
            </summary>
            <param name="decimalPlaces">The number of decimals places for rounding the vector data.</param>
        </member>
        <member name="M:Polarith.AI.Move.Structure.Copy(Polarith.AI.Move.Structure)">
            <summary>
            Deep copies the data of another <see cref="T:Polarith.AI.Move.Structure"/> instance into this instance.
            </summary>
            <param name="other">Another instance to copy the data into this instance for.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="other"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Polarith.AI.Move.ConstraintSolver">
            <summary>
            This solver is used for solving MCO problems in <see cref="T:Polarith.AI.Move.Context"/>. For that, it is derived of <see
            cref="T:Polarith.AI.Criteria.ConstraintSolver`1"/> using <see cref="T:System.Single"/> as type for the objective values.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.Context">
            <summary>
            <see cref="T:Polarith.AI.Move.Context"/> builds the foundation of the AI system by providing access to all important modules
            (back-end class). Derived <see cref="T:Polarith.AI.Criteria.Context`2"/> using <see cref="T:System.Single"/> as type for the
            objective values and <see cref="T:Polarith.AI.Move.Structure"/> as type for the structural element (for the contained <see
            cref="T:Polarith.AI.Move.Sensor"/>). It properly extends the <see cref="M:Polarith.AI.Criteria.Context`2.Evaluate"/> and <see
            cref="M:Polarith.AI.Criteria.Context`2.MakeDecision"/> methods for the specific types used.
            <para/>
            In addition to <see cref="T:Polarith.AI.Criteria.Context`2"/>, this derived class holds and provides additional
            information necessary for moving characters in 3D space.
            <para/>
            Back-end class of <see cref="T:Polarith.AI.Move.AIMContext"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Context.DecidedDirection">
            <summary>
            The evaluated direction in world coordinates, as against <see cref="P:Polarith.AI.Move.Context.Decision"/> only contains a version of
            this field in local coordinates.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Context.DecidedReceptorPosition">
            <summary>
            The evaluated position in world coordinates, as against <see cref="P:Polarith.AI.Move.Context.Decision"/> only contains a version of
            this field in local coordinates.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Context.LocalToWorldMatrix">
            <summary>
            Matrix that transforms a point from local space into world space.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Context.WorldToLocalMatrix">
            <summary>
            Matrix that transforms a point from world space into local space.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.Context.DeltaTime">
            <summary>
            The time which has been necessary to compute the latest frame.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Context.Problem">
            <summary>
            Holds objective values defining a MCO problem to be solved (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.Context.Decision">
            <summary>
            Container for storing the results from <see cref="M:Polarith.AI.Move.Context.Evaluate"/>. All contained vector information are in local
            coordinates (read only).
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Context.Evaluate">
            <summary>
            Processes the AI main loop for defining and solving the hold <see cref="P:Polarith.AI.Move.Context.Problem"/> writing the results into
            the <see cref="P:Polarith.AI.Move.Context.Decision"/>, therefore and for solving, the <see cref="M:Polarith.AI.Move.Context.MakeDecision"/> method gets called. To
            obtain objective values, the associated <see cref="T:Polarith.AI.Criteria.IBehaviour"/> instances are executed in series, whereby
            the hold <see cref="T:Polarith.AI.Move.Sensor"/> determines how an agent observes its environment.
            <para/>
            In addition to <see cref="M:Polarith.AI.Criteria.Context`2.Evaluate"/>, this method transform the made local <see
            cref="P:Polarith.AI.Move.Context.Decision"/> into world space.
            </summary>
            <exception cref="T:System.NullReferenceException">
            If the <see cref="M:Polarith.AI.Move.Context.BuildContext"/> method has not been called at least once.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.Context.BuildContext">
            <summary>
            Sets up this <see cref="T:Polarith.AI.Move.Context"/> instance based on the data which might have been already serialized
            through Unity. Furthermore, it sets all necessary references for the base AI system to work properly.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Context.GetEpsilonConstraint(System.Int32)">
            <summary>
            If the given objective <paramref name="index"/> is valid, the corresponding epsilon-constraint is returned.
            </summary>
            <param name="index">
            The objective index of the epsilon-constraint which is returned. The index needs to be greater than or equal
            to 0 and smaller than the objective count.
            </param>
            <returns>The epsilon-constraint for the objective with the specified <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective with the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.Context.IsObjectiveMinimized(System.Int32)">
            <summary>
            Determines whether the objective with the specified <paramref name="index"/> is minimized when calling <see
            cref="M:Polarith.AI.Move.Context.Evaluate"/>.
            </summary>
            <param name="index">The index of the targeted objective.</param>
            <returns><c>true</c> if the objective is to be minimized, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective with the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.Context.IsObjectiveNormalized(System.Int32)">
            <summary>
            Determines whether the objective with the specified <paramref name="index"/> is normalized when calling <see
            cref="M:Polarith.AI.Move.Context.Evaluate"/>.
            </summary>
            <param name="index">The index of the targeted objective.</param>
            <returns><c>true</c> if the objective is to be normalized, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective with the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.Context.IsObjectiveUnlimited(System.Int32)">
            <summary>
            Determines whether the objective with the specified <paramref name="index"/> is unlimited.
            </summary>
            <param name="index">The index of the targeted objective.</param>
            <returns><c>true</c> if the objective is unlimited, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective with the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.Context.SetEpsilonConstraint(System.Int32,System.Single)">
            <summary>
            If the given objective <paramref name="index"/> is valid, the corresponding epsilon-constraint is set to the
            specified <paramref name="value"/>.
            </summary>
            <param name="index">
            The objective index of the epsilon-constraint to be set. The index needs to be greater than or equal to 0
            and smaller than the objective count.
            </param>
            <param name="value">
            The new epsilon-constraint for the objective with the specified <paramref name="index"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective with the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.Context.SetObjectiveMinimized(System.Int32,System.Boolean)">
            <summary>
            Allows to set whether the objective with the specified <paramref name="index"/> is minimized when calling
            <see cref="M:Polarith.AI.Move.Context.Evaluate"/>.
            </summary>
            <param name="index">The index of the targeted objective.</param>
            <param name="minimized">If <c>true</c>, the objective is minimized. Otherwise, it is maximized.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective with the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.Context.SetObjectiveNormalized(System.Int32,System.Boolean)">
            <summary>
            Allows to set whether the objective with the specified <paramref name="index"/> is normalized when calling
            <see cref="M:Polarith.AI.Move.Context.Evaluate"/>.
            </summary>
            <param name="index">The index of the targeted objective.</param>
            <param name="normalized">Specifies whether the objective will be normalized.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective with the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.Context.SetObjectiveUnlimited(System.Int32)">
            <summary>
            Determines if the objective with the specified <paramref name="index"/> is unlimited. Only one objective can
            be unlimited at a time.
            </summary>
            <param name="index">The index of the targeted objective.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective with the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.Context.ClearObjectives">
            <summary>
            Removes all objectives including all values.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Context.ClearValues">
            <summary>
            Removes all values but preserves the number of objectives. Conceptually, this means we get a problem matrix
            with a certain number of (virtual) rows but without any column values.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Context.Reset">
            <summary>
            Resets this instance to default values.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Context.MakeDecision">
            <summary>
            This is the place for solving the given MCO <see cref="P:Polarith.AI.Move.Context.Problem"/> and collecting all information which are
            necessary for a complete <see cref="P:Polarith.AI.Move.Context.Decision"/>.
            <para/>
            Before solving, this method normalizes objectives if necessary, and after solving, it collects the
            appropriate data for setting up a complete decision.
            </summary>
            <exception cref="T:System.NullReferenceException">
            If the <see cref="M:Polarith.AI.Move.Context.BuildContext"/> method has not been called at least once.
            </exception>
        </member>
        <member name="T:Polarith.AI.Move.Decision">
            <summary>
            Class holding the results from <see cref="M:Polarith.AI.Move.Context.Evaluate"/>. It is derived from <see cref="T:Polarith.AI.Criteria.Decision`2"/> using <see cref="T:System.Single"/> as type for the objective values and <see cref="T:Polarith.AI.Move.Structure"/> as type
            for the problem space representation of the evaluated solution.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.IndicatorType">
            <summary>
            Defines the available visualization types for the <see cref="T:Polarith.AI.Move.AIMContextIndicator"/>. Each value represents a 
            specific shader.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.IndicatorType.Splat">
            <summary>
            Represents a point-based rendering method called splat rendering. A triangle is generated for each vertex in
            the geometry shader that is further improved using a texture. For each receptor, a vertex is generated, and
            the color of the triangle represents the current magnitude value. It is associated with the TriangleSplat
            shader.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.IndicatorType.Bar">
            <summary>
            Represents a point-based rendering method using the geometry shader. For each vertex, a quad is generated
            that is extruded based on the vertex color-magnitude. The color represents the current magnitude at the
            corresponding receptor. It is associated with the PointExtrude shader.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.Problem">
            <summary>
            Represents the multicriteria optimization (MCO) problem to be solved by the AI system, for instance by a <see
            cref="T:Polarith.AI.Move.ConstraintSolver"/>. It is derived from <see cref="T:Polarith.AI.Criteria.Problem`1"/> using <see cref="T:System.Single"/> as type for the
            objective values. In addition to <see cref="T:Polarith.AI.Criteria.Problem`1"/>, this derived class defines the method <see
            cref="M:Polarith.AI.Move.Problem.NormalizeObjective(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.Problem.NormalizeObjective(System.Int32)">
            <summary>
            Normalizes the objective at the specified <paramref name="index"/> so that its values are between <c>0f</c>
            and <c>1f</c>. If all the values are already between these normalized interval, nothing is done.
            </summary>
            <param name="index">Specifies the objective to be normalized.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective at the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="T:Polarith.AI.Move.SplatType">
            <summary>
            Defines the shape for the TriangleSplat shader and, thus, the texture used internally.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SplatType.Circle">
            <summary>
            A circle texture is used.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SplatType.Pentagon">
            <summary>
            A pentagon texture is used.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.SplatType.Ring">
            <summary>
            A ring texture is used.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMContextEvaluation">
            <summary>
            Abstract base class for implementing a custom <see cref="T:Polarith.AI.Move.AIMContext"/> update loop like its done by
            AIMPerformance (Pro only). It is used as an interface between the Free and Pro version of Polarith AI in order
            to determine the number of concrete <see cref="T:Polarith.AI.Move.AIMContextEvaluation"/> instances.
            <para/>
            Usually, there can only be one concrete instance of <see cref="T:Polarith.AI.Move.AIMContextEvaluation"/> in a scene. If such an
            instance is present, <see cref="M:Polarith.AI.Move.AIMContext.Update"/> returns before evaluating any context instances and
            updating the AI. This means that you have to implement a custom update routine including calls to <see
            cref="M:Polarith.AI.Move.AIMContext.Evaluate"/>. For that, it is possible to get all <see cref="T:Polarith.AI.Move.AIMContext"/> instances via <see
            cref="P:Polarith.AI.Move.AIMContext.NonThreadedComponents"/> and <see cref="P:Polarith.AI.Move.AIMContext.ThreadedComponents"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMContextEvaluation.instancesCount">
            <summary>
            Memorizes the current number of <see cref="T:Polarith.AI.Move.AIMContextEvaluation"/> instances.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContextEvaluation.InstancesCount">
            <summary>
            The number of <see cref="T:Polarith.AI.Move.AIMContextEvaluation"/> instances which are currently present within the scene
            (read only). This should usually be no more than 1.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMBehaviour">
            <summary>
            <see cref="T:Polarith.AI.Move.AIMBehaviour"/> is the abstract base class for all the behaviours in the Move module of Polarith AI
            (front-end component). Every <see cref="T:Polarith.AI.Move.AIMBehaviour"/> component have got a certain <see cref="T:System.Type"/>
            specifying the processing order of the back-end <see cref="T:Polarith.AI.Move.MoveBehaviour"/> within <see
            cref="M:Polarith.AI.Move.Context.Evaluate"/>.
            <para/>
            If the underlying <see cref="T:Polarith.AI.Move.MoveBehaviour"/> is thread-safe, this should be indicated through returning
            <c>true</c> for the <see cref="P:Polarith.AI.Move.AIMBehaviour.ThreadSafe"/> property in derived <see cref="T:Polarith.AI.Move.AIMBehaviour"/> components. An
            associated <see cref="T:Polarith.AI.Move.AIMContext"/> is thread-safe if all of its behaviours are thread-safe, too.
            <para/>
            Abstract base front-end component of every derived <see cref="T:Polarith.AI.Move.MoveBehaviour"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMBehaviour.Order">
            <summary>
            Specifies the execution order of this behaviour. If changed at runtime, the internal hold behaviour
            collections need to be re-sorted.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMBehaviour.Label">
            <summary>
            Name to identify this component, e.g. within a state machine.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMBehaviour.aimContext">
            <summary>
            Quick access reference for derived classes to the component of the associated movement AI context.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMBehaviour.context">
            <summary>
            Quick access reference for derived classes to the associated movement AI context.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMBehaviour.Behaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            <para/>
            Needs to be implemented by derived components.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMBehaviour.ThreadSafe">
            <summary>
            Determines whether the underlying back-end <see cref="T:Polarith.AI.Move.MoveBehaviour"/> is thread-safe (read only). An
            associated <see cref="T:Polarith.AI.Move.AIMContext"/> is thread-safe if all of its behaviours are thread-safe, too.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMBehaviour.Enabled">
            <summary>
            Determines whether this component is enabled.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMBehaviour.PrepareEvaluation">
            <summary>
            If necessary, re-registers this behaviour to its associated <see cref="T:Polarith.AI.Move.AIMContext"/> according to the
            currently set <see cref="F:Polarith.AI.Move.AIMBehaviour.Order"/>.
            <para/>
            Needs to be called within the main thread.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMBehaviour.Reset">
            <summary>
            Reset to default values.
            <para/>
            Reset is called when the user hits the Reset button in the Inspector's context menu or when adding the
            component the first time. This function is only called in editor mode. Reset is most commonly used to give
            good default values in the inspector.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMBehaviour.Awake">
            <summary>
            Awake is called when the script instance is being loaded.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMBehaviour.OnEnable">
            <summary>
            This method is called when the object becomes enabled and active.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMBehaviour.OnDisable">
            <summary>
            This method is called when the behaviour becomes disabled or inactive.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMBehaviour.OnDestroy">
            <summary>
            This method is called when the MonoBehaviour will be destroyed.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMBehaviour.OnValidate">
            <summary>
            This function is called when the script is loaded or a value is changed in the inspector (editor only).
            <para/>
            Use this function to validate the data of your MonoBehaviours. This can be used to ensure that when you
            modify data in an editor that the data stays within a certain range.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMBehaviour.GetDefaultTargetObjectives">
            <summary>
            Generates a list containing all objectives currently available within the associated <see cref="T:Polarith.AI.Move.Context"/>.
            <para/>
            This may be used as default parametrization for behaviours allowing the use of multiple target objectives,
            like for instance <see cref="T:Polarith.AI.Move.PlanarConvolution"/> and <see cref="T:Polarith.AI.Move.Retention"/>.
            </summary>
            <returns>
            A list containing all objectives currently available within the associated <see cref="T:Polarith.AI.Move.Context"/>.
            </returns>
        </member>
        <member name="M:Polarith.AI.Move.AIMBehaviour.CheckFirstAndCentralOrder(System.Type)">
            <summary>
            Should be used in <see cref="M:Polarith.AI.Move.AIMBehaviour.OnValidate"/> for derived classes to ensure that they are executed at first.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMBehaviour.CheckLastOrder(System.Type)">
            <summary>
            Should be used in <see cref="M:Polarith.AI.Move.AIMBehaviour.OnValidate"/> for derived classes to ensure that they are executed at last.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMPerceptBehaviour`1">
            <summary>
            This class extends the <see cref="T:Polarith.AI.Move.AIMBehaviour"/> so that it is able to work with <see cref="T:Polarith.AI.Move.IPercept`1"/>
            instances which are relevant for the associated agent (front-end component). Two possibilities are added for
            obtaining percept data to be processed. One way is to use the environment/perceiver/filter pipeline through the
            corresponding components <see cref="T:Polarith.AI.Move.AIMEnvironment"/>, <see cref="T:Polarith.AI.Move.AIMPerceiver`1"/> and <see
            cref="T:Polarith.AI.Move.AIMFilter`1"/>. The other possibility is given by the <see cref="F:Polarith.AI.Move.AIMPerceptBehaviour`1.GameObjects"/> list which takes custom
            targeted objects for extracting the appropriate percept data. The inputs of both gets combined and the result is
            handed over to <see cref="F:Polarith.AI.Move.PerceptBehaviour`1.Percepts"/> of the underlying derived back-end class. When the
            specified objects are needed by multiple behaviours and/or agents, let the agents perceive them via the
            environment/perceiver/filter pipeline to increase the overall performance.
            <para/>
            Derived <see cref="T:Polarith.AI.Move.AIMBehaviour"/> front-end base component of every derived <see cref="T:Polarith.AI.Move.PerceptBehaviour`1"/>.
            </summary>
            <typeparam name="T">
            Type of the percept holding extracted data, needs to implement <see cref="T:Polarith.AI.Move.IPercept`1"/> and to provide a
            constructor.
            </typeparam>
        </member>
        <member name="F:Polarith.AI.Move.AIMPerceptBehaviour`1.FilteredEnvironments">
            <summary>
            All environments to obtain the percepts for. A name correspond to an environment label.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMPerceptBehaviour`1.GameObjects">
            <summary>
            Allows to specify custom objects which should be processed by this behaviour. This is especially suitable
            for a few special targeted objects. When the specified objects are needed by multiple behaviours and/or
            agents, let the agents perceive them via the environment/perceiver/filter pipeline to increase the overall
            performance.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMPerceptBehaviour`1.PerceptBehaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            <para/>
            Needs to be implemented by derived components.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMPerceptBehaviour`1.Behaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            <para/>
            The returned reference is originally of type <see cref="T:Polarith.AI.Move.PerceptBehaviour`1"/>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMPerceptBehaviour`1.PrepareEvaluation">
            <summary>
            Fetches percept data from the filter which matches the percept type <typeparamref name="T"/> if there is one
            in the associated agent. In addition, it obtains percept data from <see cref="F:Polarith.AI.Move.AIMPerceptBehaviour`1.GameObjects"/> which has been
            directly specified within this component.
            <para/>
            Needs to be called from within the main thread.
            </summary>
            <exception cref="T:System.NullReferenceException">
            If <see cref="P:Polarith.AI.Move.AIMPerceptBehaviour`1.PerceptBehaviour"/> and/or its percepts are <c>null</c>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.AIMPerceptBehaviour`1.OnEnable">
            <summary>
            This method is called when the object becomes enabled and active.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMRadiusSteeringBehaviour">
            <summary>
            This class extends the <see cref="T:Polarith.AI.Move.AIMSteeringBehaviour"/> through adding a kind of local perception model based
            on an <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.InnerRadius"/> and <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.OuterRadius"/>
            (front-end component). This component is responsible for drawing appropriate gizmos in order to visualize the
            <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.InnerRadius"/> and <see cref="F:Polarith.AI.Move.RadiusSteeringBehaviour.OuterRadius"/> of the
            underlying back-end class within the scene view.
            <para/>
            Front-end component of the underlying <see cref="T:Polarith.AI.Move.RadiusSteeringBehaviour"/> class.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMRadiusSteeringBehaviour.innerRadiusGizmo">
            <summary>
            Sets up the visualization of the inner radius (editor only).
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMRadiusSteeringBehaviour.outerRadiusGizmo">
            <summary>
            Sets up the visualization of the outer radius (editor only).
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMRadiusSteeringBehaviour.innerCircleGizmo">
            <summary>
            Sets up the visualization of the inner radius for planar sensor shapes (editor only).
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMRadiusSteeringBehaviour.outerCircleGizmo">
            <summary>
            Sets up the visualization of the outer radius for planar sensor shapes (editor only).
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMRadiusSteeringBehaviour.#ctor">
            <summary>
            Constructs an <see cref="T:Polarith.AI.Move.AIMRadiusSteeringBehaviour"/> instance.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMRadiusSteeringBehaviour.RadiusSteeringBehaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            <para/>
            Needs to be implemented by derived components.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMRadiusSteeringBehaviour.SteeringBehaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            <para/>
            The returned reference is originally of type <see cref="T:Polarith.AI.Move.RadiusSteeringBehaviour"/>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMRadiusSteeringBehaviour.OnDrawGizmos">
            <summary>
            Draws gizmos for the inner radius and outer radius of the underlying back-end <see
            cref="T:Polarith.AI.Move.RadiusSteeringBehaviour"/> within the scene view (editor only).
            </summary>
            <exception cref="T:System.NullReferenceException">
            If <see cref="P:Polarith.AI.Move.AIMRadiusSteeringBehaviour.RadiusSteeringBehaviour"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Polarith.AI.Move.AIMSteeringBehaviour">
            <summary>
            <see cref="T:Polarith.AI.Move.AIMSteeringBehaviour"/> provides the base functionality for writing and mapping objective values
            (front-end component). Derived <see cref="T:Polarith.AI.Move.AIMPerceptBehaviour`1"/> front-end base component of every derived
            <see cref="T:Polarith.AI.Move.SteeringBehaviour"/>, whereby <see cref="T:Polarith.AI.Move.SteeringPercept"/> is used as percept type.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMSteeringBehaviour.velocityGizmo">
            <summary>
            Sets up the visualization of the velocity (editor only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMSteeringBehaviour.SteeringBehaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            <para/>
            Needs to be implemented by derived components.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMSteeringBehaviour.PerceptBehaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            <para/>
            The returned reference is originally of type <see cref="T:Polarith.AI.Move.SteeringBehaviour"/>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMSteeringBehaviour.PrepareEvaluation">
            <summary>
            Checks if the <see cref="F:Polarith.AI.Move.SteeringBehaviour.TargetObjective"/> is valid to use, and prints appropriate debug
            warnings if it is not.
            <para/>
            Needs to be called from within the main thread.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMSteeringBehaviour.OnValidate">
            <summary>
            This function is called when the script is loaded or a value is changed in the inspector (editor only).
            <para/>
            Use this function to validate the data of your MonoBehaviours. This can be used to ensure that when you
            modify data in an editor that the data stays within a certain range.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMSteeringBehaviour.OnDrawGizmos">
            <summary>
            Draws gizmos for the velocity information of the underlying back-end <see cref="T:Polarith.AI.Move.SteeringBehaviour"/>
            within the scene view (editor only).
            </summary>
            <exception cref="T:System.NullReferenceException">
            If <see cref="P:Polarith.AI.Move.AIMSteeringBehaviour.SteeringBehaviour"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Polarith.AI.Move.AIMPlanarConvolution">
            <summary>
            <see cref="T:Polarith.AI.Move.AIMPlanarConvolution"/> modifies an objective value based on its neighbours (front-end component).
            Front-end component of the underlying <see cref="T:Polarith.AI.Move.PlanarConvolution"/> class. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMPlanarConvolution.PlanarConvolution">
            <summary>
            The underlying back-end behaviour class.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMPlanarConvolution.Behaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMPlanarConvolution.ThreadSafe">
            <summary>
            Determines whether the underlying back-end class is thread-safe (read only). Returns always <c>true</c>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMPlanarConvolution.PrepareEvaluation">
            <summary>
            Checks if the <see cref="F:Polarith.AI.Move.SteeringBehaviour.TargetObjective"/> is valid to use and prints appropriate debug
            warnings if it is not.
            <para/>
            Needs to be called from within the main thread.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMPlanarConvolution.Reset">
            <summary>
            Reset to default values. The default parametrization is a 'Gaussian' kernel with a kernel size of three and
            a 'Sigma' of 0.7 for smoothing the objective values.
            <para/>
            Reset is called when the user hits the Reset button in the Inspector's context menu or when adding the
            component the first time. This function is only called in editor mode. Reset is most commonly used to give
            good default values in the inspector.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMPlanarConvolution.OnValidate">
            <summary>
            This function is called when the script is loaded or a value is changed in the inspector (editor only).
            <para/>
            Use this function to validate the data of your MonoBehaviours. This can be used to ensure that when you
            modify data in an editor that the data stays within a certain range.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMRetention">
            <summary>
            <see cref="T:Polarith.AI.Move.AIMRetention"/> is used to remember objective values for multiple frames (front-end component).
            Front-end component of the underlying <see cref="T:Polarith.AI.Move.Retention"/> class. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMRetention.Retention">
            <summary>
            The underlying back-end behaviour class.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMRetention.Behaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMRetention.ThreadSafe">
            <summary>
            Determines whether the underlying back-end class is thread-safe (read only). Returns always <c>true</c>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMRetention.PrepareEvaluation">
            <summary>
            Needs to be called within the main thread to prepare <see cref="M:Polarith.AI.Move.Context.Evaluate"/>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMRetention.Reset">
            <summary>
            Reset to default values.
            <para/>
            Reset is called when the user hits the Reset button in the Inspector's context menu or when adding the
            component the first time. This function is only called in editor mode. Reset is most commonly used to give
            good default values in the inspector.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMRetention.OnValidate">
            <summary>
            This function is called when the script is loaded or a value is changed in the inspector (editor only).
            <para/>
            Use this function to validate the data of your MonoBehaviours. This can be used to ensure that when you
            modify data in an editor that the data stays within a certain range.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMPlanarInterpolation">
            <summary>
            <see cref="T:Polarith.AI.Move.AIMPlanarInterpolation"/> finds the interpolation parameter for a possible better solution located
            between two receptors (front-end component). Front-end component of the underlying <see
            cref="T:Polarith.AI.Move.PlanarInterpolation"/> class. This behaviour is thread-safe. Only one single component can be
            attached to one <see cref="T:UnityEngine.GameObject"/> at a time.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMPlanarInterpolation.PlanarInterpolation">
            <summary>
            The underlying back-end behaviour class.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMPlanarInterpolation.Behaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMPlanarInterpolation.ThreadSafe">
            <summary>
            Determines whether the underlying back-end class is thread-safe (read only). Returns always <c>true</c>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMPlanarInterpolation.PrepareEvaluation">
            <summary>
            Needs to be called within the main thread to prepare <see cref="M:Polarith.AI.Move.Context.Evaluate"/>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMPlanarInterpolation.Reset">
            <summary>
            Reset to default values.
            <para/>
            Reset is called when the user hits the Reset button in the Inspector's context menu or when adding the
            component the first time. This function is only called in editor mode. Reset is most commonly used to give
            good default values in the inspector.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMPlanarInterpolation.OnValidate">
            <summary>
            This function is called when the script is loaded or a value is changed in the inspector (editor only).
            <para/>
            Use this function to validate the data of your MonoBehaviours. This can be used to ensure that when you
            modify data in an editor that the data stays within a certain range.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMReduction">
            <summary>
            <see cref="T:Polarith.AI.Move.AIMReduction"/> is intended to reduce the magnitudes of the <see cref="F:Polarith.AI.Move.Reduction.TargetObjective"/>
            under certain conditions (front-end component). Front-end component of the underlying <see
            cref="T:Polarith.AI.Move.Reduction"/> class. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMReduction.Reduction">
            <summary>
            The underlying back-end behaviour class.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMReduction.radiusGizmo">
            <summary>
            Sets up the visualization of the radius (editor only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMReduction.PerceptBehaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMReduction.ThreadSafe">
            <summary>
            Determines whether the underlying back-end class is thread-safe (read only). Returns always <c>true</c>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMReduction.PrepareEvaluation">
            <summary>
            Needs to be called within the main thread to prepare <see cref="M:Polarith.AI.Move.Context.Evaluate"/>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMReduction.Reset">
            <summary>
            Reset to default values.
            <para/>
            Reset is called when the user hits the Reset button in the Inspector's context menu or when adding the
            component the first time. This function is only called in editor mode. Reset is most commonly used to give
            good default values in the inspector.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMReduction.OnValidate">
            <summary>
            This function is called when the script is loaded or a value is changed in the inspector (editor only).
            <para/>
            Use this function to validate the data of your MonoBehaviours. This can be used to ensure that when you
            modify data in an editor that the data stays within a certain range.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMStabilization">
            <summary>
            <see cref="T:Polarith.AI.Move.AIMStabilization"/> increases the objective values along the movement direction of the agent
            (front-end component).
            <para/>
            Front-end component of the underlying <see cref="T:Polarith.AI.Move.Stabilization"/> class. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMStabilization.Stabilization">
            <summary>
            The underlying back-end behaviour class.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMStabilization.Behaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMStabilization.ThreadSafe">
            <summary>
            Determines whether the underlying back-end class is thread-safe (read only). Returns always <c>true</c>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMStabilization.PrepareEvaluation">
            <summary>
            Checks if the <see cref="F:Polarith.AI.Move.SteeringBehaviour.TargetObjective"/> is valid to use and prints appropriate debug
            warnings if it is not.
            <para/>
            Needs to be called from within the main thread.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMStabilization.Reset">
            <summary>
            Reset to default values.
            <para/>
            Reset is called when the user hits the Reset button in the Inspector's context menu or when adding the
            component the first time. This function is only called in editor mode. Reset is most commonly used to give
            good default values in the inspector.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMStabilization.OnValidate">
            <summary>
            This function is called when the script is loaded or a value is changed in the inspector (editor only).
            <para/>
            Use this function to validate the data of your MonoBehaviours. This can be used to ensure that when you
            modify data in an editor that the data stays within a certain range.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMStabilization.OnEnable">
            <summary>
            This method is called when the object becomes enabled and active.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMAdjust">
            <summary>
            <see cref="T:Polarith.AI.Move.AIMAdjust"/> fits an agent's orientation with those of its neighbours (front-end component).
            Front-end component of the underlying <see cref="T:Polarith.AI.Move.Adjust"/> class. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMAdjust.Adjust">
            <summary>
            The underlying back-end behaviour class.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMAdjust.RadiusSteeringBehaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMAdjust.ThreadSafe">
            <summary>
            Determines whether the underlying back-end class is thread-safe (read only). Returns always <c>true</c>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMAdjust.Reset">
            <summary>
            Reset to default values.
            <para/>
            Reset is called when the user hits the Reset button in the Inspector's context menu or when adding the
            component the first time. This function is only called in editor mode. Reset is most commonly used to give
            good default values in the inspector.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMAlign">
            <summary>
            <see cref="T:Polarith.AI.Move.AIMAlign"/> fits an agent's orientation to the orientation of one target percept (front-end
            component). Note, changes to the inherited <see cref="F:Polarith.AI.Move.AIMPerceptBehaviour`1.FilteredEnvironments"/> and <see
            cref="F:Polarith.AI.Move.AIMPerceptBehaviour`1.GameObjects"/> fields have no effect, since they are reset <see
            cref="M:Polarith.AI.Move.AIMAlign.PrepareEvaluation"/>.
            <para/>
            Front-end component of the underlying <see cref="T:Polarith.AI.Move.Align"/> class. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMAlign.Target">
            <summary>
            The <see cref="F:Polarith.AI.Move.SteeringBehaviour.ResultDirection"/> matches with the orientation of this game object.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMAlign.TargetRotation">
            <summary>
            The target position used by the agent to move towards, therefore, the <see cref="F:Polarith.AI.Move.AIMAlign.Target"/> must be
            <c>null</c>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMAlign.Align">
            <summary>
            The underlying back-end behaviour class.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMAlign.SteeringBehaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMAlign.ThreadSafe">
            <summary>
            Determines whether the underlying back-end class is thread-safe (read only). Returns always <c>true</c>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMAlign.PrepareEvaluation">
            <summary>
            This method is used in order to transfer the data from <see cref="F:Polarith.AI.Move.AIMAlign.Target"/> to <see
            cref="F:Polarith.AI.Move.AIMPerceptBehaviour`1.GameObjects"/>. Afterwards, <see
            cref="M:Polarith.AI.Move.AIMSteeringBehaviour.PrepareEvaluation"/> is called.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMArrive">
            <summary>
            <see cref="T:Polarith.AI.Move.AIMArrive"/> is used in order to modify the velocity of an agent if it reaches a target (front-end
            component). Front-end component of the underlying <see cref="T:Polarith.AI.Move.Arrive"/> class. This behaviour is
            thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMArrive.Target">
            <summary>
            The target game object used by the agent to adapt its velocity for.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMArrive.TargetPosition">
            <summary>
            The target position used by the agent to move towards, therefore, the <see cref="F:Polarith.AI.Move.AIMArrive.Target"/> must be
            <c>null</c>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMArrive.Arrive">
            <summary>
            The underlying back-end behaviour class.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMArrive.RadiusSteeringBehaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMArrive.ThreadSafe">
            <summary>
            Determines whether the underlying back-end class is thread-safe (read only). Returns always <c>true</c>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMArrive.PrepareEvaluation">
            <summary>
            This method is used in order to transfer the data from <see cref="F:Polarith.AI.Move.AIMArrive.Target"/> to <see
            cref="F:Polarith.AI.Move.AIMPerceptBehaviour`1.GameObjects"/>. Afterwards, <see
            cref="M:Polarith.AI.Move.AIMSteeringBehaviour.PrepareEvaluation"/> is called.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMArrive.OnDrawGizmos">
            <summary>
            Draws gizmos for the inner radius and outer radius of the underlying back-end <see
            cref="T:Polarith.AI.Move.RadiusSteeringBehaviour"/> within the scene view (editor only).
            </summary>
            <exception cref="T:System.NullReferenceException">
            If <see cref="P:Polarith.AI.Move.AIMArrive.RadiusSteeringBehaviour"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.AIMArrive.Reset">
            <summary>
            Reset to default values.
            <para/>
            Reset is called when the user hits the Reset button in the Inspector's context menu or when adding the
            component the first time. This function is only called in editor mode. Reset is most commonly used to give
            good default values in the inspector.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMAvoid">
            <summary>
            Active avoidance behaviour (front-end component). Objective magnitudes are generated based on a plane
            perpendicular towards percepts such that the agent prefers directions which can guide it around the object.
            Since a plane is used to generate the objective values, this behaviour can be used in general 3D scenarios (with
            every kind of 3D sensor).
            <para/>
            Front-end component of the underlying <see cref="T:Polarith.AI.Move.Avoid"/> class. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMAvoid.Avoid">
            <summary>
            The underlying back-end behaviour class.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMAvoid.PlaneGizmo">
            <summary>
            Sets up the visualization of the plane perpendicular to the obstacle (editor only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMAvoid.RadiusSteeringBehaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMAvoid.ThreadSafe">
            <summary>
            Determines whether the underlying back-end class is thread-safe (read only). Returns always <c>true</c>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMAvoid.OnDrawGizmos">
            <summary>
            Draws gizmos showing the gradient plane of the last updated percept within the scene view (editor only).
            </summary>
            <exception cref="T:System.NullReferenceException">If <see cref="F:Polarith.AI.Move.AIMAvoid.Avoid"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Polarith.AI.Move.AIMPlanarAvoid">
            <summary>
            Obsolete, use <see cref="T:Polarith.AI.Move.AIMAvoid"/> instead. <see cref="T:Polarith.AI.Move.AIMPlanarAvoid"/> is intended to simply avoid obstacles
            based on their center positions (front-end component). Front-end component of the underlying <see
            cref="T:Polarith.AI.Move.PlanarAvoid"/> class. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMPlanarAvoid.PlanarAvoid">
            <summary>
            The underlying back-end behaviour class.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMPlanarAvoid.RadiusSteeringBehaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMPlanarAvoid.ThreadSafe">
            <summary>
            Determines whether the underlying back-end class is thread-safe (read only). Returns always <c>true</c>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMPlanarAvoid.Reset">
            <summary>
            Reset to default values. Adapts the <see cref="F:Polarith.AI.Move.PlanarAvoid.Up"/> vector according to the <see
            cref="T:Polarith.AI.Move.VectorProjectionType"/> of the behaviour.
            <para/>
            Reset is called when the user hits the Reset button in the Inspector's context menu or when adding the
            component the first time. This function is only called in editor mode. Reset is most commonly used to give
            good default values in the inspector.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMEvade">
            <summary>
            <see cref="T:Polarith.AI.Move.AIMEvade"/> anticipates where the percept will be in the future and flees from this position
            (front-end component). Front-end component of the underlying <see cref="T:Polarith.AI.Move.Evade"/> class. This behaviour is
            thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMEvade.Evade">
            <summary>
            The underlying back-end behaviour class.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMEvade.RadiusSteeringBehaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMEvade.ThreadSafe">
            <summary>
            Determines whether the underlying back-end class is thread-safe (read only). Returns always <c>true</c>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMEvade.OnDrawGizmos">
            <summary>
            In addition to <see cref="M:Polarith.AI.Move.AIMRadiusSteeringBehaviour.OnDrawGizmos"/>, the <see
            cref="P:Polarith.AI.Move.Pursue.TargetPosition"/> is visualized (editor only).
            </summary>
            <exception cref="T:System.NullReferenceException">
            If <see cref="P:Polarith.AI.Move.AIMEvade.RadiusSteeringBehaviour"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Polarith.AI.Move.AIMFlee">
            <summary>
            <see cref="F:Polarith.AI.Move.AIMFlee.Flee"/> uses the opposing direction to the percept as target direction (front-end component).
            Front-end component of the underlying <see cref="T:Polarith.AI.Move.Flee"/> class. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMFlee.Flee">
            <summary>
            The underlying back-end behaviour class.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMFlee.RadiusSteeringBehaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMFlee.ThreadSafe">
            <summary>
            Determines whether the underlying back-end class is thread-safe (read only). Returns always <c>true</c>.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMFollow">
            <summary>
            By using <see cref="T:Polarith.AI.Move.AIMFollow"/> the agent follows one target independent on its distance to the agent
            (front-end component). Note, changes to the inherited <see cref="F:Polarith.AI.Move.AIMPerceptBehaviour`1.FilteredEnvironments"/>
            and <see cref="F:Polarith.AI.Move.AIMPerceptBehaviour`1.GameObjects"/> fields have no effect, since they are reset <see
            cref="M:Polarith.AI.Move.AIMFollow.PrepareEvaluation"/>.
            <para/>
            Front-end component of the underlying <see cref="T:Polarith.AI.Move.Follow"/> class. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMFollow.Target">
            <summary>
            The target game object used by the agent to move towards.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMFollow.TargetPosition">
            <summary>
            The target position used by the agent to move towards, therefore, the <see cref="F:Polarith.AI.Move.AIMFollow.Target"/> must be
            <c>null</c>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMFollow.Follow">
            <summary>
            The underlying back-end behaviour class.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMFollow.SteeringBehaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMFollow.ThreadSafe">
            <summary>
            Determines whether the underlying back-end class is thread-safe (read only). Returns always <c>true</c>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMFollow.PrepareEvaluation">
            <summary>
            When <see cref="M:Polarith.AI.Move.AIMSteeringBehaviour.PrepareEvaluation"/> is called, this method is used in order to
            transfer the data from <see cref="F:Polarith.AI.Move.AIMFollow.Target"/> or <see cref="F:Polarith.AI.Move.AIMFollow.TargetPosition"/> to <see
            cref="F:Polarith.AI.Move.AIMPerceptBehaviour`1.GameObjects"/>.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMOrbit">
            <summary>
            By using <see cref="T:Polarith.AI.Move.AIMOrbit"/> the agent will move along the orbit of one target percept (front-end component).
            Note, changes to the inherited <see cref="F:Polarith.AI.Move.AIMPerceptBehaviour`1.FilteredEnvironments"/> and <see
            cref="F:Polarith.AI.Move.AIMPerceptBehaviour`1.GameObjects"/> fields have no effect, since they are reset <see
            cref="M:Polarith.AI.Move.AIMOrbit.PrepareEvaluation"/>.
            <para/>
            Front-end component of the underlying <see cref="T:Polarith.AI.Move.Orbit"/> class. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMOrbit.Target">
            <summary>
            Determines the center of the orbit.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMOrbit.TargetPosition">
            <summary>
            The target position used by the agent to move towards, therefore, the <see cref="F:Polarith.AI.Move.AIMOrbit.Target"/> must be
            <c>null</c>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMOrbit.Orbit">
            <summary>
            The underlying back-end behaviour class.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMOrbit.SteeringBehaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMOrbit.ThreadSafe">
            <summary>
            Determines whether the underlying back-end class is thread-safe (read only). Returns always <c>true</c>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMOrbit.PrepareEvaluation">
            <summary>
            This method is used in order to transfer the data from <see cref="F:Polarith.AI.Move.AIMOrbit.Target"/> to <see
            cref="F:Polarith.AI.Move.AIMPerceptBehaviour`1.GameObjects"/>. Afterwards, <see
            cref="M:Polarith.AI.Move.AIMSteeringBehaviour.PrepareEvaluation"/> is called.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMOrbit.OnDrawGizmos">
            <summary>
            Visualizes the new target position along the orbit, the orbit itself and its maximum and minimum radius
            (editor only).
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMOrbit.Reset">
            <summary>
            Reset to default values.
            <para/>
            Reset is called when the user hits the Reset button in the Inspector's context menu or when adding the
            component the first time. This function is only called in editor mode. Reset is most commonly used to give
            good default values in the inspector.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMPursue">
            <summary>
            <see cref="T:Polarith.AI.Move.AIMPursue"/> anticipates where the percept will be in the future and takes this position as a target
            (front-end component). Front-end component of the underlying <see cref="T:Polarith.AI.Move.Pursue"/> class. This behaviour is
            thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMPursue.Pursue">
            <summary>
            The underlying back-end behaviour class.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMPursue.RadiusSteeringBehaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMPursue.ThreadSafe">
            <summary>
            Determines whether the underlying back-end class is thread-safe (read only). Returns always <c>true</c>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMPursue.OnDrawGizmos">
            <summary>
            In addition to <see cref="M:Polarith.AI.Move.AIMRadiusSteeringBehaviour.OnDrawGizmos"/>, the <see
            cref="P:Polarith.AI.Move.Pursue.TargetPosition"/> is visualized (editor only).
            </summary>
            <exception cref="T:System.NullReferenceException">
            If <see cref="P:Polarith.AI.Move.AIMPursue.RadiusSteeringBehaviour"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Polarith.AI.Move.AIMSeek">
            <summary>
            <see cref="T:Polarith.AI.Move.AIMSeek"/> uses the percept's position as the target (front-end component). Front-end component of
            the underlying <see cref="T:Polarith.AI.Move.Seek"/> class. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMSeek.Seek">
            <summary>
            The underlying back-end behaviour class.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMSeek.RadiusSteeringBehaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMSeek.ThreadSafe">
            <summary>
            Determines whether the underlying back-end class is thread-safe (read only). Returns always <c>true</c>.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMWander">
            <summary>
            A simple <see cref="P:Polarith.AI.Move.AIMWander.SteeringBehaviour"/> which is intended to let the agent wander around randomly (front-end
            component). Note, changes to the inherited <see cref="F:Polarith.AI.Move.AIMPerceptBehaviour`1.FilteredEnvironments"/> and <see
            cref="F:Polarith.AI.Move.AIMPerceptBehaviour`1.GameObjects"/> fields have no effect since they are reset in <see
            cref="M:Polarith.AI.Move.AIMWander.PrepareEvaluation"/>.
            <para/>
            Front-end component of the underlying <see cref="T:Polarith.AI.Move.Wander"/> class. This behaviour is thread-safe.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMWander.Wander">
            <summary>
            The underlying back-end behaviour class.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMWander.SteeringBehaviour">
            <summary>
            Polymorphic reference to the underlying back-end class (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMWander.ThreadSafe">
            <summary>
            Determines whether the underlying back-end class is thread-safe (read only). Returns always <c>true</c>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMWander.PrepareEvaluation">
            <summary>
            Resets perceived game objects.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMWander.Awake">
            <summary>
            Lazy instantiation of the static wanderTarget and initialization of the <see
            cref="P:Polarith.AI.Move.Wander.PlanarMappingType"/>.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMPhysicsController2D">
            <summary>
            A very simple and basic physics-based controller component suitable for the use in 2D projects. The purpose of
            this controller is to show the AI results under the assumption that there is physics involved for the movement
            so that the resulting AI outputs are smoothed over time through using forces. It rotates the up vector of the
            agent towards the direction decided by the AI and translates along. Furthermore, it is assumed that the
            character moves in parallel to the x/y-plane. Requires an <see cref="T:Polarith.AI.Move.AIMContext"/> and <see cref="T:UnityEngine.Rigidbody2D"/>
            component. If <see cref="F:Polarith.AI.Move.AIMPhysicsController2D.Context"/> or <see cref="F:Polarith.AI.Move.AIMPhysicsController2D.Body2D"/> are <c>null</c>, this controller attempts to get
            these components in the OnEnable method. If they are still <c>null</c>, the controller will stay disabled.
            <para/>
            Note, if there is also a <see cref="T:UnityEngine.Collider2D"/>, the applied forces behave differently. So all default
            parameterizations are made for an existing <see cref="T:UnityEngine.Collider2D"/>, whereby <see
            cref="P:UnityEngine.Rigidbody2D.gravityScale"/> is 0, <see cref="P:UnityEngine.Rigidbody2D.drag"/> is 5 and <see
            cref="P:UnityEngine.Rigidbody2D.angularDrag"/> is 10.
            <para/>
            For debugging purposes, this component is acceptable, but for production, you should definitely implement your
            own character controller which matches your application or game best.
            <para/>
            Only one single component can be attached to one <see cref="T:UnityEngine.GameObject"/> at a time.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMPhysicsController2D.Torque">
            <summary>
            Determines the base value of the applied force for rotating the character towards the decided direction.
            This value is highly dependent on the <see cref="P:UnityEngine.Rigidbody2D.angularDrag"/>, <see cref="P:UnityEngine.Rigidbody2D.mass"/>
            and the <see cref="T:UnityEngine.PhysicsMaterial2D"/> used by the involved <see cref="T:UnityEngine.Collider2D"/> instances.
            <para/>
            For the default value, you may use a <see cref="T:UnityEngine.Rigidbody2D"/> configuration with mass = 1, angular drag =
            10 and a default collider material.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMPhysicsController2D.Speed">
            <summary>
            Determines the base value specifying how fast the character moves. This value is highly dependent on the
            <see cref="P:UnityEngine.Rigidbody.drag"/>, <see cref="P:UnityEngine.Rigidbody2D.mass"/> and the <see cref="T:UnityEngine.PhysicsMaterial2D"/> used by
            the involved <see cref="T:UnityEngine.Collider2D"/> instances.
            <para/>
            For the default value, you may use a <see cref="T:UnityEngine.Rigidbody2D"/> configuration with mass = 1, drag = 5 and a
            default collider material.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMPhysicsController2D.ObjectiveAsSpeed">
            <summary>
            If set equal to or greater than 0, the evaluated AI decision value is multiplied to the <see cref="F:Polarith.AI.Move.AIMPhysicsController2D.Speed"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMPhysicsController2D.Context">
            <summary>
            The <see cref="T:Polarith.AI.Move.AIMContext"/> which provides the next movement direction that is applied to the <see
            cref="F:Polarith.AI.Move.AIMPhysicsController2D.Body2D"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMPhysicsController2D.Body2D">
            <summary>
            The <see cref="T:UnityEngine.Rigidbody"/> which is manipulated by this controller.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMPhysicsController">
            <summary>
            A very simple and basic physics-based controller component suitable for the use in 3D projects where the agent
            has a clear orientation to a ground plane. The purpose of this controller is to show the AI results under the
            assumption that there is physics involved for the movement so that the resulting AI outputs are smoothed over
            time through using forces. It rotates the forward vector of the agent towards the direction decided by the AI
            and translates along. Requires an <see cref="T:Polarith.AI.Move.AIMContext"/> and <see cref="T:UnityEngine.Rigidbody"/> component. If <see
            cref="F:Polarith.AI.Move.AIMPhysicsController.Context"/> or <see cref="F:Polarith.AI.Move.AIMPhysicsController.Body"/> are <c>null</c>, this controller attempts to get these components in the
            OnEnable method. If they are still <c>null</c>, the controller will stay disabled.
            <para/>
            For debugging purposes, this component is acceptable, but for production, you should definitely implement your
            own character controller which matches your application or game best.
            <para/>
            Only one single component can be attached to one <see cref="T:UnityEngine.GameObject"/> at a time.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMPhysicsController.Torque">
            <summary>
            Determines the base value of the applied force for rotating the character towards the decided direction.
            This value is highly dependent on the <see cref="P:UnityEngine.Rigidbody.angularDrag"/>, <see cref="P:UnityEngine.Rigidbody.mass"/> and
            the <see cref="T:UnityEngine.PhysicMaterial"/> used by the involved <see cref="T:UnityEngine.Collider"/> instances.
            <para/>
            For the default value, you may use a <see cref="T:UnityEngine.Rigidbody"/> configuration with mass = 1, angular drag = 5
            and a default collider material.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMPhysicsController.Speed">
            <summary>
            Determines the base value specifying how fast the character moves. This value is highly dependent on the
            <see cref="P:UnityEngine.Rigidbody.drag"/>, <see cref="P:UnityEngine.Rigidbody.mass"/> and the <see cref="T:UnityEngine.PhysicMaterial"/> used by the
            involved <see cref="T:UnityEngine.Collider"/> instances.
            <para/>
            For the default value, you may use a <see cref="T:UnityEngine.Rigidbody"/> configuration with mass = 1, drag = 1 and a
            default collider material.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMPhysicsController.ObjectiveAsSpeed">
            <summary>
            If set equal to or greater than 0, the evaluated AI decision value is multiplied to the <see cref="F:Polarith.AI.Move.AIMPhysicsController.Speed"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMPhysicsController.Mode">
            <summary>
            The <see cref="T:UnityEngine.ForceMode"/> which is applied to the <see cref="M:UnityEngine.Rigidbody.AddForce(UnityEngine.Vector3,UnityEngine.ForceMode)"/>
            method of the associated <see cref="F:Polarith.AI.Move.AIMPhysicsController.Body"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMPhysicsController.Context">
            <summary>
            The <see cref="T:Polarith.AI.Move.AIMContext"/> which provides the next movement direction that is applied to the <see
            cref="F:Polarith.AI.Move.AIMPhysicsController.Body"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMPhysicsController.Body">
            <summary>
            The <see cref="T:UnityEngine.Rigidbody"/> which gets manipulated by this controller.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMSimpleController2D">
            <summary>
            A very simple and basic character controller component suitable for the use in 2D projects. Its purpose is to
            show the direct output of the movement AI algorithms for debugging, whereby it rotates the up vector of the
            agent towards the direction decided by the AI and translates along. Furthermore, it is assumed that the
            character moves in parallel to the x/y-plane. Requires an <see cref="T:Polarith.AI.Move.AIMContext"/> component. If <see
            cref="F:Polarith.AI.Move.AIMSimpleController2D.Context"/> is <c>null</c>, this controller attempts to get these components in the OnEnable method. If
            they are still <c>null</c>, the controller is disabled.
            <para/>
            For debugging purposes, this component is acceptable, but for production, you should definitely implement your
            own character controller which matches your application or game best.
            <para/>
            Only one single component can be attached to one <see cref="T:UnityEngine.GameObject"/> at a time.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMSimpleController2D.Speed">
            <summary>
            Determines the base value specifying how fast the character moves.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMSimpleController2D.ObjectiveAsSpeed">
            <summary>
            If set equal to or greater than 0, the evaluated AI decision value is multiplied to the <see cref="F:Polarith.AI.Move.AIMSimpleController2D.Speed"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMSimpleController2D.Context">
            <summary>
            The <see cref="T:Polarith.AI.Move.AIMContext"/> which provides the next movement direction that is applied to the agent's <see
            cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMSimpleController">
            <summary>
            A very simple and basic character controller component suitable for the use in 3D projects. Its purpose is to
            show the direct output of the movement AI algorithms for debugging. Requires an <see cref="T:Polarith.AI.Move.AIMContext"/>
            component. If <see cref="F:Polarith.AI.Move.AIMSimpleController.Context"/> is <c>null</c>, this controller attempts to get these components in the
            OnEnable method. If they are still <c>null</c>, the controller is disabled.
            <para/>
            For debugging purposes, this component is acceptable, but for production, you should definitely implement your
            own character controller which matches your application or game best.
            <para/>
            Only one single component can be attached to one <see cref="T:UnityEngine.GameObject"/> at a time.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMSimpleController.Up">
            <summary>
            The direction which is used to rotate the forward direction according to the decision made by the <see
            cref="F:Polarith.AI.Move.AIMSimpleController.Context"/>.
            <para/>
            This vector needs to be perpendicular to an agent's forward direction, e.g., if the agent moves in the
            x/z-plane, this vector needs always to be (0, 1, 0).
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMSimpleController.Speed">
            <summary>
            Determines the base value specifying how fast the character moves.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMSimpleController.ObjectiveAsSpeed">
            <summary>
            If set equal to or greater than 0, the evaluated AI decision value is multiplied to the <see cref="F:Polarith.AI.Move.AIMSimpleController.Speed"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMSimpleController.Context">
            <summary>
            The <see cref="T:Polarith.AI.Move.AIMContext"/> which provides the next movement direction that is applied to the agent's <see
            cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMEnvironment">
            <summary>
            An <see cref="T:Polarith.AI.Move.AIMEnvironment"/> component serves as container holding <see cref="T:UnityEngine.GameObject"/> instances which
            belong to the movement AI world, and thus, can be perceived by (multiple) agents.
            <para/>
            Every <see cref="T:Polarith.AI.Move.AIMEnvironment"/> can be the input of a derived <see cref="T:Polarith.AI.Move.AIMPerceiver`1"/> component which
            extracts all the data necessary for the AI system. You can use the inbuilt <see cref="F:Polarith.AI.Move.AIMEnvironment.Label"/> to easily
            identify an <see cref="T:Polarith.AI.Move.AIMEnvironment"/> within the AI components of an agent. In addition, an environment can
            be marked <see cref="F:Polarith.AI.Move.AIMEnvironment.Static"/> to increase the AI performance for non-dynamic parts of a scene.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMEnvironment.Label">
            <summary>
            Identifies this environment within the AI components of an agent. Needs to be unique, otherwise, the agent
            components can only identify the first environment found with the specified label.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMEnvironment.Static">
            <summary>
            Determines if the contained <see cref="F:Polarith.AI.Move.AIMEnvironment.GameObjects"/> should be considered static by derived <see
            cref="T:Polarith.AI.Move.AIMPerceiver`1"/> components.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMEnvironment.Layers">
            <summary>
            Every <see cref="T:UnityEngine.GameObject"/> having one of the specified layers is belonging to the world which might be
            visible to (multiple) agents. Objects belonging to layers are updated at least once on every runtime start.
            If you wish to update these objects at runtime (not recommended), call <see cref="M:Polarith.AI.Move.AIMEnvironment.UpdateLayerGameObjects"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMEnvironment.GameObjects">
            <summary>
            Every instance within this list belongs to the world which might be visible to (multiple) agents.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMEnvironment.LayerGameObjects">
            <summary>
            Contains all objects belonging to the specified <see cref="F:Polarith.AI.Move.AIMEnvironment.Layers"/>. This list is updated at least once on
            every runtime start. If you wish to update these objects at runtime (not recommended), call <see
            cref="M:Polarith.AI.Move.AIMEnvironment.UpdateLayerGameObjects"/>.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMEnvironment.UpdateLayerGameObjects">
            <summary>
            Collects all objects belonging to the specified <see cref="F:Polarith.AI.Move.AIMEnvironment.Layers"/>. It is called at least once on every
            runtime start.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMFilter`1">
            <summary>
            <see cref="T:Polarith.AI.Move.AIMFilter`1"/> forwards the data of the percepts, holding by an <see cref="T:Polarith.AI.Move.AIMPerceiver`1"/>, to
            the behaviours of an agent. Components inheriting from this abstract base class take <see
            cref="T:Polarith.AI.Move.AIMPerceiver`1"/> components having a matching percept type <typeparamref name="T"/> as input. With
            these, the purpose of a filter is to provide access to percept data for <see cref="T:Polarith.AI.Move.AIMPerceptBehaviour`1"/>
            components to sample an agent's world (environment), whereby the data might simply be passed through or, like
            the component name suggests, filtered to fulfil the needs of the specific agent. For example, it would increase
            the performance to use a tree structure, e.g. a quadtree or octree, for obtaining percepts which might be
            relevant for an agent (and its
            behaviours) because they are close enough to be recognized. This would save the behaviours of an agent numerous
            of unnecessary percept iterations within the movement AI pipeline.
            <para/>
            There can only be one concrete <see cref="T:Polarith.AI.Move.AIMFilter`1"/> component attached to a <see cref="T:UnityEngine.GameObject"/> at a
            time.
            </summary>
            <typeparam name="T">
            Type of the percept holding extracted data, needs to implement <see cref="T:Polarith.AI.Move.IPercept`1"/> and to provide a
            constructor.
            </typeparam>
        </member>
        <member name="F:Polarith.AI.Move.AIMFilter`1.Self">
            <summary>
            Percept data of the agent itself (read only).
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMFilter`1.aimContext">
            <summary>
            Reference to the associated <see cref="T:Polarith.AI.Move.AIMContext"/> component.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMFilter`1.Perceiver">
            <summary>
            Reference to the input component of the extracted percept data (read only).
            <para/>
            Needs to be implemented by derived components.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMFilter`1.Enabled">
            <summary>
            Determines whether this component is enabled.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMFilter`1.GetPercepts(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{`0})">
            <summary>
            Obtains the extracted percepts of type <typeparamref name="T"/> belonging to the specified <paramref
            name="environments"/>.
            </summary>
            <param name="environments">The <see cref="F:Polarith.AI.Move.AIMEnvironment.Label"/> names of the desired environments.</param>
            <param name="percepts">The percepts obtained for the specified <paramref name="environments"/>.</param>
        </member>
        <member name="M:Polarith.AI.Move.AIMFilter`1.PrepareEvaluation">
            <summary>
            Needs to be called before <see cref="M:Polarith.AI.Move.Context.Evaluate"/> gets called within the main thread.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMFilter`1.Awake">
            <summary>
            Awake is called when the script instance is being loaded.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMFilter`1.OnDestroy">
            <summary>
            This method is called when the MonoBehaviour will be destroyed.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMPerceiver`1">
            <summary>
            This class and <see cref="T:Polarith.AI.Move.AIMFilter`1"/> are working together in order to provide the percept data collected by
            an <see cref="T:Polarith.AI.Move.AIMEnvironment"/> to the agent behaviours. Components inheriting from this abstract base class use
            <see cref="T:Polarith.AI.Move.AIMEnvironment"/> components as input and extract all data necessary for the given percept type
            <typeparamref name="T"/>. These extracted data can then be used by (multiple) agents with corresponding <see
            cref="T:Polarith.AI.Move.AIMPerceptBehaviour`1"/> components for sampling the AI world. Concerning an agent, an appropriate
            derived <see cref="T:Polarith.AI.Move.AIMFilter`1"/> component needs to be used in order to access the extracted percept data.
            <para/>
            For each specified environment, there is a corresponding entry within the <see cref="F:Polarith.AI.Move.AIMPerceiver`1.Percepts"/> dictionary
            holding all extracted percepts belonging to the specific environment which can be accessed by the associated
            <see cref="F:Polarith.AI.Move.AIMEnvironment.Label"/>. Furthermore, if an environment is considered <see
            cref="F:Polarith.AI.Move.AIMEnvironment.Static"/>, the percept data gets only extracted once. This would be optimal for never
            changing scene parts like fixed walls in order to increase performance.
            <para/>
            There can only be one concrete <see cref="T:Polarith.AI.Move.AIMPerceiver`1"/> component attached to a <see cref="T:UnityEngine.GameObject"/> at
            a time.
            </summary>
            <typeparam name="T">
            Type of the percept holding extracted data, needs to implement <see cref="T:Polarith.AI.Move.IPercept`1"/> and to provide a
            constructor.
            </typeparam>
        </member>
        <member name="F:Polarith.AI.Move.AIMPerceiver`1.Percepts">
            <summary>
            Extracted percept data corresponding to every specified environment which can be accessed by its <see
            cref="F:Polarith.AI.Move.AIMEnvironment.Label"/> (read only).
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMPerceiver`1.Environments">
            <summary>
            All environment components which should be considered for the extraction of the percept data.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMPerceiver`1.Update">
            <summary>
            Updates this perceiver instance. When this object is deactivated, it can be called manually in
            synchronization with a lock-step or deterministic client-side system for achieving AI determinism as well.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMPerceiver`1.PerceiveStatic">
            <summary>
            Forces the system to re-perceive static environments.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMPerceiver`1.PerceiveEnvironment(Polarith.AI.Move.AIMEnvironment,System.Collections.Generic.IList{`0})">
            <summary>
            Extracts all percept data relevant for the given percept type <typeparamref name="T"/>.
            </summary>
            <param name="environment">The environment to extract the percept data for.</param>
            <param name="percepts">The percept list for storing the extracted data.</param>
        </member>
        <member name="M:Polarith.AI.Move.AIMPerceiver`1.StartPerceiving">
            <summary>
            This method is called before any environments are being updated in a loop by <see
            cref="M:Polarith.AI.Move.AIMPerceiver`1.PerceiveEnvironment(Polarith.AI.Move.AIMEnvironment,System.Collections.Generic.IList{`0})"/>. Overwrite this method to inject custom code
            preparing the data extraction of percepts, this might be useful for the implementations of spatial
            structures like <see cref="T:Polarith.AI.Move.RegularGrid"/> to function properly.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMSteeringFilter">
            <summary>
            Derived <see cref="T:Polarith.AI.Move.AIMFilter`1"/> component using <see cref="T:Polarith.AI.Move.SteeringPercept"/> as type for the extracted
            percept data. An appropriate input component for obtaining extracted percept data is the <see
            cref="T:Polarith.AI.Move.AIMSteeringPerceiver"/> which can be specified directly through setting the <see
            cref="F:Polarith.AI.Move.AIMSteeringFilter.SteeringPerceiver"/> field. If the <see cref="F:Polarith.AI.Move.AIMSteeringFilter.SteeringPerceiver"/> is <c>null</c>, this component searches
            for an appropriate object specified by this tag using Unity's tag system.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMSteeringFilter.SteeringPerceiver">
            <summary>
            The input component to get extracted percept data for.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMSteeringFilter.ObjectTag">
            <summary>
            If the <see cref="F:Polarith.AI.Move.AIMSteeringFilter.SteeringPerceiver"/> is <c>null</c>, this component searches for an appropriate object
            specified by this tag using Unity's tag system.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMSteeringFilter.Range">
            <summary>
            Percepts within this range are made available to the behaviours by, whereby all values smaller than 0
            correspond to infinity. If the applied <see cref="F:Polarith.AI.Move.AIMSteeringFilter.SteeringPerceiver"/> uses no spatial structure, a negative
            value results in no distance check at all.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMSteeringFilter.Perceiver">
            <summary>
            Reference to the input component of the extracted percept data (read only).
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMSteeringFilter.GetPercepts(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Polarith.AI.Move.SteeringPercept})">
            <summary>
            Obtains the extracted percepts of type <see cref="T:Polarith.AI.Move.SteeringPercept"/> belonging to the specified <paramref
            name="environments"/>.
            </summary>
            <param name="environments">The <see cref="F:Polarith.AI.Move.AIMEnvironment.Label"/> names of the desired environments.</param>
            <param name="percepts">The percepts obtained for the specified <paramref name="environments"/>.</param>
            <exception cref="T:System.NullReferenceException">
            If <paramref name="environments"/> or <paramref name="percepts"/> are <c>null</c>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.AIMSteeringFilter.Awake">
            <summary>
            Awake is called when the script instance is being loaded.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMSteeringPerceiver">
            <summary>
            Derived <see cref="T:Polarith.AI.Move.AIMPerceiver`1"/> component using <see cref="T:Polarith.AI.Move.SteeringPercept"/> as type for extracting
            percept data. An appropriate filter for giving an agent access to the extracted percept data of this perceiver
            is the <see cref="T:Polarith.AI.Move.AIMSteeringFilter"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMSteeringPerceiver.SpatialPartition">
            <summary>
            Defines the method of spatial partitioning to be used for optimizing the performance while accessing percept
            data. If <see cref="F:Polarith.AI.Move.SpatialPartitionType.None"/> is set, there is no structure to accelerate percept
            queries. Then, every agent with an <see cref="T:Polarith.AI.Move.AIMSteeringFilter"/> iterates over all percepts and perform a
            simple distance check. Every other value corresponds to a specific structure for optimizing spatial access
            times significantly. This is especially useful for larger scenes having a lot of AI-relevant objects.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMSteeringPerceiver.RegularGrid">
            <summary>
            A <see cref="F:Polarith.AI.Move.AIMSteeringPerceiver.RegularGrid"/> structure used to perform spatial hashing for optimizing access to percept data.
            The grid can be adapted to the scene as necessary both for 2D or 3D. All percepts within the boundaries of
            the grid are processed. Note, this structure performs best if the scene contains a huge amount of objects
            that are more or less equally distributed in the scene. The perfect resolution of the grid dependents on the
            actual distribution and the level structure.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMSteeringPerceiver.Awake">
            <summary>
            Awakes this perceiver instance. When this object is deactivated, it can be called manually in
            synchronization with a lock-step or deterministic client-side system for achieving AI determinism as well.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMSteeringPerceiver.GetPerceptsInRange(UnityEngine.Vector3,System.Single,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Polarith.AI.Move.SteeringPercept})">
            <summary>
            Queries all <see cref="T:Polarith.AI.Move.SteeringPercept"/> instances in <paramref name="range"/> of the given <paramref
            name="point"/> and writes them to the <paramref name="percepts"/> list.
            </summary>
            <param name="point">The position in world coordinates for getting percepts in range.</param>
            <param name="range">
            Percepts which are within this range with respect to given <paramref name="point"/> are considered as
            relevant.
            </param>
            <param name="environments">
            Determines which <see cref="F:Polarith.AI.Move.AIMPerceiver`1.Environments"/> are to be iterated. If a label does not
            correspond to any environment, it is ignored.
            </param>
            <param name="percepts">Contains percepts in range after calling this method.</param>
        </member>
        <member name="M:Polarith.AI.Move.AIMSteeringPerceiver.PerceiveEnvironment(Polarith.AI.Move.AIMEnvironment,System.Collections.Generic.IList{Polarith.AI.Move.SteeringPercept})">
            <summary>
            Marks all corresponding percept data as non-received and sets their game object reference. Depending on the
            given <see cref="F:Polarith.AI.Move.AIMSteeringPerceiver.SpatialPartition"/>, this is either done directly or a spatial structure is updated such
            that the access in <see cref="M:Polarith.AI.Move.AIMSteeringPerceiver.GetPerceptsInRange(UnityEngine.Vector3,System.Single,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Polarith.AI.Move.SteeringPercept})"/>
            can be optimized.
            </summary>
            <param name="environment">The environment to extract the percept data for.</param>
            <param name="percepts">The percept list for storing the extracted data.</param>
            <exception cref="T:System.NullReferenceException">
            If <paramref name="environment"/> or <paramref name="percepts"/> are <c>null</c>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.AIMSteeringPerceiver.StartPerceiving">
            <summary>
            This method is called before any environments are being updated in a loop by <see
            cref="M:Polarith.AI.Move.AIMSteeringPerceiver.PerceiveEnvironment(Polarith.AI.Move.AIMEnvironment,System.Collections.Generic.IList{Polarith.AI.Move.SteeringPercept})"/>.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMSteeringTag">
            <summary>
            This component might be used to complete extracted <see cref="T:Polarith.AI.Move.SteeringPercept"/> data with customizable
            information. If attached to a <see cref="T:UnityEngine.GameObject"/> which should be perceived by the movement AI, the
            extracted <see cref="T:Polarith.AI.Move.SteeringPercept"/> for this <see cref="T:UnityEngine.GameObject"/> hold additional data given through the
            <see cref="T:Polarith.AI.Move.AIMSteeringTag"/>. Without this tag, <see cref="M:Polarith.AI.Move.SteeringPercept.Receive(UnityEngine.GameObject)"/> is only
            extracting information which might be there by default, e.g. an object's position, rotation, collider data and
            so forth. So one use of this component is to obtain a velocity for <see cref="T:UnityEngine.GameObject"/> instances which does
            not have got any rigidbody components. Furthermore, with the help of the <see cref="F:Polarith.AI.Move.AIMSteeringTag.Values"/> list, you can
            inject arbitrary <c>float</c> information into the corresponding extracted percept.
            <para/>
            There can only be one <see cref="T:Polarith.AI.Move.AIMSteeringTag"/> component attached to a <see cref="T:UnityEngine.GameObject"/> at a time.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMSteeringTag.Label">
            <summary>
            Custom identifier of this object.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMSteeringTag.Significance">
            <summary>
            Specifies the importance of the object for a behaviour algorithm, for instance a <see
            cref="T:Polarith.AI.Move.AIMSteeringBehaviour"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMSteeringTag.Radius">
            <summary>
            Specifies a custom radius for this object. This radius can be used by behaviours, for example, to
            approximate an object's bounding volume.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMSteeringTag.Values">
            <summary>
            Injects custom information into the corresponding extracted percept.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMSteeringTag.TrackVelocity">
            <summary>
            Determines if the velocity of this object should be tracked. If <c>true</c>, the corresponding extracted
            percept is having a valid velocity when there is no (non-kinematic) rigidbody.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMSteeringTag.UpdateLocalBounds">
            <summary>
            Determines if the perception pipeline should obtain the local bounds for this object for each percept
            update. The local bounds are given by the <see cref="F:Polarith.AI.Move.SteeringPercept.ColliderBoundsOBB"/> and <see
            cref="F:Polarith.AI.Move.SteeringPercept.VisualBounds"/>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMSteeringTag.IgnoreLocalBounds">
            <summary>
            If true, the perception pipeline will NOT obtain the local OOB for this object. This might be helpful, if
            you use physics models of your Rigidbody or Transform that have rotations beyond (-)180 degrees. You
            don't need this option in common scenarios. Note that you can receive them once and disable the updates 
            afterwards.
            For more information have a look at our <a href="https://github.com/Polarith/AI/issues/23">GitHub</a>.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMSteeringTag.Velocity">
            <summary>
            Holds the current velocity if it should be tracked.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMSensor">
            <summary>
            This asset defines how an agent, having an <see cref="T:Polarith.AI.Move.AIMContext"/>, component samples its environment
            (front-end component). Every agent can have one associated sensor at a time . Attention, a sensor might be
            shared by multiple agents! Changing the data of a shared sensor at runtime is not thread-safe.
            <para/>
            Abstract base front-end asset of every derived <see cref="T:Polarith.AI.Move.Sensor"/> class.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMSensor.Sensor">
            <summary>
            The contained sensor data (read only).
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMPlanarSensor">
            <summary>
            The <see cref="T:Polarith.AI.Move.AIMPlanarSensor"/> is a special type of <see cref="T:Polarith.AI.Move.AIMSensor"/> with the assumption that there is
            a (virtual) ground in the world (front-end component). Attention, a sensor might be shared by multiple agents!
            Changing the data of a shared sensor at runtime is not thread-safe.
            <para/>
            Front-end component of the underlying <see cref="T:Polarith.AI.Move.PlanarSensor"/> class.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMPlanarSensor.PlanarSensor">
            <summary>
            The serialized sensor data.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMPlanarSensor.Sensor">
            <summary>
            The contained sensor data (read only).
            <para/>
            Polymorphic base type reference on the concrete <see cref="F:Polarith.AI.Move.AIMPlanarSensor.PlanarSensor"/>.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMContext">
            <summary>
            <see cref="T:Polarith.AI.Move.AIMContext"/> builds the foundation of the AI system by providing access to all important modules
            (front-end component). Every <see cref="T:UnityEngine.GameObject"/> having this component becomes a moving agent controlled by
            the Polarith AI. This component enables you to control the general AI configuration right from the inspector,
            for example, how much objectives the agent should have, if the objectives should be normalized or minimized and
            many other settings. In addition, it holds and visualizes all environmental data sampled through active <see
            cref="T:Polarith.AI.Move.AIMBehaviour"/> components. With the help of this data, the <see cref="T:Polarith.AI.Move.AIMContext"/> executes all the
            algorithms necessary to evaluate the world of its agent and to find the best decision/solution for the current
            movement situation. The made decision can directly be obtained via properties like <see
            cref="P:Polarith.AI.Move.AIMContext.DecidedDirection"/> and <see cref="P:Polarith.AI.Move.AIMContext.DecidedValues"/> and so forth.
            <para/>
            By default, an <see cref="T:Polarith.AI.Move.AIMContext"/> component processes everything within Unity's update method, or, if a
            certain <see cref="F:Polarith.AI.Move.AIMContext.UpdateFrequency"/> greater than 0 is specified, it uses its own coroutine for updating. When
            you set <see cref="F:Polarith.AI.Move.AIMContext.Threaded"/> to <c>true</c> and there is an AIMPerformance component (Pro only) within the
            scene, the evaluation of all <see cref="T:Polarith.AI.Move.AIMContext"/> components which are <see cref="F:Polarith.AI.Move.AIMContext.Threaded"/> and <see
            cref="P:Polarith.AI.Move.AIMContext.ThreadSafe"/> are distributed equally over the configured sub-threads where they get evaluated in
            parallel. An <see cref="T:Polarith.AI.Move.AIMContext"/> is considered <see cref="P:Polarith.AI.Move.AIMContext.ThreadSafe"/> if all of its associated <see
            cref="F:Polarith.AI.Move.AIMContext.Behaviours"/> are also thread-safe. Through multithreading, the overall system might run about two to
            three times faster than without multithreading. Of course, this mainly depends on the number of agents, active
            behaviours and the number of perceived objects per agent. Multithreading performs best on large-scale scenes
            which have got hundreds of agents.
            <para/>
            Furthermore, this component provides you with a lot of methods to quickly access and modify the underlying data,
            e.g. <see cref="M:Polarith.AI.Move.AIMContext.AddObjective(System.Boolean,System.Boolean,System.Single,System.Boolean)"/>, <see cref="M:Polarith.AI.Move.AIMContext.GetObjective(System.Int32)"/> and so forth. Note,
            you can achieve the same through modifying the data directly using the context object hierarchy, e.g. <see
            cref="M:Polarith.AI.Criteria.Problem`1.AddObjective(System.Boolean)"/> or, <see cref="M:Polarith.AI.Criteria.Problem`1.GetObjective(System.Int32)"/> within <see
            cref="P:Polarith.AI.Move.AIMContext.Context"/>.
            <para/>
            Front-end component of the underlying <see cref="T:Polarith.AI.Move.Context"/> class. Only one single component can be
            attached to one <see cref="T:UnityEngine.GameObject"/> at a time.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMContext.EvaluationPreparers">
            <summary>
            Contains references of instances which need to prepare certain things before <see cref="M:Polarith.AI.Move.Context.Evaluate"/>
            must be called. This should almost be everything concerning the Unity scripting API which is not
            thread-safe, for example, the access to Unity reference types, i.e. classes (read only).
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMContext.Behaviours">
            <summary>
            All associated <see cref="T:Polarith.AI.Move.AIMBehaviour"/> components which are attached on the <see cref="T:UnityEngine.GameObject"/> of
            this agent (read only).
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMContext.UpdateFrequency">
            <summary>
            Specifies how often the AI system should update this agent per second. If set to 0, the agent gets updated
            within Unity's update method, as against if greater than 0, it uses its own coroutine for updating.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMContext.Threaded">
            <summary>
            Specifies if this movement AI context should be evaluated in parallel to other existing agents. This does
            only function if this <see cref="T:Polarith.AI.Move.AIMContext"/> is <see cref="P:Polarith.AI.Move.AIMContext.ThreadSafe"/> and if there is an AIMPerformance
            component (Pro only) within the scene to handle the multithreading properly.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMContext.SensorShared">
            <summary>
            If set to <c>false</c>, this agent clones the associated <see cref="F:Polarith.AI.Move.AIMContext.Sensor"/> on start so that it can safely
            be manipulated at runtime without disturbing other agents having the same sensor specified in its inspector.
            If it is cloned, this only concerns <see cref="P:Polarith.AI.Criteria.Context`2.Sensor"/> in the back-end.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMContext.Sensor">
            <summary>
            The currently used sensor asset which determines how this agent observes the world.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMContext.BehaviourSortRequired">
            <summary>
            If <c>true</c>, this component re-sorts all known <see cref="F:Polarith.AI.Move.AIMContext.Behaviours"/> to match the specified <see
            cref="P:Polarith.AI.Criteria.CriteriaBehaviour.Order"/> during the next <see cref="M:Polarith.AI.Move.AIMContext.PrepareEvaluation"/> call.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.AIMContext.ThreadSafetyCheckRequired">
            <summary>
            Indicates whether this instance needs to re-check all of the associated <see cref="F:Polarith.AI.Move.AIMContext.Behaviours"/> for
            thread-safety to figure out if is <see cref="P:Polarith.AI.Move.AIMContext.ThreadSafe"/> itself. This might only be required if there
            where changes made concerning the registered <see cref="F:Polarith.AI.Move.AIMContext.Behaviours"/>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContext.ThreadedComponents">
            <summary>
            Contains all <see cref="T:Polarith.AI.Move.AIMContext"/> instances corresponding to the <see cref="P:Polarith.AI.Move.AIMContext.ThreadedContexts"/> which
            are suitable for multithreading (read only). Used by AIMPerformance (Pro only) to approach multithreading.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContext.NonThreadedComponents">
            <summary>
            Contains all <see cref="T:Polarith.AI.Move.AIMContext"/> instances that are not suitable for multithreading (read only). Used
            by AIMPerformance (Pro only) to optimize the updates of non-multithreaded agents.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContext.ThreadedContexts">
            <summary>
            Contains all <see cref="T:Polarith.AI.Move.Context"/> instances corresponding to the <see cref="P:Polarith.AI.Move.AIMContext.ThreadedComponents"/>
            which are suitable for multithreading (read only). Used by AIMPerformance (Pro only) to approach
            multithreading.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContext.Context">
            <summary>
            The underlying back-end class representing the movement AI context (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContext.ObjectiveCount">
            <summary>
            The number of objectives (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContext.ValueCount">
            <summary>
            The number of values per objective (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContext.DecidedValues">
            <summary>
            The objective values of the current decision made by the movement AI system (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContext.DecidedDirection">
            <summary>
            The result direction of the current decision made by the movement AI system (world coordinates, read only).
            <para/>
            This is the relevant direction for the agent to move towards and therefore the most important part of the
            made decision. Note that the magnitude of this vector is always 1. For an appropriate magnitude value use
            <see cref="P:Polarith.AI.Move.AIMContext.DecidedMagnitude"/>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContext.LocalDecidedDirection">
            <summary>
            The <see cref="P:Polarith.AI.Move.AIMContext.DecidedDirection"/> in local coordinates (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContext.DecidedMagnitude">
            <summary>
            The magnitude of the winning sensor receptor corresponding to the decision made by the movement AI system.
            (read only).
            <para/>
            The magnitude of a receptor is a weight determining how important a receptor is within the whole sensor.
            This value might be used as an indicator for implementing a controller. For instance, a receptor that was
            given a low weight because it points backwards might result in a different movement than a receptor with a
            high magnitude pointing forwards.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContext.DecidedReceptorPosition">
            <summary>
            The position of the winning sensor receptor corresponding to the decision made by the movement AI system
            (world coordinates, read only).
            <para/>
            Note, this vector must not be interpreted as the position where the agent should move to.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContext.LocalDecidedReceptorPosition">
            <summary>
            The <see cref="P:Polarith.AI.Move.AIMContext.DecidedReceptorPosition"/> in local coordinates (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContext.DecidedReceptorSensitivity">
            <summary>
            The sensitivity of the winning sensor receptor corresponding to the decision made by the movement AI system.
            (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContext.ThreadSafe">
            <summary>
            Indicates whether this <see cref="T:Polarith.AI.Move.AIMContext"/> instance is suitable for multithreading (read only).
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContext.SelfObject">
            <summary>
            Can be used to receive the self percept data of this agent. This should be the object having a rigidbody and
            maybe a perception tag etc. attached to it. The self percept data is used by every behaviour and the
            perception pipeline.
            <para/>
            If this object is set to <c>null</c>, the game object of this component is returned.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContext.ObjectiveLabels">
            <summary>
            Returns a list containing labels which can be used to identify objectives instead of using indices.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.BuildContext">
            <summary>
            Prepares the underlying <see cref="T:Polarith.AI.Move.Context"/> instance to be used, and if requested, clones the
            associated <see cref="F:Polarith.AI.Move.AIMContext.Sensor"/> asset.
            <para/>
            This method is <c>public</c> so that AIMPerformance (Pro only) can call it right when it is needed.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.Evaluate">
            <summary>
            In most cases, this method must not be manually called at all because the system does that automatically.
            But if you want to achieve a deterministic AI approach and you derived from <see
            cref="T:Polarith.AI.Move.AIMContextEvaluation"/> to disable automatic AI updates, then you need to manually call this method by
            all means to get the AI working. For achieving true determinism, you need to make sure that the whole world
            which can be perceived by the AI is deterministic as well. This can be done by, for example, perceiving the
            AI world with <see cref="M:Polarith.AI.Move.AIMSteeringPerceiver.Awake"/> (for initialization) followed by calls to <see
            cref="M:Polarith.AI.Move.AIMPerceiver`1.Update"/> within the main loop in synchronization with a lock-step or deterministic
            client-side system. Then, this method needs to be called in synchronization with the same lock-step or
            deterministic client-side system as well for achieving deterministic AI updates.
            <para/>
            Note that behaviours utilizing Unity's pathfinding like AIMUnityPathfinding in combination with
            AIMFollowWaypoints can never be guaranteed to be deterministic due to its very nature, as against our pure
            steering algorithms are. If you want deterministic client-side pathfinding, you need to find or implement a
            custom solution, but you can easily make it compatible to AIMFollowWaypoints by inheriting from
            AIMPathConnector.
            <para/>
            This method calls <see cref="M:Polarith.AI.Move.AIMContext.PrepareEvaluation"/>, <see cref="M:Polarith.AI.Move.Context.Evaluate"/>, <see
            cref="M:Polarith.AI.Move.AIMContext.ObtainEvaluatedResults"/> and <see cref="M:Polarith.AI.Move.AIMContext.UpdateIndicator"/> right one after another.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.PrepareEvaluation">
            <summary>
            Updates everything which is necessary before <see cref="M:Polarith.AI.Move.Context.Evaluate"/> can be called. So it handles
            internal states, fetches all required data, and most important, calls <see
            cref="M:Polarith.AI.Move.IEvaluationPreparer.PrepareEvaluation"/> for all available <see cref="F:Polarith.AI.Move.AIMContext.EvaluationPreparers"/>.
            <para/>
            This method is <c>public</c> so that AIMPerformance (Pro only) can call it right when it is needed.
            <para/>
            Needs to be called from within the main thread.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.ObtainEvaluatedResults">
            <summary>
            This method needs to be called in order to get the evaluated results from the AI back-end into this
            front-end component so that the corresponding properties like <see cref="P:Polarith.AI.Move.AIMContext.DecidedDirection"/> and <see
            cref="P:Polarith.AI.Move.AIMContext.DecidedValues"/> are updated to the latest results.
            <para/>
            This method should be called after the context evaluation is finished.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.AddObjective(System.Boolean,System.Boolean,System.Single,System.Boolean)">
            <summary>
            Adds an objective (one row to the problem matrix).
            </summary>
            <param name="minimized">
            Specifies whether the added objective should be considered for minimization or maximization.
            </param>
            <param name="normalized">Specifies whether the objective will be normalized.</param>
            <param name="constraint">Specifies the epsilon constraint for the objective.</param>
            <param name="unlimited">
            Specifies if the objective is unlimited. Only one objective can be unlimited.
            </param>
            <returns>Read-only reference to the added objective.</returns>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.AddValues(System.Single)">
            <summary>
            Adds a value to every objective (one column to the problem matrix). For each objective, the same given
            <paramref name="value"/> is used.
            </summary>
            <param name="value">The value which is added to every objective.</param>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.AddValues(System.Single[])">
            <summary>
            Adds a value to every objective (one column to the problem matrix). For each objective, the specific value
            at the corresponding array index in <paramref name="values"/> is used.
            </summary>
            <param name="values">The values to be added.</param>
            <exception cref="T:System.InvalidOperationException">
            If the length of <paramref name="values"/> is not equal to the objective count.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.GetObjective(System.Int32)">
            <summary>
            Gets the objective (problem matrix row) belonging to the specified <paramref name="index"/>. Access is
            read-only.
            </summary>
            <param name="index">The index to get the corresponding objective for.</param>
            <returns>The objective belonging to the specified <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective at the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.GetValue(System.Int32,System.Int32)">
            <summary>
            Gets an objective value (single element of the problem matrix).
            </summary>
            <param name="objectiveIndex">The index of the targeted objective (row).</param>
            <param name="valueIndex">The index of the targeted objective value (column).</param>
            <returns>The requested value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no value at the specified <paramref name="objectiveIndex"/> and/or <paramref
            name="valueIndex"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.GetEpsilonConstraint(System.Int32)">
            <summary>
            If the given objective <paramref name="index"/> is valid, the corresponding epsilon-constraint is returned.
            </summary>
            <param name="index">
            The objective index of the epsilon-constraint which is returned. The index needs to be greater than or equal
            to 0 and smaller than the objective count.
            </param>
            <returns>The epsilon-constraint for the objective with the specified <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective with the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.IsObjectiveMinimized(System.Int32)">
            <summary>
            Determines if an objective is considered to be minimized or maximized.
            </summary>
            <param name="index">Specifies the objective.</param>
            <returns><c>true</c> if the objective is to be minimized, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective at the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.IsObjectiveNormalized(System.Int32)">
            <summary>
            Determines whether the objective with the specified <paramref name="index"/> is normalized when calling <see
            cref="M:Polarith.AI.Move.Context.Evaluate"/>.
            </summary>
            <param name="index">The index of the targeted objective.</param>
            <returns><c>true</c> if the objective is to be normalized, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective with the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.IsObjectiveUnlimited(System.Int32)">
            <summary>
            Determines whether the objective with the specified <paramref name="index"/> is unlimited.
            </summary>
            <param name="index">The index of the targeted objective.</param>
            <returns><c>true</c> if the objective is unlimited, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective with the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.SetValue(System.Int32,System.Int32,System.Single)">
            <summary>
            Sets a value (single element of the problem matrix).
            </summary>
            <param name="objectiveIndex">The index of the targeted objective (row).</param>
            <param name="valueIndex">The index of the targeted objective value (column).</param>
            <param name="value">The value to be set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no value at the specified <paramref name="objectiveIndex"/> and/or <paramref
            name="valueIndex"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.SetEpsilonConstraint(System.Int32,System.Single)">
            <summary>
            If the given objective <paramref name="index"/> is valid, the corresponding epsilon-constraint is set to the
            specified <paramref name="value"/>.
            </summary>
            <param name="index">
            The objective index of the epsilon-constraint to be set. The index needs to be greater than or equal to 0
            and smaller than the objective count.
            </param>
            <param name="value">
            The new epsilon-constraint for the objective with the specified <paramref name="index"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective with the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.SetObjectiveMinimized(System.Int32,System.Boolean)">
            <summary>
            Specifies if an objective is considered to be minimized or maximized.
            </summary>
            <param name="index">Specifies the objective.</param>
            <param name="minimized"><c>true</c> if the objective is to be minimized, <c>false</c> otherwise.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective at the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.SetObjectiveNormalized(System.Int32,System.Boolean)">
            <summary>
            Allows to set whether the objective with the specified <paramref name="index"/> is normalized when calling
            <see cref="M:Polarith.AI.Move.Context.Evaluate"/>.
            </summary>
            <param name="index">The index of the targeted objective.</param>
            <param name="normalized">Specifies whether the objective will be normalized.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective with the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.SetObjectiveUnlimited(System.Int32)">
            <summary>
            Determines if the objective with the specified <paramref name="index"/> is unlimited. Only one objective can
            be unlimited at a time.
            </summary>
            <param name="index">The index of the targeted objective.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective with the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.ResetValues">
            <summary>
            Resets all objective values to the default value 0.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.RemoveObjectiveAt(System.Int32)">
            <summary>
            Removes the objective (problem matrix row) at the specified <paramref name="index"/>.
            </summary>
            <param name="index">Corresponds to the objective (row) which should be removed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective at the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.RemoveValuesAt(System.Int32)">
            <summary>
            Removes the objective values (problem matrix column) at the specified <paramref name="index"/>.
            </summary>
            <param name="index">Corresponds to the objective values (column) which should be removed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If there is no objective value column at the specified <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.ResizeObjectives(System.Int32)">
            <summary>
            Changes the number of values (column length) for each objective to the specified <paramref
            name="valueCount"/>.
            <para/>
            If there will be more objectives than before, every added objective will be configured so that it will be
            maximized and normalized by default.
            </summary>
            <param name="valueCount">The new number of values for each objective.</param>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.ClearAgent">
            <summary>
            Removes every behaviour, steering filter or steering tag from the agent and resets the <see
            cref="T:Polarith.AI.Move.AIMContext"/> component to its default values.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.ClearObjectives">
            <summary>
            Removes all objectives including all values.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.ClearValues">
            <summary>
            Removes all values but preserves the number of objectives. Conceptually, this means we get a problem matrix
            with a certain number of (virtual) rows but without any column values.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.UpdateIndicator">
            <summary>
            A signal for the indicator gizmo that the current results from evaluating the context were properly
            obtained. If set, the gizmo is able to draw itself, so this method should be called after <see
            cref="M:Polarith.AI.Move.Context.Evaluate"/> and before the next update step since the gizmo requires the context data.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.Reset">
            <summary>
            Reset to default values. Reset is called when the user hits the Reset button in the Inspector's context menu
            or when adding the component the first time. This function is only called in editor mode. Reset is most
            commonly used to give good default values in the inspector.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.AIMContext.UpdateThreadSafety">
            <summary>
            Forces a recheck against thread-safety for all attached behaviours.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.AIMContextIndicator">
            <summary>
            The purpose of <see cref="T:Polarith.AI.Move.AIMContextIndicator"/> is to display the objective values during runtime. In contrast
            to the <see cref="T:Polarith.AI.Move.AIMContext"/> indicator that uses Unity gizmos, this component uses a shader-based
            visualization. That makes it applicable even in build mode as long as the target platform supports geometry
            shaders.
            <para/>
            It is possible and often advisable to attach more than one instance of this class to see the combined effect of
            multiple objectives. A lot of parameters can be adjusted to retain the overview of multiple visualizations, like
            different <see cref="P:Polarith.AI.Move.AIMContextIndicator.IndicatorType"/>s, the <see cref="P:Polarith.AI.Move.AIMContextIndicator.Scale"/> or the <see cref="P:Polarith.AI.Move.AIMContextIndicator.SplatShape"/>.
            <para/>
            Note, to ensure that the component is functional in build mode, include the Splat shader and the
            Extrude shader to the "always included shaders" list in the projects Graphics settings.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContextIndicator.TargetObjective">
            <summary>
            Specifies the objective that is displayed. The objective corresponds to the AIMContext instance that is
            attached to the same <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            If the index is less than 0 or greater than the <see cref="P:Polarith.AI.Move.AIMContext.ObjectiveCount"/>.
            </exception>
        </member>
        <member name="P:Polarith.AI.Move.AIMContextIndicator.DisplayDecision">
            <summary>
            If <c>true</c>, the decision of the current AI update is displayed. Both, the decided receptor and the
            (possibly) interpolated <see cref="P:Polarith.AI.Move.AIMContext.DecidedDirection"/>, are shown. The colors <see
            cref="P:Polarith.AI.Move.AIMContextIndicator.DecisionColor"/> and <see cref="P:Polarith.AI.Move.AIMContextIndicator.InterpolatedDecisionColor"/> affect the result. Otherwise, the
            decision information is ignored for the visualization.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContextIndicator.FilterConstraint">
            <summary>
            If <c>true</c>, all directions that violate the constraint in at least one objective are not displayed.
            Otherwise, the constraints are ignored for the visualization.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContextIndicator.AutoShapeScale">
            <summary>
            If <c>true</c>, the <see cref="P:Polarith.AI.Move.AIMContextIndicator.ShapeScale"/> is calculated automatically based on the <see cref="P:Polarith.AI.Move.AIMContextIndicator.Scale"/> 
            and the sensor of the attached <see cref="T:Polarith.AI.Move.AIMContext"/>. Otherwise, the <see cref="P:Polarith.AI.Move.AIMContextIndicator.ShapeScale"/> parameter 
            is used.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContextIndicator.ShapeScale">
            <summary>
            Determines the size of the primitive used for displaying an objective value. This value can be interpreted 
            as thickness for <see cref="F:Polarith.AI.Move.IndicatorType.Bar"/> or as the area of the <see cref="F:Polarith.AI.Move.IndicatorType.Splat"/> 
            triangle.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContextIndicator.Scale">
            <summary>
            The size of the overall visualization for the <see cref="P:Polarith.AI.Move.AIMContextIndicator.TargetObjective"/>. Different scales can be used
            when having more than one instance attached. This way multiple objectives can be displayed at once.
            <para/>
            Note that changing the scale leads to the rebuild of the underlying mesh. Thus, the rebuilding process is
            done only if the new value differs from the old by <see cref="M:Polarith.Utils.Mathf2.Approximately(System.Single,System.Single)"/> means.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContextIndicator.Transparent">
            <summary>
            If <c>true</c>, the current objective value is passed to the alpha channel. Can be used to avoid occluding
            relevant details. Is especially useful when multiple indicator instances are active at once.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContextIndicator.IndicatorType">
            <summary>
            Defines the style of the visualization. The receptor values corresponding to the <see
            cref="P:Polarith.AI.Move.AIMContextIndicator.TargetObjective"/> are either displayed as a classical bar chart or as 2D circles. Depending on the
            chosen type further parameters are available for customization: the <see cref="P:Polarith.AI.Move.AIMContextIndicator.SplatShape"/> and <see
            cref="P:Polarith.AI.Move.AIMContextIndicator.BarLength"/>. Depending on how you want to analyze the data, both types have their advantages. While
            the bar chart like visualization is more reliable for 2D scenarios, the point Splat rendering is more
            appropriate for 3D sensors, especially if more than one objective is shown.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContextIndicator.SplatShape">
            <summary>
            Defines the shape of the splats when <see cref="P:Polarith.AI.Move.AIMContextIndicator.IndicatorType"/> is set to <see
            cref="F:Polarith.AI.Move.IndicatorType.Splat"/>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContextIndicator.BarLength">
            <summary>
            The length of a bar if the objective value is 1. Only applies to <see cref="F:Polarith.AI.Move.IndicatorType.Bar"/>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContextIndicator.DecisionColor">
            <summary>
            Is assigned to the receptor with the best possible solution for the current AI update. Only used if
            <see cref="P:Polarith.AI.Move.AIMContextIndicator.DisplayDecision"/> is set to <c>true</c>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContextIndicator.InterpolatedDecisionColor">
            <summary>
            The color of the extra shape that is rendered for the <see cref="P:Polarith.AI.Move.AIMContext.DecidedDirection"/>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.AIMContextIndicator.ObjectiveColors">
            <summary>
            The colors that are applied to the different objective value representations. If the <see
            cref="P:Polarith.AI.Move.AIMContextIndicator.TargetObjective"/> index exceeds the <see cref="P:Polarith.AI.Move.AIMContext.ObjectiveCount"/>, the colors start to
            repeat using the modulo operator.
            </summary>
            <exception cref="T:System.DivideByZeroException">
            If the array length is 0. At least one color is necessary.
            </exception>
        </member>
        <member name="M:Polarith.AI.Move.AIMContextIndicator.BuildMesh">
            <summary>
            Guess what, it builds the mesh based on class fields, Captain Obvious strikes again.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.IEvaluationPreparer">
            <summary>
            Classes implementing this interface are responsible for executing processes in order to prepare the (parallel)
            update of AI agents. This is necessary because of Unity's poor multithreading support and allows the overall
            system to distinguish between code which should be multithreaded and code which must not be multithreaded due to
            Unity's restrictions.
            <para/>
            Code written within the <see cref="M:Polarith.AI.Move.IEvaluationPreparer.PrepareEvaluation"/> method is allowed to access all parts of the Unity API,
            as against code written in thread-safe AI parts, e.g. <see cref="M:Polarith.AI.Move.Context.Evaluate"/>, is only allowed to access
            Unity's value types to support multithreading.
            <para/>
            The flag <see cref="P:Polarith.AI.Move.IEvaluationPreparer.Enabled"/> might be used to indicate whether the method <see cref="M:Polarith.AI.Move.IEvaluationPreparer.PrepareEvaluation"/>
            should be called within <see cref="M:Polarith.AI.Move.AIMContext.PrepareEvaluation"/>.
            </summary>
        </member>
        <member name="P:Polarith.AI.Move.IEvaluationPreparer.Enabled">
            <summary>
            Determines whether the method <see cref="M:Polarith.AI.Move.IEvaluationPreparer.PrepareEvaluation"/> should be called.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.IEvaluationPreparer.PrepareEvaluation">
            <summary>
            Within this method, everything requiring access to Unity's reference types needs to be done in order to
            prepare the multithreaded call of <see cref="M:Polarith.AI.Move.Context.Evaluate"/>. This is, for example, the data extraction
            for <see cref="T:Polarith.AI.Move.IPercept`1"/> instances which rely mostly on Unity objects (reference types).
            <para/>
            Needs to be called within the main thread.
            </summary>
        </member>
        <member name="T:Polarith.AI.Move.IPercept`1">
            <summary>
            Classes implementing this interface serve as container for perceived data. For obtaining these data, the method
            <see cref="M:Polarith.AI.Move.IPercept`1.Receive(`0)"/> should be used, whereby <typeparamref name="T"/> is the type for the input instances to
            extract the data from. A percept might be <see cref="P:Polarith.AI.Move.IPercept`1.Active"/> if it is important for an agent.
            </summary>
            <typeparam name="T">Type of the instances for extracting data from.</typeparam>
        </member>
        <member name="P:Polarith.AI.Move.IPercept`1.Active">
            <summary>
            Determines if this percept instance is active and important for an agent.
            </summary>
        </member>
        <member name="M:Polarith.AI.Move.IPercept`1.Receive(`0)">
            <summary>
            Extracts arbitrary information from the given <paramref name="data"/> instance.
            </summary>
            <param name="data">Instance to extract data from.</param>
        </member>
        <member name="T:Polarith.AI.Move.MappingType">
            <summary>
            Used within the <see cref="M:Polarith.AI.Move.MoveBehaviour.MapSpecialSqr(Polarith.AI.Move.MappingType,System.Single,System.Single,System.Single)"/> and <see
            cref="M:Polarith.AI.Move.MoveBehaviour.MapSpecial(Polarith.AI.Move.MappingType,System.Single,System.Single,System.Single)"/> methods in order to specify the desired type
            of the applied mapping function.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.MappingType.Constant">
            <summary>
            Results in 1 constantly.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.MappingType.Linear">
            <summary>
            Maps linearly from the min/max interval to 0 and 1.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.MappingType.InverseLinear">
            <summary>
            Maps inverse linearly from the max/min interval to 1 and 0.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.MappingType.Quadratic">
            <summary>
            Applies a quadratic mapping from the min/max interval to 0 and 1.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.MappingType.InverseQuadratic">
            <summary>
            Applies an inverse quadratic mapping from the max/min interval to 1 and 0.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.MappingType.SquareRoot">
            <summary>
            Applies a square root mapping from the min/max interval to 0 and 1.
            </summary>
        </member>
        <member name="F:Polarith.AI.Move.MappingType.InverseSquareRoot">
            <summary>
            Applies an inverse square root mapping from the max/min interval to 1 and 0.
            </summary>
        </member>
        <member name="T:Polarith.Utils.Collections">
            <summary>
            Contains additional (helper) functionality dealing with collections.
            </summary>
        </member>
        <member name="M:Polarith.Utils.Collections.CopyList``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Copies the data from a source list to a destination list.
            </summary>
            <typeparam name="T">The element type of the list.</typeparam>
            <param name="from">Source list.</param>
            <param name="to">Destination list.</param>
            <exception cref="T:System.NullReferenceException">
            If <paramref name="from"/> or <paramref name="to"/> are <c>null</c>.
            </exception>
        </member>
        <member name="M:Polarith.Utils.Collections.ResizeList``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Resizes a <see cref="T:System.Collections.Generic.IList`1"/> to the given <paramref name="size"/>. Therefore, newly added elements are
            initialized with <c>new</c><typeparamref name="T"/><c>()</c>.
            </summary>
            <typeparam name="T">The element type of the list.</typeparam>
            <param name="list">The list which should be resized.</param>
            <param name="size">The number of elements which the <paramref name="list"/> should contain.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="list"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Polarith.Utils.Collections.ResizeListDefault``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Resizes a <see cref="T:System.Collections.Generic.IList`1"/> to the given <paramref name="size"/>. Therefore, newly added elements are
            initialized with its default value/constructor.
            </summary>
            <typeparam name="T">The element type of the list.</typeparam>
            <param name="list">The list which should be resized.</param>
            <param name="size">The number of elements which the <paramref name="list"/> should contain.</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="list"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Polarith.Utils.Mathf2">
            <summary>
            Utilities providing math functionality.
            </summary>
        </member>
        <member name="F:Polarith.Utils.Mathf2.Epsilon">
            <summary>
            The machine epsilon for <see cref="T:System.Single"/>. It is the smallest possible and reliable number so that
            <c>floatValue + Epsilon &gt; floatValue</c> holds <c>true</c>, whereby the result remains precise.
            </summary>
        </member>
        <member name="M:Polarith.Utils.Mathf2.Approximately(System.Single,System.Single)">
            <summary>
            Compares two floating point values if they are similar. Due to floating point imprecision it is not
            recommended to compare floats using the equal operator, e.g. <c>1f + 0.0000001f == 1.0000001f</c> might not
            return <c>true</c> on certain machines. The <see cref="F:Polarith.Utils.Mathf2.Epsilon"/> constant is used as precision threshold.
            </summary>
            <param name="a">First number to compare <paramref name="b"/> with.</param>
            <param name="b">Second number to compare <paramref name="a"/> with.</param>
            <returns><c>true</c>: if the two given numbers are approximately equal. <c>false</c>: otherwise.</returns>
        </member>
        <member name="M:Polarith.Utils.Mathf2.MapLinear(System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Maps the given value belonging to the old interval to the corresponding value in the new interval.
            Optionally, old values whose mapped new values are lying outside of the new interval are clamped
            accordingly.
            <para/>
            If <paramref name="oldMin"/> and <paramref name="oldMax"/> are equal and the <paramref name="oldValue"/>
            cannot be clamped, then this method returns <see cref="F:System.Single.PositiveInfinity"/>.
            </summary>
            <param name="newMin">Minimum of the new interval.</param>
            <param name="newMax">Maximum of the new interval.</param>
            <param name="oldMin">Minimum of the old interval.</param>
            <param name="oldMax">Maximum of the old interval.</param>
            <param name="oldValue">The value which is mapped from the old to the new interval.</param>
            <param name="clamp">Determines if the value is getting clamped.</param>
            <returns>The mapped value belonging to the new interval.</returns>
        </member>
        <member name="M:Polarith.Utils.Mathf2.MapUrq(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gets the function value for the given argument <paramref name="value"/> using the "Uniform Rational
            Quantization (URQ)" function [Schlick 95], whereby returned function values are always between 0 and 1 if
            the given <paramref name="value"/> is between <paramref name="min"/> and <paramref name="max"/>. The
            parameters <paramref name="min"/> and <paramref name="max"/> control the mapped argument interval of the
            function. Usually, <paramref name="min"/> is 0, to shift the argument interval, a value greater than 0 can
            be specified.
            <para/>
            If the <paramref name="urq"/> parameter is equal to 1, it becomes a linear function. If it is greater than
            1, e.g. 10, the function approximates a square root arc; and if it is lesser than 1, e.g. 0.1, a quadratic
            function is approximated. Note, the parameter <paramref name="urq"/> should always be greater than 0.
            <para/>
            If <paramref name="urq"/> or <paramref name="value"/> is 0 and <paramref name="max"/> minus <paramref
            name="min"/> is 0, then this function would divide by zero, and therefore, <see
            cref="F:System.Single.PositiveInfinity"/> is returned.
            </summary>
            <param name="min">Specifies the minimum of the URQ function argument interval.</param>
            <param name="max">Specifies the maximum of the URQ function argument interval.</param>
            <param name="value">The argument value to be mapped.</param>
            <param name="urq">The URQ parameter to control the function shape.</param>
            <returns>The mapped URQ function value.</returns>
        </member>
        <member name="T:Polarith.UnityUtils.LayerAttribute">
            <summary>
            An attribute for fields representing Unity layers.
            </summary>
        </member>
        <member name="T:Polarith.UnityUtils.NavMeshAreaMaskAttribute">
            <summary>
            This attribute allows to display an int value as a mask field. The elements are navmesh areas.
            </summary>
        </member>
        <member name="T:Polarith.UnityUtils.OpenRangeMaxAttribute">
            <summary>
            This attribute sets an upper limit to a numerical field.
            </summary>
        </member>
        <member name="M:Polarith.UnityUtils.OpenRangeMaxAttribute.#ctor(System.Single)">
            <summary>
            Creates an <see cref="T:Polarith.UnityUtils.OpenRangeMinAttribute"/> instance.
            </summary>
        </member>
        <member name="P:Polarith.UnityUtils.OpenRangeMaxAttribute.Max">
            <summary>
            The lower limit.
            </summary>
        </member>
        <member name="T:Polarith.UnityUtils.OpenRangeMinAttribute">
            <summary>
            This attribute sets a lower limit to a numerical field.
            </summary>
        </member>
        <member name="M:Polarith.UnityUtils.OpenRangeMinAttribute.#ctor(System.Single)">
            <summary>
            Creates an <see cref="T:Polarith.UnityUtils.OpenRangeMinAttribute"/> instance.
            </summary>
        </member>
        <member name="P:Polarith.UnityUtils.OpenRangeMinAttribute.Min">
            <summary>
            The lower limit.
            </summary>
        </member>
        <member name="T:Polarith.UnityUtils.TagAttribute">
            <summary>
            An attribute for fields representing Unity tags.
            </summary>
        </member>
        <member name="T:Polarith.UnityUtils.Colors">
            <summary>
            Collection of colors used by Polarith for design.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.Colors.Red">
            <summary>
            In hex: FF3C3C.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.Colors.Green">
            <summary>
            In hex: 43CB3F.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.Colors.Blue">
            <summary>
            In hex: 649FD6.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.Colors.Orange">
            <summary>
            In hex: FF9903.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.Colors.Yellow">
            <summary>
            In hex: FFEB04.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.Colors.LightGrey">
            <summary>
            In hex: F7F7F7.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.Colors.Grey">
            <summary>
            In hex: B4B4B4.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.Colors.DarkGrey">
            <summary>
            In hex: 343434.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.Colors.LessOpaqueLight">
            <summary>
            Intended to be used as a transparent overlay color for background panels having a lesser alpha value than
            <see cref="F:Polarith.UnityUtils.Colors.MoreOpaqueLight"/> while using Unity's light skin.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.Colors.MoreOpaqueLight">
            <summary>
            Intended to be used as a transparent overlay color for background panels having a greater alpha value than
            <see cref="F:Polarith.UnityUtils.Colors.LessOpaqueLight"/> while using Unity's light skin.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.Colors.LessOpaqueDark">
            <summary>
            Intended to be used as a transparent overlay color for background panels having a lesser alpha value than
            <see cref="F:Polarith.UnityUtils.Colors.MoreOpaqueDark"/> while using Unity's dark skin.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.Colors.MoreOpaqueDark">
            <summary>
            Intended to be used as a transparent overlay color for background panels having a greater alpha value than
            <see cref="F:Polarith.UnityUtils.Colors.LessOpaqueDark"/> while using Unity's dark skin.
            </summary>
        </member>
        <member name="T:Polarith.UnityUtils.GameObjects">
            <summary>
            Provides additional functionality for the handling of Unity's <see cref="T:UnityEngine.GameObject"/> class.
            </summary>
        </member>
        <member name="M:Polarith.UnityUtils.GameObjects.FindGameObjectsWithLayer(System.Int32)">
            <summary>
            Returns all active loaded objects with the specified <paramref name="layer"/>. It will return no assets
            (meshes, textures, prefabs, ...) or inactive objects. Please note that this function is very slow. It is not
            recommended to use this function every frame. In most cases you can use the singleton pattern instead.
            </summary>
            <param name="layer">The layer of the object to find.</param>
            <returns>The array of objects found matching the layer specified.</returns>
        </member>
        <member name="M:Polarith.UnityUtils.GameObjects.FindGameObjectsWithLayer(System.String)">
            <summary>
            Returns all active loaded objects with the layer having the specified <paramref name="layerName"/>. It will
            return no assets (meshes, textures, prefabs, ...) or inactive objects. Please note that this function is
            very slow. It is not recommended to use this function every frame. In most cases you can use the singleton
            pattern instead.
            </summary>
            <param name="layerName">The layer (name) of the object to find.</param>
            <returns>The array of objects found matching the layer specified.</returns>
        </member>
        <member name="T:Polarith.UnityUtils.CircleGizmo">
            <summary>
            Represents a circle gizmo to be drawn within the scene view. This class is serializable so that it is suitable
            for the direct use in <see cref="T:UnityEngine.MonoBehaviour"/> instances supporting Unity's inspector.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.CircleGizmo.Enabled">
            <summary>
            Determines whether this gizmo is enabled.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.CircleGizmo.Color">
            <summary>
            The color of the drawn circle.
            </summary>
        </member>
        <member name="M:Polarith.UnityUtils.CircleGizmo.Draw(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
            <summary>
            Draws a circle with <paramref name="radius"/> at the specified <paramref name="center"/>.
            <para/>
            Needs to be called in Unity's OnDrawGizmos method.
            </summary>
            <param name="center">The center position where the circle gets drawn.</param>
            <param name="rotation">The rotation used for drawing the circle.</param>
            <param name="radius">The radius for the drawn circle.</param>
        </member>
        <member name="M:Polarith.UnityUtils.CircleGizmo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Polarith.UnityUtils.CircleGizmo.#ctor(UnityEngine.Color)">
            <summary>
            Advanced constructor to set the color of the Circle Gizmo.
            </summary>
            <param name="c"></param>
        </member>
        <member name="T:Polarith.UnityUtils.GridGizmo">
            <summary>
            Represents a grid gizmo to be drawn within the scene view. This class is serializable so that it is suitable for
            the direct use in <see cref="T:UnityEngine.MonoBehaviour"/> instances supporting Unity's inspector.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.GridGizmo.Enabled">
            <summary>
            Determines whether this gizmo is enabled.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.GridGizmo.Outline">
            <summary>
            If <c>true</c>, only the outer boundaries are visualized.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.GridGizmo.Color">
            <summary>
            The color of the drawn grid.
            </summary>
        </member>
        <member name="M:Polarith.UnityUtils.GridGizmo.Draw(UnityEngine.Vector3,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
            Displays the gizmo in the scene view.
            </summary>
            <param name="center">The center of the grid in world coordinates.</param>
            <param name="cellSizeX">The cell size for the x-axis.</param>
            <param name="cellSizeY">The cell size for the y-axis.</param>
            <param name="cellSizeZ">The cell size for the z-axis.</param>
            <param name="cellCountX">The cell count for the x-axis.</param>
            <param name="cellCountY">The cell count for the y-axis.</param>
            <param name="cellCountZ">The cell count for the z-axis.</param>
        </member>
        <member name="T:Polarith.UnityUtils.PlaneGizmo">
            <summary>
            Represents a plane gizmo to be drawn within the scene view. This class is serializable so that it is suitable
            for the direct use in <see cref="T:UnityEngine.MonoBehaviour"/> instances supporting Unity's inspector.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.PlaneGizmo.Enabled">
            <summary>
            Determines whether this gizmo is enabled.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.PlaneGizmo.Color">
            <summary>
            The color of the drawn plane.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.PlaneGizmo.PlaneSize">
            <summary>
            Defines the size of the shown gizmos.
            </summary>
        </member>
        <member name="M:Polarith.UnityUtils.PlaneGizmo.Draw(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draws a plane at the given <paramref name="center"/> position. The plane is defined by the two directions,
            <paramref name="direction1"/> and <paramref name="direction2"/>. Both directions should not be <see
            cref="P:UnityEngine.Vector3.zero"/> nor parallel to each other.
            <para/>
            Needs to be called in Unity's OnDrawGizmos method.
            </summary>
            <param name="center">The center position for the plane to be drawn.</param>
            <param name="direction1">The first direction vector defining the plane.</param>
            <param name="direction2">The second direction vector defining the plane.</param>
        </member>
        <member name="T:Polarith.UnityUtils.RaycastGizmo">
            <summary>
            Used to visualize a ray that is cast into the scene to sense something. The ray itself is displayed as a line
            and a possible hit is displayed by a solid sphere. This class is serializable so that it is suitable for the
            direct use in <see cref="T:UnityEngine.MonoBehaviour"/> instances supporting Unity's inspector.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.RaycastGizmo.Enabled">
            <summary>
            Determines whether this gizmo is enabled.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.RaycastGizmo.Color">
            <summary>
            The color of the drawn line.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.RaycastGizmo.HitColor">
            <summary>
            The color of the sphere that is displayed if the ray hit something.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.RaycastGizmo.Size">
            <summary>
            Defines the size of the shown gizmos.
            </summary>
        </member>
        <member name="M:Polarith.UnityUtils.RaycastGizmo.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Display the actual ray as a line with the set <see cref="F:Polarith.UnityUtils.RaycastGizmo.Color"/>. The length of the given <paramref
            name="direction"/> determines the drawn line length.
            </summary>
            <param name="position">The global start position.</param>
            <param name="direction">The global direction of the ray.</param>
        </member>
        <member name="M:Polarith.UnityUtils.RaycastGizmo.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Display the actual ray as a line with the set <see cref="F:Polarith.UnityUtils.RaycastGizmo.Color"/>. The length of the given <paramref
            name="localDirection"/> determines the drawn line length.
            </summary>
            <param name="position">The global start position.</param>
            <param name="localDirection">The local direction of the ray.</param>
            <param name="rotation">The global rotation applied to the local direction.</param>
        </member>
        <member name="M:Polarith.UnityUtils.RaycastGizmo.DrawRayHit(UnityEngine.Vector3)">
            <summary>
            Displays a solid sphere at the given position that is used to indicate a raycast hit.
            </summary>
            <param name="position">The global position of the raycast hit.</param>
        </member>
        <member name="T:Polarith.UnityUtils.SphereGizmo">
            <summary>
            Represents a gizmo to be drawn within the scene view which might indicate the position of a possible target.
            <para/>
            This class is serializable so that it is suitable for the direct use in <see cref="T:UnityEngine.MonoBehaviour"/> instances
            supporting Unity's inspector.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.SphereGizmo.Enabled">
            <summary>
            Determines whether this gizmo is enabled.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.SphereGizmo.Size">
            <summary>
            The size of the drawn target sphere.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.SphereGizmo.Color">
            <summary>
            The color of the drawn target sphere.
            </summary>
        </member>
        <member name="M:Polarith.UnityUtils.SphereGizmo.Draw(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Draws a colored sphere which might indicate a possible target at the specified <paramref name="center"/>.
            <para/>
            Needs to be called in Unity's OnDrawGizmos method.
            </summary>
            <param name="center">The center of the drawn target sphere.</param>
            <param name="wired">If true, draws the sphere as wired.</param>
        </member>
        <member name="T:Polarith.UnityUtils.VelocityGizmo">
            <summary>
            A gizmo that displays a velocity by visualizing both a direction vector and predicted position relative to a
            given point. This class is serializable so that it is suitable for the direct use in <see cref="T:UnityEngine.MonoBehaviour"/>
            instances supporting Unity's inspector.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.VelocityGizmo.Enabled">
            <summary>
            Determines whether this gizmo is enabled.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.VelocityGizmo.Color">
            <summary>
            The color of the drawn visualizations.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.VelocityGizmo.DirectionScale">
            <summary>
            The scale of the direction indication. If the scale is 1, this line segment directly displays the velocity
            vector unscaled in Unity units.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.VelocityGizmo.PointSize">
            <summary>
            Scales the sphere indicating the predicted position, which is independent from the <see
            cref="F:Polarith.UnityUtils.VelocityGizmo.DirectionScale"/>.
            </summary>
        </member>
        <member name="M:Polarith.UnityUtils.VelocityGizmo.Draw(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>
            If <see cref="F:Polarith.UnityUtils.VelocityGizmo.Enabled"/> is <c>true</c>, this method displays the velocity gizmo using the given <see
            cref="F:Polarith.UnityUtils.VelocityGizmo.Color"/>, <see cref="F:Polarith.UnityUtils.VelocityGizmo.DirectionScale"/> and <see cref="F:Polarith.UnityUtils.VelocityGizmo.PointSize"/>. A line segment is drawn to show
            the velocity direction, whereby the length of this line segment indicates the velocity magnitude.
            Additionally, a sphere is drawn that displays a possible future position based on the given velocity.
            </summary>
            <param name="point">The origin of the gizmo in world coordinates.</param>
            <param name="direction">The velocity direction which is expected to be normalized.</param>
            <param name="velocityMagnitude">The actual velocity magnitude.</param>
            <param name="predictionMagnitude">
            The custom magnitude used for the prediction which might be different from the <paramref
            name="velocityMagnitude"/>.
            </param>
        </member>
        <member name="T:Polarith.UnityUtils.WireSphereGizmo">
            <summary>
            Represents a gizmo to be drawn within the scene view which might indicate ranges in 3D.
            <para/>
            This class is serializable so that it is suitable for the direct use in <see cref="T:UnityEngine.MonoBehaviour"/> instances
            supporting Unity's inspector.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.WireSphereGizmo.Enabled">
            <summary>
            Determines whether this gizmo is enabled.
            </summary>
        </member>
        <member name="F:Polarith.UnityUtils.WireSphereGizmo.Color">
            <summary>
            The color of the drawn target sphere.
            </summary>
        </member>
        <member name="M:Polarith.UnityUtils.WireSphereGizmo.Draw(UnityEngine.Vector3,System.Single)">
            <summary>
            Draws a colored sphere which might indicate a possible target at the specified <paramref name="center"/>.
            <para/>
            Needs to be called in Unity's OnDrawGizmos method.
            </summary>
            <param name="center">The center of the drawn target sphere.</param>
            <param name="radius">The radius of the sphere.</param>
        </member>
        <member name="T:Polarith.UnityUtils.Mathv">
            <summary>
            Provides some basic mathematical functionalities for working with vector-based geometry like lines or planes.
            </summary>
        </member>
        <member name="M:Polarith.UnityUtils.Mathv.GetNearestEdge(System.Collections.Generic.IList{UnityEngine.Vector3},UnityEngine.Vector3,System.Single,System.Int32)">
            <summary>
            Computes the edge of the given <paramref name="polygon"/> which is nearest to the given <paramref
            name="point"/>. The edges are obtained by the collection of points called <paramref name="polygon"/>. It is
            assumed that the path points are sorted.
            </summary>
            <param name="polygon">Sorted list of polygon points.</param>
            <param name="point">Point relative to the path</param>
            <param name="maxDistance">
            Heuristic maximum distance a point must have to an edge for being considered as solution immediately
            (optional).
            </param>
            <param name="startEdgeIndex">Determines the edge index where to start the algorithm (optional).</param>
            <returns>Index of the edge nearest to the given <paramref name="point"/>.</returns>
        </member>
        <member name="M:Polarith.UnityUtils.Mathv.GetNearestEdge(System.Collections.Generic.IList{UnityEngine.Vector3},UnityEngine.Vector3,System.Int32)">
            <summary>
            Computes the edge of the given <paramref name="polygon"/> which is nearest to the given <paramref
            name="point"/>. The edges are obtained by the collection of points called <paramref name="polygon"/>. It is
            assumed that the path points are sorted.
            </summary>
            <param name="polygon">Sorted list of polygon points.</param>
            <param name="point">Point relative to the path</param>
            <param name="startEdgeIndex">Determines the edge index where to start the algorithm (optional).</param>
            <returns>Index of the edge nearest to the given <paramref name="point"/>.</returns>
        </member>
        <member name="M:Polarith.UnityUtils.Mathv.ProjectPointOnLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Projects a given point onto a line. The line is characterized by a start and end point. Optionally, the
            projected point can be clamped between the start and end point. For this to work, the additional parameter
            <paramref name="clamped"/> needs to be set (which is the default).
            </summary>
            <param name="point">The given point which has to be projected.</param>
            <param name="start">The start point of the line.</param>
            <param name="end">The end point of the line.</param>
            <param name="clamped">If <c>true</c>, the projected point is clamped.</param>
            <returns>The projected point.</returns>
        </member>
        <member name="M:Polarith.UnityUtils.Mathv.RoundZeroElements(UnityEngine.Vector3@)">
            <summary>
            Rounds all elements of the given <paramref name="point"/> to zero which are within the interval (- <see
            cref="F:Polarith.Utils.Mathf2.Epsilon"/>, + <see cref="F:Polarith.Utils.Mathf2.Epsilon"/>).
            </summary>
            <param name="point">Point for rounding values to zero if possible.</param>
        </member>
        <member name="M:Polarith.UnityUtils.Mathv.CartesianToSperical(UnityEngine.Vector3)">
            <summary>
            Converts the given <paramref name="point"/> from cartesian coordinates into spherical coordinates ignoring
            the radius parameter that is assumed to be 1.
            </summary>
            <param name="point">Point in cartesian coordinates.</param>
            <returns>
            A vector containing the two spherical angles: x = azimuth angle and y = polar angle. The radius parameter is
            assumed to be 1.
            </returns>
        </member>
        <member name="M:Polarith.UnityUtils.Mathv.SphericalToCartesian(UnityEngine.Vector2)">
            <summary>
            Converts the given <paramref name="point"/> from spherical coordinates into cartesian coordinates ignoring
            the radius parameter that is assumed to be 1. 
            </summary>
            <param name="point">Point in spherical coordinates (azimuth, polar).</param>
            <returns>A vector containing the 3 cartesian coordiantes.</returns>
        </member>
        <member name="M:Polarith.UnityUtils.Mathv.MinElement(UnityEngine.Vector3)">
            <summary>
            Returns the minimum element from a given <see cref="T:UnityEngine.Vector3"/>.
            </summary>
            <param name="vector">The input vector.</param>
            <returns>The smallest element of the input vector.</returns>
        </member>
        <member name="M:Polarith.UnityUtils.Mathv.MaxElement(UnityEngine.Vector3)">
            <summary>
            Returns the maximum element from a given <see cref="T:UnityEngine.Vector3"/>.
            </summary>
            <param name="vector">The input vector.</param>
            <returns>The greatest element of the input vector.</returns>
        </member>
    </members>
</doc>
